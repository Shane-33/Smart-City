/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See https://github.com/Esri/calcite-design-system/blob/main/LICENSE.md for details.
 * v1.11.0
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-e433dc3a.js');
const dom = require('./dom-b708de15.js');
const key = require('./key-a08abeaa.js');
const interactive = require('./interactive-79b6c5f7.js');
const component = require('./component-8aad1833.js');
require('./guid-bc43d543.js');
require('./resources-a31ffd1a.js');
require('./browser-881f0556.js');

const tableRowCss = ":host([disabled]){cursor:default;-webkit-user-select:none;user-select:none;opacity:var(--calcite-ui-opacity-disabled)}:host([disabled]) *,:host([disabled]) ::slotted(*){pointer-events:none}:host{--calcite-internal-table-row-background:var(--calcite-table-row-background, var(--calcite-ui-foreground-1));--calcite-internal-table-row-border-color:var(--calcite-table-row-border-color, transparent);display:contents}:host([hidden]){display:none}[hidden]{display:none}:host([disabled]) tr{pointer-events:none;opacity:var(--calcite-ui-opacity-disabled)}:host([disabled]) ::slotted([calcite-hydrated][disabled]),:host([disabled]) [calcite-hydrated][disabled]{opacity:1}tr{border-block-end:1px solid var(--calcite-internal-table-row-border-color);background-color:var(--calcite-internal-table-row-background)}";

const TableRow = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.calciteTableRowSelect = index.createEvent(this, "calciteTableRowSelect", 6);
    this.calciteInternalTableRowFocusRequest = index.createEvent(this, "calciteInternalTableRowFocusRequest", 6);
    this.rowCells = [];
    this.emitTableRowFocusRequest = (cellPosition, rowPosition, destination, lastCell) => {
      this.calciteInternalTableRowFocusRequest.emit({
        cellPosition,
        rowPosition,
        destination,
        lastCell,
      });
    };
    this.updateCells = () => {
      const slottedCells = this.tableRowSlotEl
        ?.assignedElements({ flatten: true })
        ?.filter((el) => el.matches("calcite-table-cell") || el.matches("calcite-table-header"));
      const renderedCells = Array.from(this.tableRowEl?.querySelectorAll("calcite-table-header, calcite-table-cell"))?.filter((el) => el.numberCell || el.selectionCell);
      const cells = renderedCells ? renderedCells.concat(slottedCells) : slottedCells;
      if (cells.length > 0) {
        cells?.forEach((cell, index) => {
          cell.positionInRow = index + 1;
          cell.parentRowType = this.rowType;
          cell.scale = this.scale;
          if (cell.nodeName === "CALCITE-TABLE-CELL") {
            cell.readCellContentsToAT = this.readCellContentsToAT;
            cell.disabled = this.disabled;
            cell.parentRowIsSelected = this.selected;
          }
        });
      }
      this.rowCells =
        cells || [];
      this.cellCount = cells?.length;
    };
    this.handleSelectionOfRow = () => {
      this.calciteTableRowSelect.emit();
    };
    this.handleKeyboardSelection = (event) => {
      if (key.isActivationKey(event.key)) {
        if (event.key === " ") {
          event.preventDefault();
        }
        this.handleSelectionOfRow();
      }
    };
    this.disabled = false;
    this.selected = false;
    this.cellCount = undefined;
    this.rowType = undefined;
    this.numbered = false;
    this.positionSection = undefined;
    this.positionSectionLocalized = undefined;
    this.positionAll = undefined;
    this.readCellContentsToAT = undefined;
    this.scale = undefined;
    this.selectionMode = "none";
    this.selectedRowCount = undefined;
    this.selectedRowCountLocalized = undefined;
    this.bodyRowCount = undefined;
    this.effectiveLocale = "";
  }
  handleCellChanges() {
    if (this.tableRowEl && this.rowCells.length > 0) {
      this.updateCells();
    }
  }
  handleDelayedCellChanges() {
    if (this.tableRowEl && this.rowCells.length > 0) {
      requestAnimationFrame(() => this.updateCells());
    }
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  componentDidLoad() {
    if (this.tableRowEl && this.rowCells.length > 0) {
      this.updateCells();
    }
  }
  connectedCallback() {
    interactive.connectInteractive(this);
  }
  componentDidRender() {
    interactive.updateHostInteraction(this);
  }
  disconnectedCallback() {
    interactive.disconnectInteractive(this);
  }
  //--------------------------------------------------------------------------
  //
  //  Event Listeners
  //
  //--------------------------------------------------------------------------
  calciteInternalTableRowFocusChangeHandler(event) {
    if (event.target.contains(this.el)) {
      const position = event.detail.cellPosition;
      const rowPosition = event.detail.rowPosition;
      const destination = event.detail.destination;
      const lastCell = event.detail.lastCell;
      if (rowPosition === this.positionAll) {
        if (this.disabled) {
          const deflectDirection = destination === "last" ? "previous" : destination === "first" ? "next" : destination;
          this.emitTableRowFocusRequest(position, this.positionAll, deflectDirection);
          return;
        }
        const cellPosition = lastCell
          ? this.rowCells[this.rowCells.length - 1]
          : this.rowCells?.find((_, index) => index + 1 === position);
        if (cellPosition) {
          cellPosition.setFocus();
        }
      }
    }
  }
  //--------------------------------------------------------------------------
  //
  //  Private Methods
  //
  //--------------------------------------------------------------------------
  keyDownHandler(event) {
    const el = event.target;
    const key = event.key;
    const isControl = event.ctrlKey;
    const cells = this.rowCells;
    if (el.matches("calcite-table-cell") || el.matches("calcite-table-header")) {
      switch (key) {
        case "ArrowUp":
          this.emitTableRowFocusRequest(el.positionInRow, this.positionAll, "previous");
          event.preventDefault();
          break;
        case "ArrowDown":
          this.emitTableRowFocusRequest(el.positionInRow, this.positionAll, "next");
          event.preventDefault();
          break;
        case "PageUp":
          this.emitTableRowFocusRequest(el.positionInRow, this.positionAll, "first");
          event.preventDefault();
          break;
        case "PageDown":
          this.emitTableRowFocusRequest(el.positionInRow, this.positionAll, "last");
          event.preventDefault();
          break;
        case "ArrowLeft":
          dom.focusElementInGroup(cells, el, "previous", false);
          event.preventDefault();
          break;
        case "ArrowRight":
          dom.focusElementInGroup(cells, el, "next", false);
          event.preventDefault();
          break;
        case "Home":
          if (isControl) {
            this.emitTableRowFocusRequest(1, this.positionAll, "first");
            event.preventDefault();
          }
          else {
            dom.focusElementInGroup(cells, el, "first", false);
            event.preventDefault();
          }
          break;
        case "End":
          if (isControl) {
            this.emitTableRowFocusRequest(this.rowCells?.length, this.positionAll, "last", true);
            event.preventDefault();
          }
          else {
            dom.focusElementInGroup(cells, el, "last", false);
            event.preventDefault();
          }
          break;
      }
    }
  }
  //--------------------------------------------------------------------------
  //
  //  Render Methods
  //
  //--------------------------------------------------------------------------
  renderSelectionIcon() {
    const icon = this.selectionMode === "multiple" && this.selected
      ? "check-square-f"
      : this.selectionMode === "multiple"
        ? "square"
        : this.selected
          ? "circle-f"
          : "circle";
    return index.h("calcite-icon", { icon: icon, scale: component.getIconScale(this.scale) });
  }
  renderSelectableCell() {
    return this.rowType === "head" ? (index.h("calcite-table-header", { alignment: "center", bodyRowCount: this.bodyRowCount, key: "selection-head", onClick: this.selectionMode === "multiple" && this.handleSelectionOfRow, onKeyDown: this.selectionMode === "multiple" && this.handleKeyboardSelection, selectedRowCount: this.selectedRowCount, selectedRowCountLocalized: this.selectedRowCountLocalized, selectionCell: true, selectionMode: this.selectionMode })) : this.rowType === "body" ? (index.h("calcite-table-cell", { alignment: "center", key: "selection-body", onClick: this.handleSelectionOfRow, onKeyDown: this.handleKeyboardSelection, parentRowIsSelected: this.selected, parentRowPositionLocalized: this.positionSectionLocalized, selectionCell: true }, this.renderSelectionIcon())) : (index.h("calcite-table-cell", { alignment: "center", key: "selection-foot", selectionCell: true }));
  }
  renderNumberedCell() {
    return this.rowType === "head" ? (index.h("calcite-table-header", { alignment: "center", key: "numbered-head", numberCell: true })) : this.rowType === "body" ? (index.h("calcite-table-cell", { alignment: "center", key: "numbered-body", numberCell: true }, this.positionSectionLocalized)) : (index.h("calcite-table-cell", { alignment: "center", key: "numbered-foot", numberCell: true }));
  }
  render() {
    return (index.h(index.Host, null, index.h("tr", { "aria-disabled": this.disabled, "aria-rowindex": this.positionAll + 1, "aria-selected": this.selected, onKeyDown: (event) => this.keyDownHandler(event),
      // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)
      ref: (el) => (this.tableRowEl = el) }, this.numbered && this.renderNumberedCell(), this.selectionMode !== "none" && this.renderSelectableCell(), index.h("slot", { onSlotchange: this.updateCells, ref: (el) => (this.tableRowSlotEl = el) }))));
  }
  get el() { return index.getElement(this); }
  static get watchers() { return {
    "bodyRowCount": ["handleCellChanges"],
    "scale": ["handleCellChanges"],
    "selected": ["handleCellChanges"],
    "selectedRowCount": ["handleCellChanges"],
    "numbered": ["handleDelayedCellChanges"],
    "selectionMode": ["handleDelayedCellChanges"]
  }; }
};
TableRow.style = tableRowCss;

exports.calcite_table_row = TableRow;
