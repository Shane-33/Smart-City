/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See https://github.com/Esri/calcite-design-system/blob/main/LICENSE.md for details.
 * v1.11.0
 */
import { h, } from "@stencil/core";
import { debounce } from "lodash-es";
import { slotChangeHasAssignedElement, toAriaBoolean } from "../../utils/dom";
import { connectInteractive, disconnectInteractive, updateHostInteraction, } from "../../utils/interactive";
import { createObserver } from "../../utils/observers";
import { MAX_COLUMNS } from "../list-item/resources";
import { getListItemChildren, updateListItemChildren } from "../list-item/utils";
import { CSS, debounceTimeout, SLOTS } from "./resources";
import { connectSortableComponent, disconnectSortableComponent, dragActive, } from "../../utils/sortableComponent";
import { SLOTS as STACK_SLOTS } from "../stack/resources";
const listItemSelector = "calcite-list-item";
const listItemSelectorDirect = `:scope > calcite-list-item`;
const parentSelector = "calcite-list-item-group, calcite-list-item";
import { componentFocusable, setComponentLoaded, setUpLoadableComponent, } from "../../utils/loadable";
/**
 * A general purpose list that enables users to construct list items that conform to Calcite styling.
 *
 * @slot - A slot for adding `calcite-list-item` elements.
 * @slot filter-actions-start - A slot for adding actionable `calcite-action` elements before the filter component.
 * @slot filter-actions-end - A slot for adding actionable `calcite-action` elements after the filter component.
 */
export class List {
  constructor() {
    this.dragSelector = "calcite-list-item";
    this.enabledListItems = [];
    this.handleSelector = "calcite-handle";
    this.listItems = [];
    this.mutationObserver = createObserver("mutation", () => this.updateListItems());
    this.handleDefaultSlotChange = (event) => {
      updateListItemChildren(getListItemChildren(event.target));
      if (this.parentListEl) {
        this.calciteInternalListDefaultSlotChange.emit();
      }
    };
    this.handleFilterActionsStartSlotChange = (event) => {
      this.hasFilterActionsStart = slotChangeHasAssignedElement(event);
    };
    this.handleFilterActionsEndSlotChange = (event) => {
      this.hasFilterActionsEnd = slotChangeHasAssignedElement(event);
    };
    this.setActiveListItem = () => {
      const { enabledListItems } = this;
      if (!enabledListItems.some((item) => item.active)) {
        if (enabledListItems[0]) {
          enabledListItems[0].active = true;
        }
      }
    };
    this.updateSelectedItems = (emit = false) => {
      this.selectedItems = this.enabledListItems.filter((item) => item.selected);
      if (emit) {
        this.calciteListChange.emit();
      }
    };
    this.updateFilteredItems = (emit = false) => {
      const { listItems, filteredData, filterText } = this;
      const values = filteredData.map((item) => item.value);
      const lastDescendantItems = listItems?.filter((listItem) => listItems.every((li) => li === listItem || !listItem.contains(li)));
      const filteredItems = listItems.filter((item) => !filterText || values.includes(item.value)) || [];
      const visibleParents = new WeakSet();
      lastDescendantItems.forEach((listItem) => this.filterElements({ el: listItem, filteredItems, visibleParents }));
      if (filteredItems.length > 0) {
        this.findAncestorOfFirstFilteredItem(filteredItems);
      }
      this.filteredItems = filteredItems;
      if (emit) {
        this.calciteListFilter.emit();
      }
    };
    this.setFilterEl = (el) => {
      this.filterEl = el;
      this.performFilter();
    };
    this.handleFilterChange = (event) => {
      event.stopPropagation();
      const { value } = event.currentTarget;
      this.filterText = value;
      this.updateFilteredData(true);
    };
    this.getItemData = () => {
      return this.listItems.map((item) => ({
        label: item.label,
        description: item.description,
        metadata: item.metadata,
        value: item.value,
      }));
    };
    this.updateListItems = debounce((emit = false) => {
      const { selectionAppearance, selectionMode, dragEnabled } = this;
      if (!!this.parentListEl) {
        const items = this.queryListItems(true);
        items.forEach((item) => {
          item.dragHandle = dragEnabled;
        });
        this.setUpSorting();
        return;
      }
      const items = this.queryListItems();
      items.forEach((item) => {
        item.selectionAppearance = selectionAppearance;
        item.selectionMode = selectionMode;
      });
      const dragItems = this.queryListItems(true);
      dragItems.forEach((item) => {
        item.dragHandle = dragEnabled;
      });
      this.listItems = items;
      if (this.filterEnabled) {
        this.dataForFilter = this.getItemData();
        if (this.filterEl) {
          this.filterEl.items = this.dataForFilter;
        }
      }
      this.updateFilteredItems(emit);
      this.enabledListItems = this.filteredItems.filter((item) => !item.disabled && !item.closed);
      this.setActiveListItem();
      this.updateSelectedItems(emit);
      this.setUpSorting();
    }, debounceTimeout);
    this.queryListItems = (direct = false) => {
      return Array.from(this.el.querySelectorAll(direct ? listItemSelectorDirect : listItemSelector));
    };
    this.focusRow = (focusEl) => {
      const { enabledListItems } = this;
      if (!focusEl) {
        return;
      }
      enabledListItems.forEach((listItem) => (listItem.active = listItem === focusEl));
      focusEl.setFocus();
    };
    this.isNavigable = (listItem) => {
      const parentListItemEl = listItem.parentElement?.closest(listItemSelector);
      if (!parentListItemEl) {
        return true;
      }
      return parentListItemEl.open && this.isNavigable(parentListItemEl);
    };
    this.handleListKeydown = (event) => {
      if (event.defaultPrevented || !!this.parentListEl) {
        return;
      }
      const { key } = event;
      const filteredItems = this.enabledListItems.filter((listItem) => this.isNavigable(listItem));
      const currentIndex = filteredItems.findIndex((listItem) => listItem.active);
      if (key === "ArrowDown") {
        event.preventDefault();
        const nextIndex = event.target === this.filterEl ? 0 : currentIndex + 1;
        if (filteredItems[nextIndex]) {
          this.focusRow(filteredItems[nextIndex]);
        }
      }
      else if (key === "ArrowUp") {
        event.preventDefault();
        if (currentIndex === 0 && this.filterEnabled) {
          this.filterEl?.setFocus();
          return;
        }
        const prevIndex = currentIndex - 1;
        if (filteredItems[prevIndex]) {
          this.focusRow(filteredItems[prevIndex]);
        }
      }
      else if (key === "Home") {
        event.preventDefault();
        const homeItem = filteredItems[0];
        if (homeItem) {
          this.focusRow(homeItem);
        }
      }
      else if (key === "End") {
        event.preventDefault();
        const endItem = filteredItems[filteredItems.length - 1];
        if (endItem) {
          this.focusRow(endItem);
        }
      }
    };
    this.findAncestorOfFirstFilteredItem = (filteredItems) => {
      this.ancestorOfFirstFilteredItem?.removeAttribute("data-filter");
      filteredItems.forEach((item) => {
        item.removeAttribute("data-filter");
      });
      this.ancestorOfFirstFilteredItem = this.getTopLevelAncestorItemElement(filteredItems[0]);
      filteredItems[0].setAttribute("data-filter", "0");
      this.ancestorOfFirstFilteredItem?.setAttribute("data-filter", "0");
    };
    this.getTopLevelAncestorItemElement = (el) => {
      let closestParent = el.parentElement.closest("calcite-list-item");
      while (closestParent) {
        const closestListItemAncestor = closestParent.parentElement.closest("calcite-list-item");
        if (closestListItemAncestor) {
          closestParent = closestListItemAncestor;
        }
        else {
          return closestParent;
        }
      }
      return null;
    };
    this.disabled = false;
    this.canPull = undefined;
    this.canPut = undefined;
    this.dragEnabled = false;
    this.group = undefined;
    this.filterEnabled = false;
    this.filteredItems = [];
    this.filteredData = [];
    this.filterPlaceholder = undefined;
    this.filterText = undefined;
    this.label = undefined;
    this.loading = false;
    this.openable = false;
    this.selectedItems = [];
    this.selectionMode = "none";
    this.selectionAppearance = "icon";
    this.assistiveText = undefined;
    this.dataForFilter = [];
    this.hasFilterActionsEnd = false;
    this.hasFilterActionsStart = false;
  }
  async handleFilterTextChange() {
    this.performFilter();
  }
  handleListItemChange() {
    this.updateListItems();
  }
  handleCalciteInternalFocusPreviousItem(event) {
    if (this.parentListEl) {
      return;
    }
    event.stopPropagation();
    const { enabledListItems } = this;
    const currentIndex = enabledListItems.findIndex((listItem) => listItem.active);
    const prevIndex = currentIndex - 1;
    if (enabledListItems[prevIndex]) {
      this.focusRow(enabledListItems[prevIndex]);
    }
  }
  handleCalciteInternalListItemActive(event) {
    if (!!this.parentListEl) {
      return;
    }
    event.stopPropagation();
    const target = event.target;
    const { listItems } = this;
    listItems.forEach((listItem) => {
      listItem.active = listItem === target;
    });
  }
  handleCalciteListItemSelect() {
    if (!!this.parentListEl) {
      return;
    }
    this.updateSelectedItems(true);
  }
  handleCalciteInternalHandleChange(event) {
    this.assistiveText = event.detail.message;
    event.stopPropagation();
  }
  handleCalciteHandleNudge(event) {
    if (!!this.parentListEl) {
      return;
    }
    this.handleNudgeEvent(event);
  }
  handleCalciteInternalListItemSelect(event) {
    if (!!this.parentListEl) {
      return;
    }
    event.stopPropagation();
    const target = event.target;
    const { listItems, selectionMode } = this;
    if (target.selected && (selectionMode === "single" || selectionMode === "single-persist")) {
      listItems.forEach((listItem) => (listItem.selected = listItem === target));
    }
    this.updateSelectedItems();
  }
  handleCalciteInternalListItemChange(event) {
    if (!!this.parentListEl) {
      return;
    }
    event.stopPropagation();
    this.updateListItems();
  }
  handleCalciteInternalListItemGroupDefaultSlotChange(event) {
    event.stopPropagation();
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  connectedCallback() {
    if (dragActive(this)) {
      return;
    }
    this.connectObserver();
    this.updateListItems();
    this.setUpSorting();
    connectInteractive(this);
    this.setParentList();
  }
  disconnectedCallback() {
    if (dragActive(this)) {
      return;
    }
    this.disconnectObserver();
    disconnectSortableComponent(this);
    disconnectInteractive(this);
  }
  componentWillLoad() {
    setUpLoadableComponent(this);
  }
  componentDidRender() {
    updateHostInteraction(this);
  }
  componentDidLoad() {
    setComponentLoaded(this);
  }
  // --------------------------------------------------------------------------
  //
  //  Public Methods
  //
  // --------------------------------------------------------------------------
  /**
   * Sets focus on the component's first focusable element.
   *
   * @returns {Promise<void>}
   */
  async setFocus() {
    await componentFocusable(this);
    if (this.filterEnabled) {
      return this.filterEl?.setFocus();
    }
    return this.enabledListItems.find((listItem) => listItem.active)?.setFocus();
  }
  // --------------------------------------------------------------------------
  //
  //  Render Methods
  //
  // --------------------------------------------------------------------------
  render() {
    const { loading, label, disabled, dataForFilter, filterEnabled, filterPlaceholder, filterText, hasFilterActionsStart, hasFilterActionsEnd, } = this;
    return (h("div", { class: CSS.container }, this.dragEnabled ? (h("span", { "aria-live": "assertive", class: CSS.assistiveText }, this.assistiveText)) : null, loading ? h("calcite-scrim", { class: CSS.scrim, loading: loading }) : null, h("table", { "aria-busy": toAriaBoolean(loading), "aria-label": label || "", class: CSS.table, onKeyDown: this.handleListKeydown, role: "treegrid" }, filterEnabled || hasFilterActionsStart || hasFilterActionsEnd ? (h("thead", null, h("tr", { class: { [CSS.sticky]: true } }, h("th", { colSpan: MAX_COLUMNS }, h("calcite-stack", { class: CSS.stack }, h("slot", { name: SLOTS.filterActionsStart, onSlotchange: this.handleFilterActionsStartSlotChange, slot: STACK_SLOTS.actionsStart }), h("calcite-filter", { "aria-label": filterPlaceholder, disabled: loading || disabled, items: dataForFilter, onCalciteFilterChange: this.handleFilterChange, placeholder: filterPlaceholder, value: filterText,
      // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)
      ref: this.setFilterEl }), h("slot", { name: SLOTS.filterActionsEnd, onSlotchange: this.handleFilterActionsEndSlotChange, slot: STACK_SLOTS.actionsEnd })))))) : null, h("tbody", { class: CSS.tableContainer }, h("slot", { onSlotchange: this.handleDefaultSlotChange })))));
  }
  // --------------------------------------------------------------------------
  //
  //  Private Methods
  //
  // --------------------------------------------------------------------------
  connectObserver() {
    this.mutationObserver?.observe(this.el, { childList: true, subtree: true });
  }
  disconnectObserver() {
    this.mutationObserver?.disconnect();
  }
  setUpSorting() {
    const { dragEnabled } = this;
    if (!dragEnabled) {
      return;
    }
    connectSortableComponent(this);
  }
  onDragStart() {
    this.disconnectObserver();
  }
  onDragEnd() {
    this.connectObserver();
  }
  onDragSort(detail) {
    this.setParentList();
    this.updateListItems();
    this.calciteListOrderChange.emit(detail);
  }
  setParentList() {
    this.parentListEl = this.el.parentElement?.closest("calcite-list");
  }
  filterElements({ el, filteredItems, visibleParents, }) {
    const hidden = !visibleParents.has(el) && !filteredItems.includes(el);
    el.hidden = hidden;
    const closestParent = el.parentElement.closest(parentSelector);
    if (!closestParent) {
      return;
    }
    if (!hidden) {
      visibleParents.add(closestParent);
    }
    this.filterElements({
      el: closestParent,
      filteredItems,
      visibleParents,
    });
  }
  updateFilteredData(emit = false) {
    const { filterEl } = this;
    if (!filterEl) {
      return;
    }
    if (filterEl.filteredItems) {
      this.filteredData = filterEl.filteredItems;
    }
    this.updateListItems(emit);
  }
  async performFilter() {
    const { filterEl, filterText } = this;
    if (!filterEl) {
      return;
    }
    filterEl.value = filterText;
    await filterEl.filter(filterText);
    this.updateFilteredData();
  }
  handleNudgeEvent(event) {
    const { direction } = event.detail;
    const composedPath = event.composedPath();
    const handle = composedPath.find((el) => el.tagName === "CALCITE-HANDLE");
    const sortItem = composedPath.find((el) => el.tagName === "CALCITE-LIST-ITEM");
    const parentEl = sortItem?.parentElement;
    if (!parentEl) {
      return;
    }
    const { enabledListItems } = this;
    const sameParentItems = enabledListItems.filter((item) => item.parentElement === parentEl);
    const lastIndex = sameParentItems.length - 1;
    const oldIndex = sameParentItems.indexOf(sortItem);
    let appendInstead = false;
    let newIndex;
    if (direction === "up") {
      if (oldIndex === 0) {
        appendInstead = true;
        newIndex = lastIndex;
      }
      else {
        newIndex = oldIndex - 1;
      }
    }
    else {
      if (oldIndex === lastIndex) {
        newIndex = 0;
      }
      else if (oldIndex === lastIndex - 1) {
        appendInstead = true;
        newIndex = lastIndex;
      }
      else {
        newIndex = oldIndex + 2;
      }
    }
    this.disconnectObserver();
    if (appendInstead) {
      parentEl.appendChild(sortItem);
    }
    else {
      parentEl.insertBefore(sortItem, sameParentItems[newIndex]);
    }
    this.updateListItems();
    this.connectObserver();
    this.calciteListOrderChange.emit({
      dragEl: sortItem,
      fromEl: parentEl,
      toEl: parentEl,
      newIndex,
      oldIndex,
    });
    handle.setFocus().then(() => {
      handle.activated = true;
    });
  }
  static get is() { return "calcite-list"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["list.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["list.css"]
    };
  }
  static get properties() {
    return {
      "disabled": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "When `true`, interaction is prevented and the component is displayed with lower opacity."
        },
        "attribute": "disabled",
        "reflect": true,
        "defaultValue": "false"
      },
      "canPull": {
        "type": "unknown",
        "mutable": false,
        "complexType": {
          "original": "(detail: ListDragDetail) => boolean",
          "resolved": "(detail: ListDragDetail) => boolean",
          "references": {
            "ListDragDetail": {
              "location": "import",
              "path": "./interfaces"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "When provided, the method will be called to determine whether the element can  move from the list."
        }
      },
      "canPut": {
        "type": "unknown",
        "mutable": false,
        "complexType": {
          "original": "(detail: ListDragDetail) => boolean",
          "resolved": "(detail: ListDragDetail) => boolean",
          "references": {
            "ListDragDetail": {
              "location": "import",
              "path": "./interfaces"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "When provided, the method will be called to determine whether the element can be added from another list."
        }
      },
      "dragEnabled": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "When `true`, `calcite-list-item`s are sortable via a draggable button."
        },
        "attribute": "drag-enabled",
        "reflect": true,
        "defaultValue": "false"
      },
      "group": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [],
          "text": "The list's group identifier.\n\nTo drag elements from one list into another, both lists must have the same group value."
        },
        "attribute": "group",
        "reflect": true
      },
      "filterEnabled": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "When `true`, an input appears at the top of the component that can be used by end users to filter `calcite-list-item`s."
        },
        "attribute": "filter-enabled",
        "reflect": true,
        "defaultValue": "false"
      },
      "filteredItems": {
        "type": "unknown",
        "mutable": true,
        "complexType": {
          "original": "HTMLCalciteListItemElement[]",
          "resolved": "HTMLCalciteListItemElement[]",
          "references": {
            "HTMLCalciteListItemElement": {
              "location": "global"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "readonly",
              "text": undefined
            }],
          "text": "The currently filtered `calcite-list-item`s."
        },
        "defaultValue": "[]"
      },
      "filteredData": {
        "type": "unknown",
        "mutable": true,
        "complexType": {
          "original": "ItemData",
          "resolved": "{ label: string; description: string; metadata: Record<string, unknown>; value: string; }[]",
          "references": {
            "ItemData": {
              "location": "import",
              "path": "../list-item/interfaces"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "readonly",
              "text": undefined
            }],
          "text": "The currently filtered `calcite-list-item` data."
        },
        "defaultValue": "[]"
      },
      "filterPlaceholder": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Placeholder text for the component's filter input field."
        },
        "attribute": "filter-placeholder",
        "reflect": true
      },
      "filterText": {
        "type": "string",
        "mutable": true,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Text for the component's filter input field."
        },
        "attribute": "filter-text",
        "reflect": true
      },
      "label": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Specifies an accessible name for the component."
        },
        "attribute": "label",
        "reflect": false
      },
      "loading": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "When `true`, a busy indicator is displayed."
        },
        "attribute": "loading",
        "reflect": true,
        "defaultValue": "false"
      },
      "openable": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "internal",
              "text": undefined
            }],
          "text": "One of the items within the list can be opened."
        },
        "attribute": "openable",
        "reflect": false,
        "defaultValue": "false"
      },
      "selectedItems": {
        "type": "unknown",
        "mutable": true,
        "complexType": {
          "original": "HTMLCalciteListItemElement[]",
          "resolved": "HTMLCalciteListItemElement[]",
          "references": {
            "HTMLCalciteListItemElement": {
              "location": "global"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "readonly",
              "text": undefined
            }],
          "text": "The currently selected items."
        },
        "defaultValue": "[]"
      },
      "selectionMode": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "Extract<\n    \"none\" | \"multiple\" | \"single\" | \"single-persist\",\n    SelectionMode\n  >",
          "resolved": "\"multiple\" | \"none\" | \"single\" | \"single-persist\"",
          "references": {
            "Extract": {
              "location": "global"
            },
            "SelectionMode": {
              "location": "import",
              "path": "../interfaces"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Specifies the selection mode - `\"multiple\"` (allow any number of selected items), `\"single\"` (allow one selected item), `\"single-persist\"` (allow one selected item and prevent de-selection), or `\"none\"` (no selected items)."
        },
        "attribute": "selection-mode",
        "reflect": true,
        "defaultValue": "\"none\""
      },
      "selectionAppearance": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "SelectionAppearance",
          "resolved": "\"border\" | \"icon\"",
          "references": {
            "SelectionAppearance": {
              "location": "import",
              "path": "./resources"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Specifies the selection appearance - `\"icon\"` (displays a checkmark or dot) or `\"border\"` (displays a border)."
        },
        "attribute": "selection-appearance",
        "reflect": true,
        "defaultValue": "\"icon\""
      }
    };
  }
  static get states() {
    return {
      "assistiveText": {},
      "dataForFilter": {},
      "hasFilterActionsEnd": {},
      "hasFilterActionsStart": {}
    };
  }
  static get events() {
    return [{
        "method": "calciteListChange",
        "name": "calciteListChange",
        "bubbles": true,
        "cancelable": false,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Emits when any of the list item selections have changed."
        },
        "complexType": {
          "original": "void",
          "resolved": "void",
          "references": {}
        }
      }, {
        "method": "calciteListFilter",
        "name": "calciteListFilter",
        "bubbles": true,
        "cancelable": false,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Emits when the component's filter has changed."
        },
        "complexType": {
          "original": "void",
          "resolved": "void",
          "references": {}
        }
      }, {
        "method": "calciteListOrderChange",
        "name": "calciteListOrderChange",
        "bubbles": true,
        "cancelable": false,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Emitted when the order of the list has changed."
        },
        "complexType": {
          "original": "ListDragDetail",
          "resolved": "ListDragDetail",
          "references": {
            "ListDragDetail": {
              "location": "import",
              "path": "./interfaces"
            }
          }
        }
      }, {
        "method": "calciteInternalListDefaultSlotChange",
        "name": "calciteInternalListDefaultSlotChange",
        "bubbles": true,
        "cancelable": false,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Emitted when the default slot has changes in order to notify parent lists."
        },
        "complexType": {
          "original": "void",
          "resolved": "void",
          "references": {}
        }
      }];
  }
  static get methods() {
    return {
      "setFocus": {
        "complexType": {
          "signature": "() => Promise<void>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "Sets focus on the component's first focusable element.",
          "tags": [{
              "name": "returns",
              "text": undefined
            }]
        }
      }
    };
  }
  static get elementRef() { return "el"; }
  static get watchers() {
    return [{
        "propName": "filterText",
        "methodName": "handleFilterTextChange"
      }, {
        "propName": "filterEnabled",
        "methodName": "handleListItemChange"
      }, {
        "propName": "group",
        "methodName": "handleListItemChange"
      }, {
        "propName": "dragEnabled",
        "methodName": "handleListItemChange"
      }, {
        "propName": "selectionMode",
        "methodName": "handleListItemChange"
      }, {
        "propName": "selectionAppearance",
        "methodName": "handleListItemChange"
      }];
  }
  static get listeners() {
    return [{
        "name": "calciteInternalFocusPreviousItem",
        "method": "handleCalciteInternalFocusPreviousItem",
        "target": undefined,
        "capture": false,
        "passive": false
      }, {
        "name": "calciteInternalListItemActive",
        "method": "handleCalciteInternalListItemActive",
        "target": undefined,
        "capture": false,
        "passive": false
      }, {
        "name": "calciteListItemSelect",
        "method": "handleCalciteListItemSelect",
        "target": undefined,
        "capture": false,
        "passive": false
      }, {
        "name": "calciteInternalHandleChange",
        "method": "handleCalciteInternalHandleChange",
        "target": undefined,
        "capture": false,
        "passive": false
      }, {
        "name": "calciteHandleNudge",
        "method": "handleCalciteHandleNudge",
        "target": undefined,
        "capture": false,
        "passive": false
      }, {
        "name": "calciteInternalListItemSelect",
        "method": "handleCalciteInternalListItemSelect",
        "target": undefined,
        "capture": false,
        "passive": false
      }, {
        "name": "calciteInternalListItemChange",
        "method": "handleCalciteInternalListItemChange",
        "target": undefined,
        "capture": false,
        "passive": false
      }, {
        "name": "calciteInternalListItemGroupDefaultSlotChange",
        "method": "handleCalciteInternalListItemGroupDefaultSlotChange",
        "target": undefined,
        "capture": false,
        "passive": false
      }];
  }
}
