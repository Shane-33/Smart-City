/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
import{handlesGroup as e}from"../handleUtils.js";import t from"../Logger.js";import{isPromiseLike as s,createAbortError as i,createResolver as n,throwIfAborted as o}from"../promiseUtils.js";import r from"../Queue.js";import{unregister as l}from"./connectionRegistry.js";import h from"./RemoteClient.js";class c{constructor(){this._inUseClients=new Array,this._clients=new Array,this._clientPromises=new Array,this._ongoingJobsQueue=new r}destroy(){this.close()}get closed(){return!this._clients?.length}open(e,t){return new Promise(((i,n)=>{let r=!0;const l=e=>{o(t.signal),r&&(r=!1,e())};this._clients.length=e.length,this._clientPromises.length=e.length,this._inUseClients.length=e.length;for(let o=0;o<e.length;++o){const r=e[o];s(r)?this._clientPromises[o]=r.then((e=>(this._clients[o]=new h(e,t,this._ongoingJobsQueue),l(i),this._clients[o])),(()=>(l(n),null))):(this._clients[o]=new h(r,t,this._ongoingJobsQueue),this._clientPromises[o]=Promise.resolve(this._clients[o]),l(i))}}))}broadcast(e,t,s){const i=new Array(this._clientPromises.length);for(let n=0;n<this._clientPromises.length;++n){const o=this._clientPromises[n];i[n]=o.then((i=>i?.invoke(e,t,s)))}return i}close(){let e;for(;e=this._ongoingJobsQueue.pop();)e.resolver.reject(i(`Worker closing, aborting job calling '${e.methodName}'`));for(const t of this._clientPromises)t.then((e=>e?.close()));this._clients.length=0,this._clientPromises.length=0,this._inUseClients.length=0,l(this)}invoke(e,s,i){let o;Array.isArray(i)?(t.getLogger("esri.core.workers.Connection").warn("invoke()","The transferList parameter is deprecated, use the options object instead"),o={transferList:i}):o=i;const r=n();this._ongoingJobsQueue.push({methodName:e,data:s,invokeOptions:o,resolver:r});for(let t=0;t<this._clientPromises.length;t++){const e=this._clients[t];e?e.jobAdded():this._clientPromises[t].then((e=>e?.jobAdded()))}return r.promise}on(t,s){return Promise.all(this._clientPromises).then((()=>e(this._clients.map((e=>e.on(t,s))))))}openPorts(){return new Promise((e=>{const t=new Array(this._clientPromises.length);let s=t.length;for(let i=0;i<this._clientPromises.length;++i){this._clientPromises[i].then((n=>{n&&(t[i]=n.openPort()),0==--s&&e(t)}))}}))}get test(){return{numClients:this._clients.length}}}export{c as default};
