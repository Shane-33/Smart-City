/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
import{euclideanHorizontalLength as n,euclideanLength as t,euclideanHorizontalDistanceBetweenPoints as r,euclideanDirectDistanceBetweenPoints as e,euclideanHorizontalDistance as o,euclideanDirectDistance as u}from"./euclideanLengthMeasurementUtils.js";import{geodesicLength as i,geodesicDistanceBetweenPoints as c,geodesicDistance as f}from"./geodesicLengthMeasurementUtils.js";function p(r,e){return h(t,i,n,e,r)}function d(n,t,o){return h(e,c,r,o,n,t)}function l(n,t,r,e){return h(u,f,o,e,n,t,r)}function s(n,t,e){return h(r,c,r,e,n,t)}function a(n,t,r,e){return h(o,f,o,e,n,t,r)}function g(r){return h(t,i,n,"on-the-ground",r)}function m(n,t){return h(r,c,r,"on-the-ground",n,t)}function h(n,t,r,e,...o){if("on-the-ground"===e){const n=t.apply(void 0,o);return null!=n?n:r.apply(void 0,o)}return n.apply(void 0,o)}export{l as autoDirectDistanceByElevationMode,d as autoDirectDistanceByElevationModeBetweenPoints,m as autoDistanceBetweenPoints2D,a as autoHorizontalDistanceByElevationMode,s as autoHorizontalDistanceByElevationModeBetweenPoints,g as autoLength2D,p as autoLengthByElevationMode};
