/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
import{_ as e}from"../../../chunks/tslib.es6.js";import t from"../../../core/Error.js";import{makeHandle as r,handlesGroup as i,destroyHandle as n}from"../../../core/handleUtils.js";import{getProjectiveTransform as s}from"../../../core/perspectiveUtils.js";import{debounce as a,isPromiseLike as o}from"../../../core/promiseUtils.js";import{on as d}from"../../../core/reactiveUtils.js";import{property as l}from"../../../core/accessorSupport/decorators/property.js";import"../../../core/accessorSupport/ensureType.js";import"../../../core/arrayUtils.js";import"../../../core/has.js";import{subclass as m}from"../../../core/accessorSupport/decorators/subclass.js";import{a as p}from"../../../chunks/mat3f64.js";import{toExtent as c}from"../../../geometry/support/aaBoundingRect.js";import{MediaElementView as h}from"../../../layers/support/MediaElementView.js";import{DrapeSourceType as u}from"./interfaces.js";import{LayerView3D as y}from"./LayerView3D.js";import{drapedZ as _}from"../terrain/OverlayRenderer.js";import{Attribute as g}from"../webgl-engine/lib/Attribute.js";import{Geometry as E}from"../webgl-engine/lib/Geometry.js";import{DirtyOperation as f,DirtyState as D}from"../webgl-engine/lib/ModelDirtyTypes.js";import{RenderGeometry as w}from"../webgl-engine/lib/RenderGeometry.js";import{Texture as v}from"../webgl-engine/lib/Texture.js";import{UpdatePolicy as b}from"../webgl-engine/lib/UpdatePolicy.js";import{VertexAttribute as R}from"../webgl-engine/lib/VertexAttribute.js";import{ImageMaterial as j}from"../webgl-engine/materials/ImageMaterial.js";import T from"../../layers/LayerView.js";import{TextureWrapMode as A}from"../../webgl/enums.js";let x=class extends(y(T)){constructor(){super(...arguments),this.type="media-3d",this.drapeSourceType=u.RasterImage,this.updatePolicy=b.ASYNC,this._uidToElement=new Map,this._renderedElements=new Map,this._lastDrapingExtent=null,this._update=a((async(e,t,r)=>{const i=await this._collectMediaElements(e,t,r);this._synchronizeRenderElements(i)}),0)}initialize(){this._renderer=this.view.basemapTerrain.overlayManager.registerGeometryDrapeSource(this);const e=()=>this._updateWithLastDrapingExtent();this.addHandles([r((()=>this.view.basemapTerrain.overlayManager.unregisterDrapeSource(this))),d((()=>this.layer.effectiveSource),"change",e),d((()=>this.layer.effectiveSource),"refresh",e)]),this._updatingHandles.add((()=>this.suspended),e)}setDrapingExtent(e,t){this._lastDrapingExtent={overlays:e,spatialReference:t},this._updateWithLastDrapingExtent()}getHit(e){const t=this._uidToElement.get(e);return t?{type:"media",element:t,layer:this.layer}:null}_updateWithLastDrapingExtent(){if(null==this._lastDrapingExtent||this.suspended)return void(this._renderer&&this._synchronizeRenderElements(new Set));const{overlays:e,spatialReference:t}=this._lastDrapingExtent;this._updatingHandles.addPromise(this._update(e,t).catch((()=>{})))}async _collectMediaElements(e,t,r){const i=this.layer.effectiveSource;return null==i?new Set:new Set((await Promise.all(e.map((e=>i.queryElements(c(e.extent,t),{signal:r}))))).flat())}_synchronizeRenderElements(e){this._synchronizeRenderElementsRemove(e),this._synchronizeRenderElementsAdd(e)}_synchronizeRenderElementsRemove(e){const t=new Set,r=[];this._renderedElements.forEach(((i,n)=>{e.has(n)||(t.add(n),null!=i.renderData&&r.push(i.renderData.renderGeometry),this._removeElement(n,i))})),this._renderer.removeGeometries(r,f.REMOVE)}_synchronizeRenderElementsAdd(e){for(const t of e)this._renderedElements.has(t)||this._createRenderElement(t)}_removeElement(e,{renderData:t,handle:r}){this._destroyRenderData(t),this._renderedElements.delete(e),this._uidToElement.delete(e.uid),r.remove()}async _createRenderElement(e){const t=new h({spatialReference:this.view.spatialReference,element:e}),r={renderData:null,handle:i([this._updatingHandles.add((()=>e.opacity),(e=>{null!=r.renderData&&r.renderData.material.setParameters({opacity:e})})),this._updatingHandles.add((()=>t.coords),(()=>{null!=r.renderData?this._updateGeometry(t,r,r.renderData):this._initializeRenderData(t,r)})),this._updatingHandles.add((()=>e.content),(()=>this._initializeRenderData(t,r))),n(t)])};this._renderedElements.set(e,r),this._uidToElement.set(e.uid,e),this._updatingHandles.addPromise(e.load().catch((()=>{}))),this._initializeRenderData(t,r)}_initializeRenderData(e,t){const{coords:r,element:i}=e,{contentWidth:n,contentHeight:s}=i;if(null==r||null==i.content)return void(t.renderData=this._destroyRenderData(t.renderData));if(null!=t.renderData)return;const a=this._createTexture(i.content),d=a.load(this.view._stage.renderView.renderingContext);this.view._stage.add(a),o(d)&&this._updatingHandles.addPromise(d);const l=new j({initTextureTransparent:!0,textureId:a.id,opacity:i.opacity,transparent:!0,perspectiveInterpolation:!0}),m=this._getPositionAttributeArray(r),p=[0,0,1,0,1,1,0,1],c=this._getPerspectiveDivideAttributeArray(m,n,s),h=[0,1,2,0,2,3],u=new E(l,[[R.POSITION,new g(m,h,3,!0)],[R.UV0,new g(p,h,2,!0)],[R.PERSPECTIVEDIVIDE,new g(c,h,1,!0)]]),y=new w(u,{layerUid:this.layer.uid,graphicUid:i.uid});this._renderer.addGeometries([y],f.ADD),t.renderData={renderGeometry:y,texture:a,material:l}}_updateGeometry(e,t,r){const{coords:i,element:n}=e;if(null==i||null==n.content)return void(t.renderData=this._destroyRenderData(t.renderData));const s=this._getPositionAttributeArray(i);r.renderGeometry.geometry.setAttributeData(R.POSITION,s);const a=this._getPerspectiveDivideAttributeArray(s,n.contentWidth,n.contentHeight);r.renderGeometry.geometry.setAttributeData(R.PERSPECTIVEDIVIDE,a),this._renderer.modifyGeometries([r.renderGeometry],D.GEOMETRY)}_getPositionAttributeArray(e){const[t,r,i,n]=e.rings[0];return[t[0],t[1],_,n[0],n[1],_,i[0],i[1],_,r[0],r[1],_]}_getPerspectiveDivideAttributeArray(e,t,r){s(P,[0,0,t,0,t,r,0,r],[e[0],e[1],e[3],e[4],e[6],e[7],e[9],e[10]]);const i=P[6]/P[8]*t,n=P[7]/P[8]*r;return[1,1+i,1+i+n,1+n]}_destroyRenderData(e){if(null==e)return null;const t=e.texture;return t.unload(),this.view._stage.remove(t),this._renderer.removeGeometries([e.renderGeometry],f.REMOVE),null}_createTexture(e){const r=e instanceof HTMLImageElement?e.naturalWidth:e.width,i=e instanceof HTMLImageElement?e.naturalHeight:e.height;if("getFrame"in e)throw new t("media-layer-view-3d","animation is not supported");return new v(e,{wrap:{s:A.CLAMP_TO_EDGE,t:A.CLAMP_TO_EDGE},preMultiplyAlpha:!0,width:r,height:i,mipmap:!0,updateCallback:()=>this.view.basemapTerrain.overlayManager.setDrawTexturesDirty()})}get test(){const e=this;return{get numberOfElements(){return e._renderedElements.size}}}};e([l({readOnly:!0})],x.prototype,"type",void 0),e([l()],x.prototype,"layer",void 0),x=e([m("esri.views.3d.layers.MediaLayerView3D")],x);const P=p(),M=x;export{M as default};
