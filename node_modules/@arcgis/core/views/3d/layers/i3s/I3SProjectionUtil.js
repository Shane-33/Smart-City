/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
import{a as t}from"../../../../chunks/mat4f64.js";import{c as o}from"../../../../chunks/vec3f64.js";import{getReferenceEllipsoid as n}from"../../../../geometry/ellipsoidUtils.js";import{computeTranslationToOriginAndRotation as a}from"../../../../geometry/projection/computeTranslationToOriginAndRotation.js";function r(o,n,r,s){const i=c(o,n,r),h=t();return a(r,i,h,s),h}const s=1,i=5-s;function c(t,a,r){const c=o(),h=t[3],e=2**(Math.ceil(Math.log(h)*Math.LOG2E/i)*i+s);if(r.isGeographic){const o=e/n(r).radius*180/Math.PI,a=Math.round(t[1]/o),s=Math.max(-90,Math.min(90,a*o)),i=o/Math.cos((Math.abs(s)-o/2)/180*Math.PI),h=Math.round(t[0]/i)*i;c[0]=h,c[1]=s}else{const o=Math.round(t[0]/e),n=Math.round(t[1]/e);c[0]=o*e,c[1]=n*e}const m=t[2]+a,M=Math.round(m/e);return c[2]=M*e,c}export{r as computeGlobalTransformation,c as getLocalOrigin};
