/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
import"../../../../geometry.js";import e from"../../../../core/Error.js";import{px2pt as t,pt2px as r}from"../../../../core/screenUtils.js";import{f as i,d as a}from"../../../../chunks/vec4f64.js";import{create as s,empty as o,expandWithBuffer as n,intersectsClippingArea as l,expandWithAABB as h}from"../../../../geometry/support/aaBoundingBox.js";import{getDriverAxisSizeValueAny as p}from"../../../../renderers/support/renderingInfoUtils.js";import{sharedGeometryElevationAligner as m}from"./ElevationAligners.js";import{SymbolUpdateType as c,elevationModeChangeUpdateType as y,needsElevationUpdates2D as d}from"./elevationAlignmentUtils.js";import{Graphics3DDrapedGraphicLayer as _}from"./Graphics3DDrapedGraphicLayer.js";import{Graphics3DObject3DGraphicLayer as g}from"./Graphics3DObject3DGraphicLayer.js";import{Graphics3DSymbolLayer as u}from"./Graphics3DSymbolLayer.js";import{ApplyRendererDiffResult as f}from"./interfaces.js";import{parseCapType as M,parseLineMarkerStyle as b}from"./lineUtils.js";import{ConvertOptions as L,initFastSymbolUpdatesState as P,updateFastSymbolUpdatesState as E,getAttributeValue as C}from"../support/FastSymbolUpdates.js";import{debugFlags as v}from"../../support/debugFlags.js";import{createGeometry as R}from"../../support/engineContent/line.js";import{geometryToRenderInfo as w,geometryToRenderInfoDraped as x}from"../../support/renderInfoUtils/line.js";import{Object3D as k}from"../../webgl-engine/lib/Object3D.js";import{RenderGeometry as D}from"../../webgl-engine/lib/RenderGeometry.js";import{LineMarkerMaterial as j}from"../../webgl-engine/materials/LineMarkerMaterial.js";import{getStipplePatternForLinePattern as A}from"../../webgl-engine/materials/lineStippleUtils.js";import{RibbonLineMaterial as S}from"../../webgl-engine/materials/RibbonLineMaterial.js";import U from"../../../../geometry/Extent.js";import G from"../../../../geometry/Polygon.js";const z=["polyline","polygon","extent"],W=new L({size:!0,color:!0,rotation:!1,opacity:!0});class O extends u{constructor(e,t,r,i){super(e,t,r,i)}async doLoad(){if(this._fastUpdates=P(this._context.renderer,W),!this._drivenProperties.size){if((null!=this.symbolLayer.size?this.symbolLayer.size:t(1))<0)throw new e("graphics3dlinesymbollayer:invalid-size","Symbol sizes may not be negative values")}}_getMaterialParameters(e,t=!1){const r=this._getCombinedOpacityAndColor(t&&this._markerColor||this._materialColor);this._patternHidesLine&&!t&&(r[3]=0);const i={width:this._computeMaterialWidth(this.symbolLayer?.size),color:r,hasPolygonOffset:!0,join:this.symbolLayer.join||"miter",cap:M(this.symbolLayer.cap||"butt"),hasSlicePlane:this._context.slicePlaneEnabled,isClosed:e,stipplePattern:A(this.symbolLayer.pattern)};return this._fastUpdates?.visualVariables?{...i,...this._fastUpdates.materialParameters}:i}get _materialColor(){return this.symbolLayer.material?.color}get _markerColor(){return this.symbolLayer.marker?.color}get _lineMaterial(){return null==this._materials[I.Line]&&(this._materials[I.Line]=new S(this._getMaterialParameters(!1)),this._context.stage.add(this._materials[I.Line])),this._materials[I.Line]}get _ringMaterial(){return null==this._materials[I.Ring]&&(this._materials[I.Ring]=new S(this._getMaterialParameters(!0)),this._context.stage.add(this._materials[I.Ring])),this._materials[I.Ring]}get _wireframeLineMaterial(){return null==this._materials[I.LineWireframe]&&(this._materials[I.LineWireframe]=new S({...this._getMaterialParameters(!1),wireframe:!0}),this._context.stage.add(this._materials[I.LineWireframe])),this._materials[I.LineWireframe]}get _wireframeRingMaterial(){return null==this._materials[I.RingWireframe]&&(this._materials[I.RingWireframe]=new S({...this._getMaterialParameters(!0),wireframe:!0}),this._context.stage.add(this._materials[I.RingWireframe])),this._materials[I.RingWireframe]}get _markerMaterial(){return null==this._materials[I.Marker]&&null!=this.symbolLayer.marker&&(this._materials[I.Marker]=new j({...this._getMaterialParameters(!1,!0),placement:this.symbolLayer.marker.placement,markerPrimitive:b(this.symbolLayer.marker.style)}),this._context.stage.add(this._materials[I.Marker])),this._materials[I.Marker]}destroy(){super.destroy(),this._forEachMaterial((e=>this._context.stage.remove(e))),this._materials.length=0}_getDrivenSize(e){return this._drivenProperties.size&&e.size?r(p(e.size)):1}_getDrivenColor(e){const t=i(1,1,1,1);return this._drivenProperties.color&&e.color&&(t[0]=e.color[0],t[1]=e.color[1],t[2]=e.color[2],e.color.length>0&&(t[3]=e.color[3])),this._drivenProperties.opacity&&e.opacity&&(t[3]=e.opacity),t}createGraphics3DGraphic(e){const t=e.graphic;if(!this._validateGeometry(t.geometry,z,this.symbolLayer.type))return null;const r=this.setGraphicElevationContext(t);return this.ensureDrapedStatus("on-the-ground"===r.mode),this.draped?this._createAsOverlay(e,this._context.layer.uid):this._createAs3DShape(e,r,t.uid)}applyRendererDiff(e,t){for(const r in e.diff){if("visualVariables"!==r)return f.RecreateSymbol;{const e=this._fastUpdates;if(!E(e,t,W))return f.RecreateSymbol;this._forEachMaterial((t=>t?.setParameters(e.materialParameters)))}}return f.FastUpdate}prepareSymbolLayerPatch(e){if("partial"!==e.diff.type)return;const t=e.diff.diff,r={};"complete"===t.size?.type&&(r.width=this._computeMaterialWidth(t.size.newValue),delete t.size),"complete"===t.cap?.type&&(r.cap=M(t.cap.newValue??"butt"),delete t.cap);const i=this._prepareMarkerPatch(e,t);this._prepareMaterialPatch(e,t,i),e.symbolLayerStatePatches.push((()=>this._forEachMaterial((e=>e?.setParameters(r)))))}layerOpacityChanged(){this._forEachMaterial(((e,t)=>this._updateMaterialLayerOpacity(e,t===I.Marker)))}_forEachMaterial(e){this._materials.forEach(e)}_updateMaterialLayerOpacity(e,t=!1){if(null==e)return;const r=e.parameters.color,a=this.symbolLayer?.material?.color,s=this._patternHidesLine&&!t?0:this._getCombinedOpacity(a),o=i(r[0],r[1],r[2],s);e.setParameters({color:o})}layerElevationInfoChanged(e,t,r){const i=this._elevationContext.mode,a=y(O.elevationModeChangeTypes,r,i);if(a!==c.UPDATE)return a;const s=d(i);return this.updateGraphics3DGraphicElevationInfo(e,t,(()=>s))}slicePlaneEnabledChanged(){const e={hasSlicePlane:this._context.slicePlaneEnabled};return this._forEachMaterial((t=>t?.setParameters(e))),!0}physicalBasedRenderingChanged(){return!0}_getGeometryAsPolygonOrPolyline(e){switch(e.type){case"extent":if(e instanceof U)return G.fromExtent(e);break;case"polygon":case"polyline":return e}return null}_createAs3DShape(e,t,r){const i=e.graphic,a=this._getGeometryAsPolygonOrPolyline(i.geometry),h="polygon"===a.type?a.rings:a.paths,p=new Array,c=s(),y=w(a,this._context.elevationProvider,this._context.renderCoordsHelper,t),_="polygon"===a.type?"rings":"paths";this._logGeometryCreationWarnings(y,h,_,"LineSymbol3DLayer");for(let s=0;s<y.lines.length;s++){const t=y.lines[s],i=t.position,h=t.mapPositions;if(null!=this._context.clippingExtent&&(o(c),n(c,h),!l(c,this._context.clippingExtent)))continue;const m=this._createGeometry("polygon"===a.type?this._ringMaterial:this._lineMaterial,e,i,h,a.type,V.ELEVATED,r);p.push(m),v.LINE_WIREFRAMES&&p.push(m.instantiate({material:"polygon"===a.type?this._wireframeRingMaterial:this._wireframeLineMaterial})),null!=this._markerMaterial&&p.push(m.instantiate({material:this._markerMaterial}))}if(0===p.length)return null;const u=new k({geometries:p,castShadow:!1,layerUid:this._context.layer.uid,graphicUid:r}),f=new g(this,u,p,null,null,m,t);return f.alignedSampledElevation=y.sampledElevation,f.needsElevationUpdates=d(t.mode),f}_createGeometry(e,t,r,i,a,s,o){const n=s===V.DRAPED?{spatialReference:this._context.overlaySR,renderCoordsHelper:this._context.renderCoordsHelper}:null,l="polygon"===a,h=this._fastUpdates?.visualVariables.color,p=this._fastUpdates?.visualVariables.size,m=this._fastUpdates?.visualVariables.opacity,c=this._context.stage.renderView.getObjectAndLayerIdColor({graphicUid:o,layerUid:this._context.layer.uid}),y={position:r,size:p?null:this._getDrivenSize(t.renderingInfo),color:h?null:this._getDrivenColor(t.renderingInfo),sizeFeature:p?C(p.field,t.graphic):null,colorFeature:h?C(h.field,t.graphic):null,opacityFeature:m?C(m.field,t.graphic):null};return R(e,{overlayInfo:n,removeDuplicateStartEnd:l,mapPositions:i,attributeData:y},c)}_createAsOverlay(e,t){const r=e.graphic,i=this._getGeometryAsPolygonOrPolyline(r.geometry),a="polygon"===i.type?i.rings:i.paths,p="polygon"===i.type?this._ringMaterial:this._lineMaterial;p.renderPriority=this._renderPriority;const m=v.LINE_WIREFRAMES?"polygon"===i.type?this._wireframeRingMaterial:this._wireframeLineMaterial:null,c=this._markerMaterial;null!=m&&(m.renderPriority=this._renderPriority-.001),null!=c&&(c.renderPriority=this._renderPriority-.002);const y=new Array,d=s(),g=o(),u=x(i,this._context.overlaySR),f="polygon"===i.type?"rings":"paths";this._logGeometryCreationWarnings(u,a,f,"LineSymbol3DLayer");for(const s of u.lines){if(o(d),n(d,s.position),!l(d,this._context.clippingExtent))continue;h(g,d);const a=a=>{const o=this._createGeometry(a,e,s.position,void 0,i.type,V.DRAPED,r.uid),n=new D(o,{layerUid:t,graphicUid:r.uid});y.push(n)};if(null!=c){a(c);const e=this.symbolLayer.marker.placement;"begin"!==e&&"begin-end"!==e||n(d,s.position,0,1),"end"!==e&&"begin-end"!==e||n(d,s.position,s.position.length-3,1)}a(p),v.LINE_WIREFRAMES&&a(m)}return new _(this,y,g,this._context.drapeSourceRenderer)}get _patternHidesLine(){const e=this.symbolLayer.pattern;return null!=e&&"style"===e.type&&"none"===e.style}_computeMaterialWidth(e){return e=e??t(1),this._drivenProperties.size?this._fastUpdates?.visualVariables.size?r(1):1:r(e)}_prepareMaterialPatch(e,t,r){const i=t.material;if(null==i)return void(r.changed&&r.useMaterialColor&&this._patchMaterialColor(this._getCombinedOpacityAndColor(this._materialColor),this._materials[I.Marker],e));if("collection"===i.type)return;const s="complete"===i.type?i.newValue?.color:"complete"===i.diff.color?.type?i.diff.color.newValue:null,o=this._getCombinedOpacityAndColor(s);r.useMaterialColor&&this._patchMaterialColor(a(o),this._materials[I.Marker],e),this._patternHidesLine&&(o[3]=0),this._patchMaterialColor(o,this._materials[I.Line],e),delete t.material}_prepareMarkerPatch(e,t){const r=t.marker,i=this._markerMaterial;if(null==r||"partial"!==r.type||null==r.diff||null!=r.diff.placement||null!=r.diff.style&&"complete"!==r.diff.style.type||null!=r.diff.color&&"complete"!==r.diff.color.type||null==i)return{changed:!1,useMaterialColor:null==this._markerColor};const a=r.diff.color,s=null!=a,o=s?a.newValue:null,n=null==o&&null==this._markerColor;o&&this._patchMaterialColor(this._getCombinedOpacityAndColor(o),i,e);const l=r.diff.style?.newValue;return l&&e.symbolLayerStatePatches.push((()=>i.setParameters({markerPrimitive:b(l)}))),delete t.marker,{changed:s,useMaterialColor:n}}_patchMaterialColor(e,t,r){null!=t&&r.symbolLayerStatePatches.push((()=>t.setParameters({color:e})))}}var V,I;O.elevationModeChangeTypes={definedChanged:c.RECREATE,staysOnTheGround:c.NONE,onTheGroundChanged:c.RECREATE},function(e){e[e.DRAPED=0]="DRAPED",e[e.ELEVATED=1]="ELEVATED"}(V||(V={})),function(e){e[e.Line=0]="Line",e[e.Ring=1]="Ring",e[e.LineWireframe=2]="LineWireframe",e[e.RingWireframe=3]="RingWireframe",e[e.Marker=4]="Marker"}(I||(I={}));export{O as Graphics3DLineSymbolLayer};
