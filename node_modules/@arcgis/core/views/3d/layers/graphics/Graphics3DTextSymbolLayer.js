/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
import e from"../../../../core/Error.js";import{isPromiseLike as t}from"../../../../core/promiseUtils.js";import{pt2px as n}from"../../../../core/screenUtils.js";import{f as r,Z as s,a as i}from"../../../../chunks/vec2f64.js";import{hasCalloutSupport as o,textSymbolLayerSupportsVerticalOffset as l}from"../../../../symbols/callouts/calloutUtils.js";import{perObjectElevationAligner as a}from"./ElevationAligners.js";import{SymbolUpdateType as c,needsElevationUpdates2D as m}from"./elevationAlignmentUtils.js";import{ElevationContext as h}from"./ElevationContext.js";import{Graphics3DObject3DGraphicLayer as p}from"./Graphics3DObject3DGraphicLayer.js";import{Graphics3DObjectMetadata as u}from"./Graphics3DObjectMetadata.js";import{Graphics3DSymbolLayer as f}from"./Graphics3DSymbolLayer.js";import{validateSymbolLayerSize as d}from"./graphicUtils.js";import{LabelPlacement as g,LabelParameters as y}from"./LabelParameters.js";import{verticalScreenOffsetFromAlignment as x,verticalPlacementFromAlignment as v,textRenderAlignmentFromHorizontalPlacement as b,horizontalPlacementToAnchorX as P,anchorFromPlacements as O,namedAnchorToHUDMaterialAnchorPos as w}from"./placementUtils.js";import{placePointOnGeometry as j,createStageObject as S,extendPointGraphicElevationContext as E}from"./pointUtils.js";import{getFontMetrics as _}from"../../webgl-engine/lib/FontMetrics.js";import{createPointGeometry as L}from"../../webgl-engine/lib/GeometryUtil.js";import{TextRenderParameters as z}from"../../webgl-engine/lib/TextRenderParameters.js";import C from"../../webgl-engine/lib/TextTextureFactory.js";import{HUDMaterial as G}from"../../webgl-engine/materials/HUDMaterial.js";const U=[0,0,1];class R extends f{constructor(e,t,n,r){super(e,t,n,r),this._elevationOptions={supportsOffsetAdjustment:!0,supportsOnTheGround:!1},this.ensureDrapedStatus(!1)}async doLoad(){if(!this._drivenProperties.size){const t=d(this.symbolLayer.size);if(t)throw new e("graphics3dtextsymbollayer:invalid-size",t)}await this._createTextRenderParameters()}async _createTextRenderParameters(){const e=this._context.graphicsCoreOwner.view.state.rasterPixelRatio;this._textRenderParameters=await z.fromSymbol(this.symbolLayer,e)}destroy(){super.destroy()}createGraphics3DGraphic(e){const t=e.graphic,n=j(t.geometry);if(null==n)return this.logger.warn(`unsupported geometry type for text symbol: ${t.geometry.type}`),null;const r=this.symbolLayer.text;if(null==r||""===r)return null;const s=o(this.symbol)&&this.symbol.hasVisibleVerticalOffset()?this.symbol.verticalOffset:null;if(null!=s&&!l(this.symbolLayer))return this.logger.errorOncePerTick(`Callouts and vertical offset on text symbols are currently only supported with 'center' horizontal alignment (not with '${this.symbolLayer.horizontalAlignment}' alignment)`),null;const{verticalAlignment:i}=this.symbolLayer,a=new g(s);x(i,a.screenOffset);const c=new y(a,this.symbolLayer.horizontalAlignment,v(i));return this._createAs3DShape(t,n,r,c)}createLabel(e,t,n,r,s){const i=e.graphic,o=j(i.geometry);if(null==o)return this.logger.warn(`unsupported geometry type for label: ${i.geometry.type}`),null;const l=t.text;return!l||/^\s+$/.test(l)?null:this._createAs3DShape(i,o,l,t,n,r,s)}setGraphicElevationContext(e,t,n=0){return super.setGraphicElevationContext(e,t),t.addOffsetRenderUnits(n),t}layerOpacityChanged(){return this.logger.warn("layer opacity change not yet implemented in Graphics3DTextSymbolLayer"),!1}layerElevationInfoChanged(e,t){return D(e,t,((e,t)=>{this.updateGraphicElevationContext(t,e)})),c.UPDATE}slicePlaneEnabledChanged(e,t){return D(e,t,(e=>{for(const t of e.stageObject.geometries)t.material.setParameters({hasSlicePlane:this._context.slicePlaneEnabled})})),!0}physicalBasedRenderingChanged(){return!0}get pixelRatioChanged(){return!1}updateGraphicElevationContext(e,t){const n=t.elevationContext;this.setGraphicElevationContext(e,n,null!=t.metadata?t.metadata.elevationOffset:0),t.needsElevationUpdates=m(n.mode)||"absolute-height"===n.mode}_defaultElevationInfoNoZ(){return T}_createAs3DShape(e,o,l,c,f=null,d=null,g=(()=>c.placement.elevationOffset)){const y=this.setGraphicElevationContext(e,new h,c.placement.elevationOffset),x="polyline"===e.geometry?.type,v=e.uid;let P=null,O=null;if(null==d){const e=b(c.horizontalPlacement);P=new C(l,e,this._textRenderParameters);let n=null;if(null!=this._context.sharedResources.textures){O=this._context.sharedResources.textures.fromData(P.key,(()=>P.create())),O.texture.events.on("unloaded",(()=>n?.release()));const e=this._context.stage.renderView.textureRepository.acquire(O.texture.id);if(null==e||t(e))return O.release(),null;n=e}}const w=A(P,c),j={occlusionTest:!0,screenOffset:c.placement.screenOffset,anchorPosition:w,polygonOffset:!0,color:[1,1,1,1],centerOffsetUnits:c.placement.centerOffsetUnits,drawInSecondSlot:!0};if(d?j.textureId=d.id:O&&(j.textureId=O.texture.id),null!=c.placement.verticalOffset){const{screenLength:e,minWorldLength:t,maxWorldLength:r}=c.placement.verticalOffset;j.verticalOffset={screenLength:n(e),minWorldLength:t||0,maxWorldLength:null!=r?r:1/0}}if(this._context.screenSizePerspectiveEnabled){const{screenSizePerspectiveSettings:e,screenSizePerspectiveSettingsLabels:t}=this._context.sharedResources,n=_(this._textRenderParameters);j.screenSizePerspective=t.overrideFontHeight(n.maxHeight),j.screenSizePerspectiveAlignment=e}x&&(j.shaderPolygonOffset=1e-4),j.hasSlicePlane=this._context.slicePlaneEnabled;const z=(e,t)=>{const n=JSON.stringify(t);let r=e.get(n);return null==r&&(r=new G(t),e.add(n,r)),r},R=f?z(f,j):new G(j),D=c.placement.translation,T=P?r(P.displayWidth,P.displayHeight):s,W=c.placement.centerOffset,H=L(R,U,D,null,T,W,[0,0],null),I=S(this._context,o,H,y,v);if(null==I)return null;const $=(t,n,r,s,i,o)=>{const l=g()||c.placement.elevationOffset,m=this.setGraphicElevationContext(e,n,l);return a(t,m,r,s,i,o)},k=new p(this,I.object,[H],null==f?[R]:null,O,$,y);k.alignedSampledElevation=I.sampledElevation,k.needsElevationUpdates=m(y.mode)||"absolute-height"===y.mode,k.getScreenSize=(e=i())=>(e[0]=P?P.displayWidth:c.displaySize[0],e[1]=P?P.displayHeight:c.displaySize[1],e);const F=new u(c.placement.elevationOffset,l);return k.metadata=F,E(k,o,this._context.elevationProvider),k}}function D(e,t,n){e&&e.forEach((e=>{const r=t(e);null!=r&&n(r,e.graphic)}))}function A(e,t){if("baseline"===t.verticalPlacement){const n=P[t.horizontalPlacement],s=null!=e?e.baselineAnchorY:0;return r(n,s)}const n=O(t.horizontalPlacement,t.verticalPlacement);return w[n]}const T={mode:"relative-to-ground",offset:0};export{R as Graphics3DTextSymbolLayer};
