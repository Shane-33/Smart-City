/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
import{_ as e}from"../../../../chunks/tslib.es6.js";import{someMap as t}from"../../../../core/MapUtils.js";import{destroyMaybe as i,removeMaybe as s}from"../../../../core/maybe.js";import{watch as r,initial as a}from"../../../../core/reactiveUtils.js";import"../../../../core/Logger.js";import"../../../../core/accessorSupport/ensureType.js";import"../../../../core/arrayUtils.js";import"../../../../core/has.js";import"../../../../core/Error.js";import{subclass as o}from"../../../../core/accessorSupport/decorators/subclass.js";import{t as n}from"../../../../chunks/boundedPlane.js";import{Deconflictor as c,DeconflictorViewState as h,DeconflictorGraphic as l}from"./Deconflictor.js";import{VisibilityGroup as p,VisibilityFlag as d}from"./enums.js";import{LabelDeconflictor as m}from"./LabelDeconflictor.js";import{TaskPriority as u}from"../../../support/Scheduler.js";let _=class extends c{constructor(){super(...arguments),this._contexts=new Map,this._viewState=new h,this.visibilityGroup=p.GRAPHIC,this._marginFactor=-.1}get labels(){return this._labels}get viewState(){return this._viewState}initialize(){this.addHandles([r((()=>this.view?.state?.camera),(()=>{this._updateViewState(),this.setDirty()})),r((()=>this.view?.map?.ground?.opacity),((e,t)=>{1!==e&&1!==t||this.setDirty()})),r((()=>this.view?.slicePlane),(()=>{this._updateSlicePlane(),this._slicePlaneChanged()}),a)]),this._frameTask=this.view.resourceController.scheduler.registerTask(u.GRAPHICS_DECONFLICTOR,this),this._labels=new m({view:this.view,parent:this})}destroy(){this._labels=i(this._labels),this._frameTask=s(this._frameTask)}get marginFactor(){return this._marginFactor}set marginFactor(e){this._marginFactor=e,this.setDirty()}setDirty(){this._contexts.size>0&&(super.setDirty(),this._labels.setDirty())}runTask(e){super.runTask(e),this.running||this._labels.setDirty()}setInitialIconVisibilityFlag(e,t){const i=!(this._graphicSupportsDeconfliction(t)&&g(e));t.setVisibilityFlag(p.GRAPHIC,d.DECONFLICTION,i)}_updateViewState(){this.view?.state&&(this._viewState.camera.copyFrom(this.view.state.camera),this._updateSlicePlane())}_updateSlicePlane(){const e=this.view?this.view.slicePlane:null;null!=e&&n(e,this._viewState.camera.viewMatrix,this._viewState.slicePlane),this._viewState.slicePlaneEnabled=null!=e}_slicePlaneChanged(){t(this._contexts,((e,t)=>t.symbolCreationContext.slicePlaneEnabled))&&this.setDirty()}addGraphicsOwner(e){const t=this._getGraphicsContext(e);return{addGraphic:i=>this._addGraphic(e,t,i),removeGraphic:e=>this._removeGraphic(t,e),labelingInfoChange:()=>this._labels.enabledChanged(e,t),featureReductionChange:()=>this.enabledChanged(e,t),slicePlaneEnabledChange:()=>this._slicePlaneEnabledChanged(e,t),clear:()=>t.forEach((e=>this._removeGraphic(t,e.graphics3DGraphic)))}}removeGraphicsOwner(e){const t=this._contexts.get(e);t&&(t.forEach((e=>this._removeGraphic(t,e.graphics3DGraphic))),this._contexts.delete(e),this.setDirty())}_addGraphic(e,t,i){const s=i.graphic.uid,r=new l(i,e.symbolCreationContext.slicePlaneEnabled);t.set(s,r),g(e)&&this.addToActiveGraphics(r),e.labelsEnabled&&this._labels.addToActiveGraphics(r)}_removeGraphic(e,t){const i=t.graphic.uid,s=e.get(i);s&&(this.removeFromActiveGraphics(s),this._labels.removeFromActiveGraphics(s),e.delete(i),this.setDirty())}enabledChanged(e,t){const i=g(e);i||b(e),this.modifyGraphics(t,i)}_slicePlaneEnabledChanged(e,t){const i=e.symbolCreationContext.slicePlaneEnabled;t.forEach((e=>e.slicePlaneEnabled=i)),this.setDirty()}getGraphicsLayers(e){return e.layers}_graphicSupportsDeconfliction(e){if(e.isDraped)return!1;const t=e.layers;if(!t?.length)return!1;for(const i of t)if(this.layerSupportsDeconfliction(i))return!0;return!1}_getGraphicsContext(e){const t=this._contexts.get(e);if(t)return t;const i=new Map;return this._contexts.set(e,i),this.setDirty(),i}};function g(e){const t=e.layer;return!(!t?.featureReduction||"selection"!==t.featureReduction.type)}function b(e){const t=e.graphics3DGraphics;t&&t.forEach((e=>e.setVisibilityFlag(p.GRAPHIC,d.DECONFLICTION,!0)))}_=e([o("esri.views.3d.layers.graphics.GraphicsDeconflictor")],_);export{_ as GraphicsDeconflictor};
