/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
import{_ as e}from"../../../../chunks/tslib.es6.js";import r from"../../../../core/Accessor.js";import{screenPointObjectToArray as t}from"../../../../core/screenUtils.js";import{property as s}from"../../../../core/accessorSupport/decorators/property.js";import"../../../../core/accessorSupport/ensureType.js";import"../../../../core/arrayUtils.js";import"../../../../core/has.js";import{subclass as o}from"../../../../core/accessorSupport/decorators/subclass.js";import{a as i,c as n,n as a,i as c,g as l}from"../../../../chunks/vec3.js";import{g as p,c as m}from"../../../../chunks/vec3f64.js";import{create as u,copy as d,fromPoints as f}from"../../../../geometry/support/ray.js";import{sv2d as h}from"../../../../geometry/support/vectorStacks.js";import{getObjectId as y}from"../../../../layers/graphics/dehydratedFeatures.js";import{LineOfSightIntersectionResult as g}from"./LineOfSightIntersectionResult.js";import{isI3sIntersectorResult as I}from"../../layers/i3s/Intersector.js";import{fromScreen as j}from"../../support/geometryUtils/ray.js";import{isTerrainIntersectorResult as v}from"../../terrain/Intersector.js";import{newIntersector as w}from"../../webgl-engine/lib/Intersector.js";import{StoreResults as b,IntersectorType as P}from"../../webgl-engine/lib/IntersectorInterfaces.js";import{toGraphic as R}from"../../webgl-engine/lib/intersectorUtilsConversions.js";let S=class extends r{constructor(e){super(e),this._terrainIntersectionOptionsLayerUids=new Set(["terrain"])}initialize(){this.intersector=w(this.view.state.viewingMode),this.intersector.options.hud=!1,this.intersector.options.store=b.MIN}getScreenPointIntersection(e){const r=t(e,h.get()),s=j(this.view.state.camera,r,L);return this._getRayIntersection(s)}_getRayIntersection(e,r){if(null==e||null==this.view.sceneIntersectionHelper)return null;const{intersector:t}=this;t.options.store=b.MIN,this.view.sceneIntersectionHelper.intersectToolIntersectorRay(e,t,r);const s=t.results.min,o=m();if(!s.getIntersectionPoint(o))return null;if(null!=r?.maxDistance&&i(o,e.origin)>r.maxDistance**2)return null;const n=this.view.renderCoordsHelper.fromRenderCoords(o,this.view.spatialReference),a=p(s.normal);if(I(s))return new g({type:P.OBJECT,id:`${s.target.layerUid}/${s.target.nodeIndex}/${s.target.componentIndex}`,mapPoint:n,renderPoint:o,normal:a,ray:d(e),graphic:null});if(v(s))return new g({type:P.TERRAIN,id:s.target.lij.slice(),mapPoint:n,renderPoint:o,normal:a,ray:d(e),graphic:null});const c=R(s,this.view);if(null!=c){const r=c.layer,t=c.sourceLayer;let s;if(t)if("scene"===t.type)s=y(c,t.objectIdField);else s=c.uid;else s=c.uid;return new g({type:P.OBJECT,id:`${r?.uid}/${s}`,mapPoint:n,renderPoint:o,normal:a,ray:d(e),graphic:c})}return null}updateFromGroundIntersection(e,r,t){const s=x,o=U,i=O,m=C;n(o,e),this.view.renderCoordsHelper.worldUpAtPosition(o,i),a(i,i);const u=this.view.basemapTerrain.visibleElevationBounds,d=(r>=0?1:-1)*((u?Math.abs(u.max-u.min):100)+Math.abs(r));c(m,i,d),l(s,o,m),f(s,o,L);const h=this._getRayIntersection(L,{include:this._terrainIntersectionOptionsLayerUids,maxDistance:d});if(null!=h){const e=C;return c(e,i,r),l(t,h.renderPoint,e),p(h.normal)}return n(t,e),null}};e([s()],S.prototype,"view",void 0),e([s()],S.prototype,"intersector",void 0),S=e([o("esri.views.3d.analysis.LineOfSight.LineOfSightRayIntersector")],S);const x=m(),U=m(),O=m(),C=m(),L=u();export{S as LineOfSightRayIntersector};
