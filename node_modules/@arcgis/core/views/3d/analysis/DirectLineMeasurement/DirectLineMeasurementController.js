/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
import{_ as e}from"../../../../chunks/tslib.es6.js";import t from"../../../../core/Accessor.js";import i from"../../../../core/Logger.js";import{createQuantity as o}from"../../../../core/quantityUtils.js";import{watch as r,syncAndInitial as s}from"../../../../core/reactiveUtils.js";import{property as n}from"../../../../core/accessorSupport/decorators/property.js";import"../../../../core/accessorSupport/ensureType.js";import"../../../../core/arrayUtils.js";import"../../../../core/has.js";import{subclass as a}from"../../../../core/accessorSupport/decorators/subclass.js";import{o as c}from"../../../../chunks/vec3.js";import{c as l}from"../../../../chunks/vec3f64.js";import{geodesicLength as p}from"../../../../geometry/geometryEngine.js";import m from"../../../../geometry/Polyline.js";import{canProjectWithoutEngine as u}from"../../../../geometry/projection.js";import{getSphericalPCPF as d,SphericalECEFSpatialReference as h,WGS84ECEFSpatialReference as v}from"../../../../geometry/spatialReferenceEllipsoidUtils.js";import{projectPointToVector as f}from"../../../../geometry/projection/projectPointToVector.js";import{projectPointToWGS84ComparableLonLat as j}from"../../../../geometry/projection/projectPointToWGS84ComparableLonLat.js";import{isSupported as g,geodesicLengths as P,InverseGeodeticSolverResult as y,inverseGeodeticSolver as D}from"../../../../geometry/support/geodesicUtils.js";import{MeasurementMode as _}from"../interfaces.js";import{applyProjectionAndElevationAlignment as w,logFailedGeometryProjectionError as z}from"../support/projectionUtils.js";import{UnitNormalizer as A}from"../support/UnitNormalizer.js";const R="esri.views.3d.analysis.DirectLineMeasurement.DirectLineMeasurementController",E=i.getLogger(R),S=1e5;let b=class extends t{constructor(e){super(e),this._unitNormalizer=new A,this._tempStartPosition=l(),this._tempEndPosition=l(),this._tempCornerPosition=l()}initialize(){const e=this.view.spatialReference,t=d(e),i=t===h?v:t;this._sphericalPCPF=i;const o=u(e,i);this._unitNormalizer.spatialReference=o?i:e,this.addHandles([r((()=>({viewData:this.viewData,startPoint:this.analysis.startPoint})),(({viewData:e,startPoint:t})=>{e.elevationAlignedStartPoint=this._applyProjectionAndElevationAlignment(t)}),s),r((()=>({viewData:this.viewData,endPoint:this.analysis.endPoint})),(({viewData:e,endPoint:t})=>{e.elevationAlignedEndPoint=this._applyProjectionAndElevationAlignment(t)}),s),r((()=>({result:this._computedResult,viewData:this.viewData})),(({result:e,viewData:t})=>{t.result=e}),s)])}_applyProjectionAndElevationAlignment(e){if(null==e)return e;const{spatialReference:t,elevationProvider:i}=this.view,o=w(e,t,i);return o??(z(this.analysis,e.spatialReference,E),null)}get _computedResult(){const{elevationAlignedStartPoint:e,elevationAlignedEndPoint:t,measurementMode:i}=this.viewData;if(null==e||null==t)return null;const o=this._euclideanDistances(e,t),r=this._geodesicDistance(e,t,o.horizontal.value),s=i===_.Geodesic||i===_.Auto&&o.horizontal.value>S?"geodesic":"euclidean";return{mode:s,distance:"euclidean"===s?o.direct:r,directDistance:o.direct,horizontalDistance:o.horizontal,verticalDistance:o.vertical,geodesicDistance:r}}_euclideanDistances(e,t){const i=e.clone();i.z=t.z;const r=this._tempStartPosition,s=this._tempEndPosition,n=this._tempCornerPosition,a=this.view.spatialReference,l=this._sphericalPCPF,p=u(a,l)?l:a;f(e,r,p),f(t,s,p),f(i,n,p);const m=c(r,s),d=c(n,s),h=Math.abs(t.z-e.z),v=e=>this._unitNormalizer.normalizeDistance(e),j=v(m),g=v(d),P=v(h);return{direct:o(j,"meters"),horizontal:o(g,"meters"),vertical:o(P,"meters")}}_geodesicDistance(e,t,i){const r=e.spatialReference,s=new m({spatialReference:r});s.addPath([e,t]);const n=r.isGeographic&&g(r)?P([s],"meters")[0]:r.isWebMercator?p(s,"meters"):null,a=null!=n?n:this._fallbackGeodesicDistance(e,t,i);return o(a,"meters")}_fallbackGeodesicDistance(e,t,i){if(j(e,U)&&j(t,C)){const e=new y;return D(e,U,C),e.distance}return i}};e([n()],b.prototype,"view",void 0),e([n()],b.prototype,"analysis",void 0),e([n()],b.prototype,"viewData",void 0),e([n()],b.prototype,"_computedResult",null),b=e([a(R)],b);const U=l(),C=l();export{b as DirectLineMeasurementController};
