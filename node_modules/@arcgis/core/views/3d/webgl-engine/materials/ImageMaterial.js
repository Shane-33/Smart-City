/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
import{BufferViewFloat as t}from"../../../../geometry/support/buffer/BufferView.js";import{ShaderOutput as e}from"../core/shaderLibrary/ShaderOutput.js";import{CullFaceOptions as r}from"../lib/basicInterfaces.js";import{GLTextureMaterial as s}from"../lib/GLTextureMaterial.js";import{MaterialParameters as i}from"../lib/Material.js";import{OITPolygonOffsetLimit as a}from"../lib/OrderIndependentTransparency.js";import{RenderSlot as n}from"../lib/RenderSlot.js";import{assert as o}from"../lib/Util.js";import{VertexAttribute as u}from"../lib/VertexAttribute.js";import{DefaultBufferWriter as l}from"./DefaultBufferWriter.js";import{PositionUVLayout as p}from"./DefaultLayouts.js";import{TriangleMaterial as c}from"./TriangleMaterial.js";import{writeBufferFloat as h,writeDefaultAttribute as m}from"./internal/bufferWriterUtils.js";import{vertexAttributeLocations as f,ImageMaterialTechniqueConfiguration as d,ImageMaterialTechnique as _}from"../shaders/ImageMaterialTechnique.js";class g extends c{constructor(t){super(t,new T),this.supportsEdges=!0,this._vertexAttributeLocations=f,this._configuration=new d}getConfiguration(t,e){return this._configuration.output=t,this._configuration.cullFace=this.parameters.cullFace,this._configuration.hasSlicePlane=this.parameters.hasSlicePlane,this._configuration.transparent=this.parameters.transparent,this._configuration.writeDepth=this.parameters.writeDepth,this._configuration.hasOccludees=this.parameters.hasOccludees,this._configuration.transparencyPassType=e.transparencyPassType,this._configuration.enableOffset=e.camera.relativeElevation<a,this._configuration.multipassEnabled=e.multipassEnabled,this._configuration.cullAboveGround=e.multipassTerrain.cullAboveGround,this._configuration.perspectiveInterpolation=this.parameters.perspectiveInterpolation,this._configuration}produces(t,r){if(r===e.Color||r===e.Alpha||r===e.Highlight){if(t===n.DRAPED_MATERIAL)return!0;if(r===e.Highlight)return t===n.OPAQUE_MATERIAL;return t===(this.parameters.transparent?this.parameters.writeDepth?n.TRANSPARENT_MATERIAL:n.TRANSPARENT_DEPTH_WRITE_DISABLED_MATERIAL:n.OPAQUE_MATERIAL)}return!1}createGLMaterial(t){return new E(t)}createBufferWriter(){const t=p.clone();return this.parameters.perspectiveInterpolation&&t.f32(u.PERSPECTIVEDIVIDE),new A(t)}}class E extends s{constructor(t){super({...t,...t.material.parameters})}_updateParameters(t){return this.updateTexture(this._material.parameters.textureId),this._material.setParameters(this.textureBindParameters),this.ensureTechnique(_,t)}_updateOccludeeState(t){t.hasOccludees!==this._material.parameters.hasOccludees&&(this._material.setParameters({hasOccludees:t.hasOccludees}),this._updateParameters(t))}beginSlot(t){return this._output!==e.Color&&this._output!==e.Alpha||this._updateOccludeeState(t),this._updateParameters(t)}}class A extends l{write(e,r,s,i,a){for(const n of this.vertexBufferLayout.fields.keys()){const l=s.attributes.get(n);if(l)if(n===u.PERSPECTIVEDIVIDE){o(1===l.size);const e=i.getField(n,t);e&&h(l,e,a)}else m(n,l,e,r,i,a)}}}class T extends i{constructor(){super(...arguments),this.transparent=!1,this.writeDepth=!0,this.hasSlicePlane=!1,this.cullFace=r.None,this.hasOccludees=!1,this.opacity=1,this.textureId=null,this.initTextureTransparent=!0,this.perspectiveInterpolation=!1}}export{g as ImageMaterial,T as Parameters};
