/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
import{s as t,k as e}from"../../../../chunks/vec2.js";import{a as r}from"../../../../chunks/vec2f64.js";import{newLayout as s}from"../../support/buffer/InterleavedLayout.js";import{ShaderOutput as i}from"../core/shaderLibrary/ShaderOutput.js";import a from"../lib/GLMaterial.js";import{Material as o}from"../lib/Material.js";import{RenderSlot as n}from"../lib/RenderSlot.js";import{VertexAttribute as u}from"../lib/VertexAttribute.js";import{writePosition as l,writeBufferFloat as c}from"./internal/bufferWriterUtils.js";import{HeatmapDensityPassParameters as f,HeatmapDensityTechniqueConfiguration as m,HeatmapDensityTechnique as p}from"../shaders/HeatmapDensityTechnique.js";const h=2;class T extends f{constructor(){super(...arguments),this.isAttributeDriven=!1,this.usesHalfFloats=!1}}class b extends o{constructor(t){super(t,new T),this._configuration=new m}produces(t,e){return t===n.DRAPED_MATERIAL&&e===i.Color}getConfiguration(){return this._configuration.isAttributeDriven=this.parameters.isAttributeDriven,this._configuration.usesHalfFloat=this.parameters.usesHalfFloats,this._configuration}createGLMaterial(t){return new d(t)}intersect(){}intersectDraped(r,s,i,a,o,n){const l=r.attributes.get(u.POSITION),{parameters:c}=this,{searchRadius:f}=c,{screenToWorldRatio:m}=r,p=f*m+h*m,T=p*p,b=l.data.length/l.size;for(let u=0;u<b;u++){const r=u*l.size,s=t(E,l.data[r],l.data[r+1]);e(s,a)<T&&o(n.dist,n.normal,-1,!1)}}createBufferWriter(){return new g(this.parameters.isAttributeDriven?I:A)}}class d extends a{beginSlot(t){return this.ensureTechnique(p,t)}}class g{constructor(t){this.vertexBufferLayout=t}elementCount(t){return t.attributes.get(u.POSITION).indices.length*v}write(t,e,r,s,i){l(r.attributes.get(u.POSITION),t,s.position,i,v);const a=r.attributes.get(u.POSITION).indices.length,o=s.uv0;let n=i;for(let u=0;u<a;++u)o.setValues(n++,-1,-1),o.setValues(n++,1,-1),o.setValues(n++,1,1),o.setValues(n++,1,1),o.setValues(n++,-1,1),o.setValues(n++,-1,-1);const f=u.FEATUREATTRIBUTE in s?s.featureAttribute:null;f&&c(r.attributes.get(u.FEATUREATTRIBUTE),f,i,v)}}const A=s().vec3f(u.POSITION).vec2f(u.UV0),I=A.clone().f32(u.FEATUREATTRIBUTE),v=6,E=r();export{b as HeatmapDensityMaterial,T as HeatmapDensityMaterialParameters};
