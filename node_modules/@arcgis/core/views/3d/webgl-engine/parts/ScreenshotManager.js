/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
import{createResolver as e}from"../../../../core/promiseUtils.js";import{d as t}from"../../../../chunks/vec4f64.js";import{ColorFormat as r,DepthFormat as s}from"../core/FBOCache.js";import{RenderRequestType as i,Decorations as o}from"../lib/basicInterfaces.js";import{RenderState as a}from"../../../support/RenderState.js";import{resampleHermite as n}from"../../../support/screenshotUtils.js";import{PixelFormat as h,DataType as c}from"../../../webgl/enums.js";import{ensureAttachmentMaxSize as l}from"../../../webgl/FramebufferObject.js";import{createEmptyImageData as d}from"../../../../core/imageUtils.js";class f{constructor(e,t,r){this.parameters=e,this.frameHasDecorations=t,this.fbos=r}}class u{constructor(e,t,r){this._rctx=e,this._renderFunctions=t,this._forceCameraHook=r,this.supersample=!0,this._screenshotQueue=new Array}destroy(){this._rctx=null}async takeScreenshot(t){await this._renderFunctions.prepareOverlay(),this._renderFunctions.requestRenderScene(i.BACKGROUND);const r=e();return this._screenshotQueue.push({settings:t,resolver:r}),r.promise}update(e,t){for(const r of this._screenshotQueue){if(null==this._rctx){r.resolver.reject();continue}const s={...r.settings,pixelRatio:r.settings.pixelRatio*e.parameters.camera.pixelRatio},i=this._renderScreenshot(e,s,t);r.resolver(i)}this._screenshotQueue.length=0}_renderScreenshotOverlay(e,t,r){e.width=t.width,e.height=t.height;const s=e.getContext("2d"),i=r.pixelRatio;return s.save(),s.translate(0,t.height),s.scale(1,-1),r.region&&s.translate(-r.region.x,-r.region.y),s.scale(i,i),t=this._renderFunctions.renderOverlay(e,r.disableDecorations?o.OFF:o.ON,t),s.restore(),t}_readbackScreenshot(e,t){return e.resample?this._readbackScreenshotResampled({...e,resample:e.resample},t):this._readbackScreenshotImmediate(e,t)}_readbackScreenshotResampled(e,t){const{framebufferWidth:r,framebufferHeight:s,region:i,resample:o}=e,a=this._ensureScreenshotEncodeCanvas();let l=d(r,s,a);this._rctx.gl.readPixels(0,0,r,s,h.RGBA,c.UNSIGNED_BYTE,new Uint8Array(l.data.buffer)),t(),l=this._renderScreenshotOverlay(a,l,{...e,region:void 0});const f=d(i.width,i.height,a);return n(l,f,!0,o.region.x,s-(o.region.y+o.region.height),o.region.width,o.region.height)}_readbackScreenshotImmediate(e,t){const{framebufferHeight:r,region:s}=e,i=this._ensureScreenshotEncodeCanvas(),o=d(s.width,s.height,i);return this._rctx.gl.readPixels(s.x,r-(s.y+s.height),s.width,s.height,h.RGBA,c.UNSIGNED_BYTE,new Uint8Array(o.data.buffer)),t(),this._renderScreenshotOverlay(i,o,e)}_renderScreenshot(e,i,n){const h=e.parameters.camera,c={width:i.framebufferWidth,height:i.framebufferHeight};l(c,Math.min(this._rctx.parameters.maxTextureSize,this._rctx.parameters.maxRenderbufferSize));let d=!1;const f=i.disableDecorations&&e.frameHasDecorations,u=c.width!==h.fullWidth||c.height!==h.fullHeight,m=i.ignorePadding&&h.pixelRatio!==i.pixelRatio,p=u||f||m||i.objectAndLayerIdColor;let g=null;i.objectAndLayerIdColor&&(g=e.fbos.acquire(r.RGBA,c.width,c.height),g.acquireDepth(s.DEPTH_STENCIL_BUFFER));let _=null;if(p){const s=h.clone();if(i.ignorePadding){const e=t(s.padding);for(let t=0;t<4;t++)e[t]=Math.round(e[t]/s.pixelRatio*i.pixelRatio);s.padding=e}s.fullWidth=c.width,s.fullHeight=c.height,s.pixelRatio=i.pixelRatio;const l=h.fovX-s.fovX,f=h.fovY-s.fovY;l<0&&l<f?s.fovX=h.fovX:f<0&&f<l&&(s.fovY=h.fovY);const u={camera:s,contentCamera:s,mode:a.IDLE,alignPixelEnabled:!0,contentPixelRatio:s.pixelRatio};this._forceCameraHook(u),d=!0,_=e.fbos.acquire(r.RGBA,c.width,c.height);const m=i.disableDecorations?o.OFF:o.ON;this._renderFunctions.renderScene(_,g,u,m,n)}const b=()=>{this._rctx.bindFramebuffer(null),_?.release()};this._rctx.bindFramebuffer(_?.fbo);const x=this._readbackScreenshot(i,b);let v=null;if(i.objectAndLayerIdColor){const e=()=>{this._rctx.bindFramebuffer(null),g?.release()};this._rctx.bindFramebuffer(g?.fbo),v=this._readbackScreenshot(i,e),this._rctx.bindFramebuffer(null)}if(p&&!this._rctx.contextAttributes.alpha)for(let t=3;t<x.data.length;t+=4)x.data[t]=255;if(v&&!this._rctx.contextAttributes.alpha)for(let t=3;t<v.data.length;t+=4)v.data[t]=255;return d&&this._forceCameraHook(e.parameters),[x,v]}_ensureScreenshotEncodeCanvas(){return this._screenshotEncodeCanvas||(this._screenshotEncodeCanvas=document.createElement("canvas")),this._screenshotEncodeCanvas}}export{f as ScreenshotContext,u as ScreenshotManager};
