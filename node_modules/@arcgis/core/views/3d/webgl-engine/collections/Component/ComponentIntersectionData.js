/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
import{clamp as t}from"../../../../../core/mathUtils.js";import{c as e,f as i}from"../../../../../chunks/vec3f64.js";import{fromValues as n}from"../../../../../geometry/support/aaBoundingBox.js";import{computeNormal as s}from"../../materials/internal/MaterialUtil.js";const r=200,o=40,a=.8,c=10,h=1e-6;function f(t,e,i){const n=e,s=i;let r=0,o=1/0;for(let a=0;a<3;++a){{const e=t[a];if(n[a]<e){if(s[a]<=h)return!1;const t=(e-n[a])/s[a];r=Math.max(r,t)}else if(s[a]<=-h){const t=(e-n[a])/s[a];o=Math.min(o,t)}if(r>o)return!1}{const e=t[a+3];if(n[a]>e){if(s[a]>=-h)return!1;const t=(e-n[a])/s[a];r=Math.max(r,t)}else if(s[a]>=h){const t=(e-n[a])/s[a];o=Math.min(o,t)}if(r>o)return!1}}return!0}class l{constructor(t,e,i,n,s){this.aabb=t,this.axis=e,this.d=i,this.midStartIndex=n,this.rightStartIndex=s}}class d{constructor(i,n,s,r){this.globalTriangleVertexIndices=i,this.firstTriangleIndex=n,this.positions=r,this._rayDirection=e(),this.bspNodeTree=new Array;const h=s-n,f=h<=I?new Uint16Array(h):new Uint32Array(h);this.indices=f;for(let t=0;t<h;++t)f[t]=t;{const e=p(i,n,s,r.data,r.stride),d=t(Math.log2(h/o),2,c),u=(t,i,n)=>{const s=y(f,e,t,i),r=i-t;if(r<=o){const e=new l(s,void 0,0,t,i);return this.bspNodeTree.push(e),e}const{axis:c,midValue:h}=N(s),m=x(f,e,t,i,c,h),g=(t,e)=>{if(n>d)return;const i=e-t;return i<o||i>=a*r?void 0:u(t,e,n+1)},p=new l(s,c,h,m.next,m.mid);return this.bspNodeTree.push(p),p.leftNode=g(t,m.next),p.rightNode=g(m.mid,i),p};u(0,h,0),this.triangleVertexIndices=b(f,i,n,s)}}intersectRayTriangleRange(t,e){{if(t>=e)return;const i=this.triangleVertexIndices,n=this.positions.data,r=this.positions.stride,o=this._rayOrigin,a=o[0],c=o[1],h=o[2],f=this._rayDirection,l=f[0],d=f[1],m=f[2];for(let g=t,x=3*t;g<e;++g){let t=i[x++]*r;const e=n[t++],o=n[t++],f=n[t];t=i[x++]*r;const y=n[t++],N=n[t++],p=n[t];t=i[x++]*r;const b=y-e,I=N-o,T=p-f,M=n[t++]-e,R=n[t++]-o,S=n[t]-f,_=d*S-R*m,w=m*M-S*l,V=l*R-M*d,U=b*_+I*w+T*V;if(Math.abs(U)<=Number.EPSILON)continue;const A=a-e,B=c-o,v=h-f,P=A*_+B*w+v*V;if(U>0){if(P<0||P>U)continue}else if(P>0||P<U)continue;const j=B*T-I*v,D=v*b-T*A,F=A*I-b*B,O=l*j+d*D+m*F;if(U>0){if(O<0||P+O>U)continue}else if(O>0||P+O<U)continue;const k=(M*j+R*D+S*F)/U;if(k>=0){const t=this.indices[g]+this.firstTriangleIndex,e=s(b,I,T,M,R,S,u);this._callback(k,e,t,!1)}}}d.numFacesTested+=e-t}intersectRay(t,e){d.numFacesTested=0;const n=i(t.r0[0],t.r0[1],t.r0[2]),s=i(t.r1[0],t.r1[1],t.r1[2]),r=s[0]-n[0],o=s[1]-n[1],a=s[2]-n[2];if(r*r+o*o+a*a<h)return;this._rayOrigin=n;const c=this._rayDirection;c[0]=r,c[1]=o,c[2]=a;const f=this.triangleVertexIndices.length/3;this._callback=e;const l=this.bspNodeTree[0];this.intersectRayBSP(l,0,f)}intersectRayBSP(t,e,i){const n=this._rayOrigin,s=this._rayDirection;if(!f(t.aabb,n,s))return;const r=t.axis,o=t.d;if(n[r]<o||s[r]<0){const i=e,n=t.midStartIndex;if(i<n){const e=t.leftNode;void 0!==e?this.intersectRayBSP(e,i,n):this.intersectRayTriangleRange(i,n)}}if(this.intersectRayTriangleRange(t.midStartIndex,t.rightStartIndex),n[r]>o||s[r]>0){const e=t.rightStartIndex,n=i;if(e<n){const i=t.rightNode;void 0!==i?this.intersectRayBSP(i,e,n):this.intersectRayTriangleRange(e,n)}}}get estimatedMemoryUsage(){return this.triangleVertexIndices.byteLength+this.indices.byteLength}}d.numFacesTested=0;const u=e(),m=[1/0,1/0,1/0],g=[-1/0,-1/0,-1/0];function x(t,e,i,n,s,r){let o=i,a=n;for(;o<a;){const i=t[o];e[6*i+s+3]<=r?++o:(--a,t[o]=t[a],t[a]=i)}let c=o;for(a=n;c<a;){const i=t[a-1];e[6*i+s]>=r?--a:(t[a-1]=t[c],t[c]=i,++c)}return{next:o,mid:c}}function y(t,e,i,s){if(s<=i)return n(NaN,NaN,NaN,NaN,NaN,NaN);{const n=6*t[i];for(let t=0;t<3;++t)m[t]=e[n+0+t],g[t]=e[n+3+t]}for(let n=i+1;n<s;++n){const i=6*t[n];for(let t=0;t<3;++t)m[t]=Math.min(m[t],e[i+0+t]),g[t]=Math.max(g[t],e[i+3+t])}return n(m[0],m[1],m[2],g[0],g[1],g[2])}function N(t){const e=t[3]-t[0],i=t[4]-t[1],n=t[5]-t[2],s=e>i?e>n?0:i>n?1:2:i>n?1:n>e?2:0;return{axis:s,midValue:(t[s]+t[s+3])/2}}function p(t,e,i,n,s){const r=i-e,o=new Float32Array(6*r);for(let a=0;a<r;++a){const i=3*(a+e),r=t[i]*s,c=t[i+1]*s,h=t[i+2]*s;for(let t=0;t<3;++t){const e=n[r+t],i=n[c+t],s=n[h+t];o[6*a+t]=Math.min(e,i,s),o[6*a+3+t]=Math.max(e,i,s)}}return o}function b(t,e,i,n){const s=n-i;let r=0;for(let a=i;a<n;++a)for(let t=0;t<3;++t)r=Math.max(e[3*a+t],r);const o=r<=I?new Uint16Array(3*s):new Uint32Array(3*s);for(let a=0;a<s;++a){const n=3*(t[a]+i);for(let t=0;t<3;++t){const i=e[n+t];o[3*a+t]=i}}return o}const I=65535;export{d as ComponentIntersectionData,r as componentMinimalSizeForIntersectionData};
