/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
import{t}from"../../../../../chunks/vec3.js";import{c as n}from"../../../../../chunks/vec3f64.js";import{create as o}from"../../../../../geometry/support/aaBoundingBox.js";import{newFloatArray as s}from"../../../../../geometry/support/FloatArray.js";import{compactIndices as i,getContinuousIndexArray as e}from"../../../../../geometry/support/Indices.js";import{componentMinimalSizeForIntersectionData as r,ComponentIntersectionData as p}from"./ComponentIntersectionData.js";import{Vertices as c}from"../../lib/Attribute.js";import{getVisibility as m}from"../../lib/ComponentUtils.js";import{computeInvDir as a,intersectAabbInvDir as h,intersectTriangles as l}from"../../materials/internal/MaterialUtil.js";class _{constructor(t,n){this._components=n,this._indices=t.indices?i(t.indices):e(t.positions.length/3),this._positions=t.positions,this._componentIntersectionData=new Array(n.count)}destroy(){this._positions=null,this._indices=null,this._componentIntersectionData.length=0,this._perComponentAabbs=null}getComponentAabb(t,n){this._perComponentAabbs||(this._perComponentAabbs=this._computePerComponentAabbs());for(let o=0;o<6;o++)n[o]=this._perComponentAabbs[6*t+o];return n}getComponentPositions(t,n){n.indices=this._indices,n.data=this._positions,n.stride=3,n.startIndex=this._components.offsets[t],n.endIndex=this._components.offsets[t+1]}intersect(n,o,s,i,e,_,b){const d=new c(this._positions,3),A=this._indices,C=this._components.offsets,g=a(n,o,f),y=n[2],j=o[2];this._components.visibility.forEachComponent((c=>{if(!m(this._components.pickability,c))return!0;const a=this.getComponentAabb(c,u);if(null!=_){const t=_[c];null!=e?e.componentOffset=t:(n[2]=y-t,o[2]=j-t)}if(null!=e&&e.applyToAabb(a),!h(a,n,g,s))return!0;const f=C[c]/3,I=C[c+1]/3,x=(n,o,s)=>b(c,n,t(o,o,i),s);return null==e&&I-f>r?(null==this._componentIntersectionData[c]&&(this._componentIntersectionData[c]=new p(this._indices,f,I,d)),this._componentIntersectionData[c].intersectRay({r0:n,r1:o},x)):l(n,o,f,I,A,d,void 0,e,x),!0}))}_computePerComponentAabbs(){const t=this._components.count,n=s(6*t),o=this._indices,i=this._positions,e=this._components.offsets;let r=0;for(let s=0;s<t;s++){const t=e[s],p=e[s+1];let c=1/0,m=1/0,a=1/0,h=-1/0,l=-1/0,_=-1/0;for(let n=t;n<p;n++){const t=3*o[n],s=i[t],e=i[t+1],r=i[t+2];c=Math.min(c,s),m=Math.min(m,e),a=Math.min(a,r),h=Math.max(h,s),l=Math.max(l,e),_=Math.max(_,r)}n[r++]=c,n[r++]=m,n[r++]=a,n[r++]=h,n[r++]=l,n[r++]=_}return n}get positions(){return this._positions}get indices(){return this._indices}}const f=n(),u=o();export{_ as default};
