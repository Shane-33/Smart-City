/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
import{_ as t}from"../../../../../chunks/tslib.es6.js";import{clamp as i}from"../../../../../core/mathUtils.js";import{createScreenPointArray as s}from"../../../../../core/screenUtils.js";import"../../../../../core/Logger.js";import"../../../../../core/accessorSupport/ensureType.js";import"../../../../../core/arrayUtils.js";import"../../../../../core/has.js";import"../../../../../core/Error.js";import{subclass as r}from"../../../../../core/accessorSupport/decorators/subclass.js";import{j as e,d as a}from"../../../../../chunks/vec2.js";import{a as n}from"../../../../../chunks/vec2f64.js";import{f as o,l as m,n as c,j as h,i as p,g as _,E as l,c as u,p as C}from"../../../../../chunks/vec3.js";import{c as P,f}from"../../../../../chunks/vec3f64.js";import{create as j,fromPositionAndNormal as D}from"../../../../../geometry/support/plane.js";import{pixelDistanceToInteractionFactor as y,applyAll as g}from"../../../camera/constraintUtils.js";import{ConstraintTypes as d}from"../../../camera/constraintUtils/ConstraintTypes.js";import{InteractionType as v}from"../../../camera/constraintUtils/InteractionType.js";import{TiltMode as M}from"../../../camera/constraintUtils/TiltMode.js";import{getVoxelWasm as w}from"../../../layers/VoxelWasm.js";import{InteractiveController as O}from"../InteractiveController.js";import{normalizeCoordinate as U,contentIntersectorOptions as N,distanceClampValues as b,pivotDistanceModifier as R,screenPixelArea as k,intersectPlaneFromScreenPoint as A}from"../../utils/navigationUtils.js";let T=class extends O{constructor(){super(...arguments),this._tmpP=P(),this._tmpDir=P(),this._tmpN=P(),this._tmpP0=n(),this._tmpPoi=P(),this._tmpRayDir=P(),this.dragBeginPoint=s(),this._normalizedAnchorPoint=n(),this._constraintOptions={selection:d.ALL,interactionType:v.ZOOM,interactionFactor:0,interactionStartCamera:null,interactionDirection:P(),tiltMode:M.TUMBLE},this._plane=j()}get _intersectionHelper(){return this.view.sceneIntersectionHelper}begin(t){if(!this.active)return;e(this.dragBeginPoint,t),U(this.startCamera,t,this._normalizedAnchorPoint);const s=this._intersectionHelper.intersectScreenFreePointFallback(t,this._tmpP,0===this.view.map.ground.opacity?N:{});o(this._tmpDir,this._tmpP,this.startCamera.eye);const r=m(this._tmpDir);c(this._tmpDir,this._tmpDir);const a=Math.abs(this.view.camera.position.z);let n=i(Math.min(R,1/Math.abs(h(B,this._tmpDir)))*a,b[0],b[1]);const u=this.view._stage.renderView.getMinimalDepthForArea(w(this.view),t[0],t[1],this.view.state.camera,k);n=null!=u?u:n,n=s?Math.min(n,r):n,p(this._tmpDir,this._tmpDir,n),_(this._tmpP,this.startCamera.eye,this._tmpDir),o(this._tmpN,this.startCamera.eye,this.startCamera.center),c(this._tmpN,this._tmpN),this._tmpN[1]<0&&l(this._tmpN,this._tmpN),D(this._tmpP,this._tmpN,this._plane),this._constraintOptions.interactionStartCamera=this.startCamera}update(t){if(!this.active)return;A(this._plane,this.currentCamera,this.dragBeginPoint,this._tmpPoi)||u(this._tmpPoi,this.currentCamera.center),U(this.currentCamera,t,this._tmpP0);let i=4*(this._tmpP0[1]-this._normalizedAnchorPoint[1]);e(this._normalizedAnchorPoint,this._tmpP0),o(this._tmpRayDir,this._tmpPoi,this.currentCamera.eye);const s=m(this._tmpRayDir);let r=s*(1-i);this._constraintOptions.interactionDirection&&(u(this._constraintOptions.interactionDirection,this._tmpRayDir),p(this._constraintOptions.interactionDirection,this._constraintOptions.interactionDirection,Math.sign(i)/s));const n=this.view.state.constraints.minimumPoiDistance;i>=0&&r<n&&(r=n,i=-(r-s)/s),Math.abs(s-r)<1e-6||(p(this._tmpRayDir,this._tmpRayDir,i),this.currentCamera.eye=_(z,this.currentCamera.eye,this._tmpRayDir),C(z,this.currentCamera.center,this._tmpPoi,i),this._tmpPoi[2]>this.startCamera.center[2]?z[2]=Math.max(this.startCamera.center[2],z[2]):z[2]=Math.min(this.startCamera.center[2],z[2]),this.currentCamera.center=z,this._constraintOptions.interactionFactor=y(a(this.dragBeginPoint,t)),g(this.view,this.currentCamera,this._constraintOptions),this.commitCamera())}end(){this.active&&this.finishController()}};T=t([r("esri.views.3d.state.controllers.local.ZoomController")],T);const z=P(),B=f(0,0,1);export{T as ZoomController};
