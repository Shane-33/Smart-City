/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
import{_ as t}from"../../../../../chunks/tslib.es6.js";import{clamp as i}from"../../../../../core/mathUtils.js";import{Milliseconds as e}from"../../../../../core/time.js";import"../../../../../core/Logger.js";import"../../../../../core/accessorSupport/ensureType.js";import"../../../../../core/arrayUtils.js";import"../../../../../core/has.js";import"../../../../../core/Error.js";import{subclass as r}from"../../../../../core/accessorSupport/decorators/subclass.js";import{c as s,n as o,i as a,j as n,l as m,f as c,g as h,a as p}from"../../../../../chunks/vec3.js";import{c as _}from"../../../../../chunks/vec3f64.js";import{getReferenceEllipsoid as l}from"../../../../../geometry/ellipsoidUtils.js";import{c as y}from"../../../../../chunks/sphere.js";import{applyAll as f}from"../../../camera/constraintUtils.js";import{ConstraintTypes as g}from"../../../camera/constraintUtils/ConstraintTypes.js";import{InteractionType as j}from"../../../camera/constraintUtils/InteractionType.js";import{applySurfaceCollisionConstraint as u}from"../../../camera/constraintUtils/surfaceCollision.js";import{TiltMode as w}from"../../../camera/constraintUtils/TiltMode.js";import{PointToPointAnimationController as d}from"../PointToPointAnimationController.js";import{contentIntersectorOptions as C,decideNavigationMode as D,zoomMaxDistanceModifier as v,zoomMinDistanceModifier as R,zoomDistanceModifier as M,NavigationMode as b,panToPosition as L}from"../../utils/navigationUtils.js";import{fromScreenAtEye as S}from"../../../support/geometryUtils/ray.js";import{intersectScreen as U}from"../../../support/geometryUtils/sphere.js";import{Camera as z}from"../../../webgl-engine/lib/Camera.js";import{newIntersector as O}from"../../../webgl-engine/lib/Intersector.js";import{outExpo as V}from"../../../../animation/easing.js";const T=.6,F=4,k=60;let A=class extends d{constructor(){super(...arguments),this._zoomLocation=_(),this._tmpCamera=new z,this._tmpViewDir=_(),this._tmpRayDir={origin:_(),direction:_()},this._targetOnSphere=_(),this._tmpCenter=_(),this._constraintOptions={selection:g.ALL_EXCEPT_COLLISION,interactionType:j.ZOOM,interactionFactor:null,interactionStartCamera:new z,interactionDirection:null,tiltMode:w.TUMBLE},this._sphere=y()}initialize(){this._intersector=O(this.view.state.viewingMode)}zoomStep(t,i){if(!this.active)return;const e=this.view.state,{interactionStartCamera:r}=this._constraintOptions;r&&(this.animation.finished?r.copyFrom(e.camera):this.animation.cameraAt(1,r));let o=!1,a=!1;this.intersectionHelper.intersectScreen(i,this._zoomLocation,0===this.view.map.ground.opacity?C:{})&&(o=t>0,a=!0),this._tmpCamera.copyFrom(e.camera),o?this.intersectionHelper.intersectRay(this._tmpCamera.ray,this._intersector,this._tmpCenter)&&(this._tmpCamera.center=this._tmpCenter):this.intersectionHelper.intersectRay(this._tmpCamera.ray,this._intersector,this._zoomLocation)?this._tmpCamera.center=this._zoomLocation:s(this._zoomLocation,this._tmpCamera.center),this._updateCamera(this._tmpCamera,t,this._zoomLocation,i,a),this.begin(this._tmpCamera)}animationSettings(){return{duration:e(600),easing:V}}_updateCamera(t,e,r,s,_){const y=l(this.view.spatialReference),g=D(t,s,y),j=Math.abs(this.view.camera.position.z);o(H,t.eye),a(H,H,-1),S(t,s,this._tmpRayDir),o(this._tmpRayDir.direction,this._tmpRayDir.direction);const w=i(Math.min(M,1/Math.abs(n(H,this._tmpRayDir.direction)))*j,R,v);if(g===b.Horizontal){let i=T**e;this._sphere[3]=m(r),c(this._tmpViewDir,t.center,t.eye);const o=Math.min(m(this._tmpViewDir),w);let n=o*i;if(i<=1&&n<F&&(n=F,i=n/o),Math.abs(o-n)<1e-6)return;const _=m(t.center);if(this._sphere[3]!==_){const e=this._sphere[3]+i*(_-this._sphere[3]);t.center=a(E,t.center,e/_)}a(this._tmpViewDir,this._tmpViewDir,-i),t.eye=h(E,t.center,this._tmpViewDir),f(this.view,t,this._constraintOptions),p(r,t.center)>1e-12&&U(this._sphere,t,s,this._targetOnSphere)&&L(this._sphere,t,r,this._targetOnSphere,this.view.camera.heading,this.view.camera.tilt,!0)}else{let i=T**Math.abs(e);const o=e>0?1:-1;c(this._tmpViewDir,r,t.eye);const n=m(this._tmpViewDir),p=this.view._stage.renderView.getMinimalDepthForArea(null,s[0],s[1],this.view.state.camera,k);let l=null!=p?p:w;l=_&&e>0?Math.min(l,n):l,a(this._tmpRayDir.direction,this._tmpRayDir.direction,l),h(r,this._tmpRayDir.origin,this._tmpRayDir.direction);let y=l*i;const f=Math.max(F,1.01*t.nearFar[0]);if(e>0&&y<f&&(y=f,i=y/l),Math.abs(l-y)<1e-6)return;a(this._tmpRayDir.direction,this._tmpRayDir.direction,o*(1-i)),t.eye=h(E,t.eye,this._tmpRayDir.direction),t.center=h(E,t.center,this._tmpRayDir.direction)}u(this.view,t)}};A=t([r("esri.views.3d.state.controllers.global.ZoomStepController")],A);const E=_(),H=_();export{A as ZoomStepController};
