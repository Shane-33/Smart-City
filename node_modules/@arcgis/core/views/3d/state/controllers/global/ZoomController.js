/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
import{_ as t}from"../../../../../chunks/tslib.es6.js";import{clamp as i}from"../../../../../core/mathUtils.js";import{createScreenPointArray as r}from"../../../../../core/screenUtils.js";import"../../../../../core/Logger.js";import"../../../../../core/accessorSupport/ensureType.js";import"../../../../../core/arrayUtils.js";import"../../../../../core/has.js";import"../../../../../core/Error.js";import{subclass as e}from"../../../../../core/accessorSupport/decorators/subclass.js";import{j as s,d as a}from"../../../../../chunks/vec2.js";import{a as n}from"../../../../../chunks/vec2f64.js";import{n as o,f as c,l as h,j as m,i as p,g as l}from"../../../../../chunks/vec3.js";import{c as _}from"../../../../../chunks/vec3f64.js";import{getReferenceEllipsoid as u}from"../../../../../geometry/ellipsoidUtils.js";import{create as P,fromPoints as y}from"../../../../../geometry/support/axisAngle.js";import{c as C}from"../../../../../chunks/sphere.js";import{pixelDistanceToInteractionFactor as d,applyAll as f}from"../../../camera/constraintUtils.js";import{ConstraintTypes as g}from"../../../camera/constraintUtils/ConstraintTypes.js";import{InteractionType as j}from"../../../camera/constraintUtils/InteractionType.js";import{applySurfaceCollisionConstraint as v}from"../../../camera/constraintUtils/surfaceCollision.js";import{TiltMode as R}from"../../../camera/constraintUtils/TiltMode.js";import{InteractiveController as k}from"../InteractiveController.js";import{NavigationMode as D,normalizeCoordinate as M,pickPointAndInitSphere as w,contentIntersectorOptions as A,SpherePickPointFallback as U,decideNavigationMode as O,distanceClampValues as b,pivotDistanceModifier as z,screenPixelArea as S,sphereOrPlanePointFromScreenPoint as H,applyRotation as T}from"../../utils/navigationUtils.js";import{fromScreenAtEye as x}from"../../../support/geometryUtils/ray.js";let L=class extends k{constructor(){super(...arguments),this._pickPoint=_(),this._tmpP0=n(),this._panAxisAngle=P(),this._tmpRayDir=_(),this._tmpRayDirPick=_(),this._targetOnSphere=_(),this._navMode=D.Horizontal,this._tmpRay={origin:_(),direction:_()},this.dragBeginPoint=r(),this._normalizedAnchorPoint=n(),this._constraintOptions={selection:g.ALL_EXCEPT_COLLISION,interactionType:j.ZOOM,interactionFactor:0,interactionStartCamera:null,interactionDirection:null,tiltMode:R.TUMBLE},this._sphere=C(),this._hasPickPoint=!1}get _intersectionHelper(){return this.view.sceneIntersectionHelper}begin(t){if(!this.active)return;s(this.dragBeginPoint,t),M(this.startCamera,t,this._normalizedAnchorPoint);const r=u(this.view.spatialReference),e=w(this._intersectionHelper,this.startCamera,t,r,U.Ellipsoid,0===this.view.map.ground.opacity?A:{});if(this._navMode=O(this.startCamera,t,r),this._navMode===D.Horizontal)this._hasPickPoint=!!e.scenePickPoint,this._pickPoint=e.scenePickPoint??this._pickPoint,this._sphere=e.sphere;else{let r;x(this.startCamera,t,this._tmpRay),o(this._tmpRay.direction,this._tmpRay.direction),null!=e.scenePickPoint&&(c(this._tmpRayDirPick,this.startCamera.eye,e.scenePickPoint),r=h(this._tmpRayDirPick));const s=Math.abs(this.view.camera.position.z);this.view.renderCoordsHelper.worldUpAtPosition(this.startCamera.eye,E);let a=i(Math.min(z,1/Math.abs(m(E,this._tmpRay.direction)))*s,b[0],b[1]);const n=this.view._stage.renderView.getMinimalDepthForArea(null,t[0],t[1],this.view.state.camera,S);a=null!=n?n:a,a=null!=r?Math.min(a,r):a,this._hasPickPoint=!0,p(this._tmpRay.direction,this._tmpRay.direction,a),l(this._pickPoint,this._tmpRay.origin,this._tmpRay.direction)}this._constraintOptions.interactionStartCamera=this.startCamera}update(t){if(this.active){if(this.currentCamera.eye=this.startCamera.eye,this.currentCamera.center=this.startCamera.center,this.currentCamera.up=this.startCamera.up,this._navMode===D.Horizontal){c(this._tmpRayDir,this.currentCamera.center,this.currentCamera.eye);const i=h(this._tmpRayDir);M(this.currentCamera,t,this._tmpP0);const r=12*(this._normalizedAnchorPoint[1]-this._tmpP0[1]);let e=i*2**r;const s=this.view.state.constraints.minimumPoiDistance;if(r<0&&e<s&&(e=s),Math.abs(i-e)<1e-6)return;if(this._hasPickPoint&&e<i){const t=1-(1-e/i)*(1-this._sphere[3]/h(this.currentCamera.center));this.currentCamera.center=p(B,this.currentCamera.center,t)}p(this._tmpRayDir,this._tmpRayDir,-e/i),this.currentCamera.eye=l(B,this.currentCamera.center,this._tmpRayDir),this._constraintOptions.interactionFactor=d(a(this.dragBeginPoint,t)),f(this.view,this.currentCamera,this._constraintOptions),this._hasPickPoint&&(H(this._sphere,this.currentCamera,this.dragBeginPoint,this._targetOnSphere),y(this._pickPoint,this._targetOnSphere,this._panAxisAngle),T(this.currentCamera,this._sphere,this._panAxisAngle))}else{const i=h(this._tmpRay.direction);M(this.currentCamera,t,this._tmpP0);const r=12*(this._normalizedAnchorPoint[1]-this._tmpP0[1]);let e=i*2**r;const s=this.view.state.constraints.minimumPoiDistance;if(r<0&&e<s&&(e=s),Math.abs(i-e)<1e-6)return;p(this._tmpRayDir,this._tmpRay.direction,1-e/i),this.currentCamera.eye=l(B,this.currentCamera.eye,this._tmpRayDir),this.currentCamera.center=l(B,this.currentCamera.center,this._tmpRayDir)}v(this.view,this.currentCamera),this.commitCamera()}}end(){this.active&&this.finishController()}};L=t([e("esri.views.3d.state.controllers.global.ZoomController")],L);const B=_(),E=_();export{L as ZoomController};
