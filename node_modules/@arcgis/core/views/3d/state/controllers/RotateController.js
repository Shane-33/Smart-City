/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
import{_ as t}from"../../../../chunks/tslib.es6.js";import{acosClamped as i,clamp as s}from"../../../../core/mathUtils.js";import{createScreenPointArray as r}from"../../../../core/screenUtils.js";import{property as o}from"../../../../core/accessorSupport/decorators/property.js";import"../../../../core/accessorSupport/ensureType.js";import"../../../../core/arrayUtils.js";import"../../../../core/has.js";import{subclass as e}from"../../../../core/accessorSupport/decorators/subclass.js";import{c as a,k as n}from"../../../../chunks/mat4.js";import{a as h}from"../../../../chunks/mat4f64.js";import{j as p}from"../../../../chunks/vec2.js";import{a as m}from"../../../../chunks/vec2f64.js";import{c,f as l,l as _,j as v,n as u,g as C,i as f,b as P,e as E}from"../../../../chunks/vec3.js";import{c as w}from"../../../../chunks/vec3f64.js";import{getReferenceEllipsoid as d}from"../../../../geometry/ellipsoidUtils.js";import{applyAll as j}from"../../camera/constraintUtils.js";import{ConstraintTypes as T}from"../../camera/constraintUtils/ConstraintTypes.js";import{InteractionType as R}from"../../camera/constraintUtils/InteractionType.js";import{TiltMode as y}from"../../camera/constraintUtils/TiltMode.js";import{getVoxelWasm as U}from"../../layers/VoxelWasm.js";import{TiltDefault as M}from"../Constraints.js";import{InteractiveController as O}from"./InteractiveController.js";import{contentIntersectorOptions as D,normalizeCoordinate as x,rotatePivotDistanceModifier as g,rotatePivotMinDistanceModifier as k,decideNavigationMode as A,rotateScreenPixelArea as N,NavigationMode as V}from"../utils/navigationUtils.js";var b;!function(t){t[t.CENTER=0]="CENTER",t[t.EYE=1]="EYE"}(b||(b={}));let L=class extends O{get _intersectionHelper(){return this.view.sceneIntersectionHelper}constructor(t){super(t),this.pivot=b.CENTER,this._rotScale=0,this._lastPoint=m(),this._tmpWorldUp=w(),this._tmpViewDir=w(),this._tmpRotCurPoint=m(),this._tmpTransf=h(),this._tmpAxis=w(),this._tmpPivotPoint=w(),this._pivotPos=w(),this._constraintOptions={selection:T.ALL,interactionType:R.TUMBLE,interactionFactor:0,interactionStartCamera:null,interactionDirection:null,tiltMode:y.TUMBLE}}initialize(){this._rotScale=this.pivot===b.CENTER?3:1.5}begin(t){if(this.active){switch(this.pivot){case b.EYE:c(this._pivotPos,this.startCamera.eye),this._constraintOptions.interactionType=R.LOOK_AROUND,this._constraintOptions.tiltMode=y.LOOK_AROUND,this._constraintOptions.selection=T.NONE;break;case b.CENTER:{const i=this._intersectionHelper.intersectRayFreePointFallback(this.startCamera.ray,this._pivotPos,0===this.view.map.ground.opacity?D:{});i||c(this._pivotPos,this.startCamera.center),this._constrainPivotPoint(t,i),this.startCamera.center=this._pivotPos,this._constraintOptions.interactionType=R.TUMBLE,this._constraintOptions.tiltMode=y.TUMBLE,this._constraintOptions.selection=T.ALL&~T.DISTANCE;break}}this._constraintOptions.interactionStartCamera=this.startCamera,x(this.startCamera,t,this._lastPoint)}}_constrainPivotPoint(t,i){const s=this.startCamera,o=w();l(o,this._pivotPos,s.eye);const e=_(o),a=Math.abs(this.view.camera.position.z);this.view.renderCoordsHelper.worldUpAtPosition(s.eye,H);let n=Math.max(Math.min(g,1/Math.abs(v(H,s.viewForward)))*a,k);i&&(n=Math.min(e,n));const h=d(this.view.spatialReference),p=r(s.width/s.pixelRatio*.5,s.height/s.pixelRatio*.5),m=A(this.startCamera,p,h);let P=this.view._stage.renderView.getMinimalDepthForArea(U(this.view),s.fullWidth/s.pixelRatio*.5,s.fullHeight/s.pixelRatio*.5,s,2.5*N,N),E=this.view._stage.renderView.getMinimalDepthForArea(U(this.view),t[0],t[1],s,N);null==P&&null==E||(P=P??E??0,E=null==E||m===V.Horizontal?P:E,n=P>E?E:P,n=i?Math.min(n,e):n),u(o,o),c(this._pivotPos,C(this._tmpPivotPoint,s.eye,f(this._tmpPivotPoint,o,n)))}update(t){if(this.active){switch(this.pivot){case b.EYE:this.currentCamera.center=this._applyRotation(this.currentCamera,t,this.currentCamera.center,this._pivotPos);break;case b.CENTER:this.currentCamera.center=this._pivotPos,this.currentCamera.eye=this._applyRotation(this.currentCamera,t,this.currentCamera.eye,this._pivotPos)}j(this.view,this.currentCamera,this._constraintOptions),this.commitCamera()}}end(){this.active&&this.finishController()}_applyRotation(t,r,o,e){this.view.renderCoordsHelper.worldUpAtPosition(e,this._tmpWorldUp),x(t,r,this._tmpRotCurPoint);let h=(this._lastPoint[1]-this._tmpRotCurPoint[1])*this._rotScale,m=(this._tmpRotCurPoint[0]-this._lastPoint[0])*this._rotScale;l(this._tmpViewDir,o,e);const c=_(this._tmpViewDir),u=i(v(this._tmpViewDir,this._tmpWorldUp)/c);if(this.pivot===b.EYE){h*=-.5;const t=.5*Math.PI-u,i=.5*Math.PI*.99;h=t-Math.max(-i,Math.min(i,t+h))}return h=s(h+u,M.min,M.max)-u,P(this._tmpAxis,t.up,this._tmpViewDir),this.pivot===b.CENTER&&(m=-m),a(this._tmpTransf,m,this._tmpWorldUp),n(this._tmpTransf,this._tmpTransf,h,this._tmpAxis),E(this._tmpViewDir,this._tmpViewDir,this._tmpTransf),t.up=E(S,t.up,this._tmpTransf),C(S,e,this._tmpViewDir),p(this._lastPoint,this._tmpRotCurPoint),S}};t([o()],L.prototype,"pivot",void 0),L=t([e("esri.views.3d.state.controllers.RotateController")],L);const S=w(),H=w();export{b as PivotPoint,L as RotateController};
