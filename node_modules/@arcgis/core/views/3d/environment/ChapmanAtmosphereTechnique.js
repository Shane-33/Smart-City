/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
import{a as e}from"../../../chunks/vec2f64.js";import{c as r}from"../../../chunks/vec3f64.js";import{c as i}from"../../../chunks/vec4f64.js";import{C as t}from"../../../chunks/ChapmanAtmosphere.glsl.js";import{NoParameters as s}from"../webgl-engine/core/shaderModules/interfaces.js";import{ReloadableShaderModule as n}from"../webgl-engine/core/shaderTechnique/ReloadableShaderModule.js";import{ShaderTechnique as o}from"../webgl-engine/core/shaderTechnique/ShaderTechnique.js";import{Default3D as a}from"../webgl-engine/lib/DefaultVertexAttributeLocations.js";import{Program as h}from"../webgl-engine/lib/Program.js";import{BlendFactor as c,CompareFunction as l}from"../../webgl/enums.js";import{makePipelineState as m,simpleBlendingParams as d,defaultColorWriteParams as g,separateBlendingParams as u}from"../../webgl/renderState.js";class f extends s{constructor(){super(...arguments),this.heightParameters=i(),this.radii=e(),this.innerFadeDistance=0,this.altitudeFade=0,this.hazeStrength=1,this.renderScale=e(),this.backgroundColor=r()}}class p extends o{initializeProgram(e){return new h(e.rctx,p.shader.get().build(this.configuration),a)}initializePipeline(){return this.configuration.reduced?m({blending:d(c.ONE,c.ZERO),depthTest:{func:l.ALWAYS},colorWrite:g}):this.configuration.haze?m({blending:u(c.ONE,c.ZERO,c.ONE_MINUS_SRC_COLOR,c.ONE),colorWrite:g}):m({blending:d(c.SRC_ALPHA,c.ONE_MINUS_SRC_ALPHA),depthTest:{func:l.LEQUAL},colorWrite:g})}}p.shader=new n(t,(()=>import("./ChapmanAtmosphere.glsl.js")));export{f as ChapmanAtmospherePassParameters,p as ChapmanAtmosphereTechnique};
