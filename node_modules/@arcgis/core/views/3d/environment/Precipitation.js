/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
import{_ as e}from"../../../chunks/tslib.es6.js";import t from"../../../core/Accessor.js";import{lerp as r}from"../../../core/mathUtils.js";import{releaseMaybe as i,disposeMaybe as s}from"../../../core/maybe.js";import{secondsFromMilliseconds as n}from"../../../core/time.js";import{property as o}from"../../../core/accessorSupport/decorators/property.js";import"../../../core/accessorSupport/ensureType.js";import"../../../core/arrayUtils.js";import"../../../core/has.js";import{subclass as a}from"../../../core/accessorSupport/decorators/subclass.js";import{UpdatingHandles as c}from"../../../core/support/UpdatingHandles.js";import{getReferenceEllipsoid as u}from"../../../geometry/ellipsoidUtils.js";import{PrecipitationPassParameters as h,PrecipitationTechnique as p,attributeLocations as m}from"./PrecipitationTechnique.js";import{PrecipitationTechniqueConfiguration as d,PrecipitationType as _}from"./PrecipitationTechniqueConfiguration.js";import{glLayout as l}from"../support/buffer/glUtil.js";import{newLayout as f}from"../support/buffer/InterleavedLayout.js";import{AnimationTimer as y}from"../webgl-engine/lib/AnimationTimer.js";import{VertexArrayObject as T}from"../webgl-engine/lib/VertexArrayObject.js";import{VertexAttribute as g}from"../webgl-engine/lib/VertexAttribute.js";import{BufferObject as w}from"../../webgl/BufferObject.js";import{PrimitiveType as b,Usage as j}from"../../webgl/enums.js";import{bindVertexBufferLayout as q,unbindVertexBufferLayout as I}from"../../webgl/Util.js";let A=class extends t{constructor(e){super(e),this._numParticles=25e4,this._rainSpeed=.1,this._snowSpeed=.01,this._passParameters=new h,this._animation=new y,this._updatingTracking=new c,this._passParameters.time=0,this._passParameters.radius=u(e.view.spatialReference).radius,this._techniqueRepository=e.context.techniqueRepository}destroy(){this._updatingTracking.destroy(),this._numParticles=0,this._snowTechniqueCached=i(this._snowTechniqueCached),this._rainTechniqueCached=i(this._rainTechniqueCached),this._vao=s(this._vao),this._instanceIdBuffer=s(this._instanceIdBuffer)}get updating(){return this._updatingTracking.updating}get _rainTechnique(){if(null==this._rainTechniqueCached){const e=new d;e.type=_.Rain,this._rainTechniqueCached=this._techniqueRepository.acquire(p,e)}return this._rainTechniqueCached}get _snowTechnique(){if(null==this._snowTechniqueCached){const e=new d;e.type=_.Snow,this._snowTechniqueCached=this._techniqueRepository.acquire(p,e)}return this._snowTechniqueCached}update(e){return this._animation.advance(e)}render(e,t,i){const s="rainy"===i?this._rainTechnique:this._snowTechnique;if(!s.compiled)return void this.context.requestRender();const o=e.rctx;if(this._ensureResources(o),null==s||null==this._vao||null==this._instanceIdBuffer)return;if(null!=e.bindParameters.cloudsFade.data&&(this._passParameters.opacity=e.bindParameters.cloudsFade.opacity),this._passParameters.opacity<=0)return;const a=.35;t=t<.5?r(0,a,2*t):r(a,1,2*(t-.5)),this._passParameters.time=("rainy"===i?this._rainSpeed:this._snowSpeed)*n(this._animation.time)%1e5;const c=o.bindTechnique(s,this._passParameters,e.bindParameters);o.bindVAO(this._vao),c.assertCompatibleVertexAttributeLocations(this._vao),q(o,m,this._instanceIdBuffer,P,0),o.drawArraysInstanced(b.TRIANGLES,0,3,this._numParticles*t),I(o,m,this._instanceIdBuffer,P)}_ensureResources(e){null==this._vao&&(this._vao=this._createVertexArrayObject(e)),null==this._instanceIdBuffer&&(this._instanceIdBuffer=this._createInstanceIndices(e))}_createInstanceIndices(e){const t=[];for(let r=0;r<this._numParticles;r++)t.push(r);return w.createVertex(e,j.STATIC_DRAW,new Float32Array(t))}_createVertexArrayObject(e){const t=new Float32Array([-1,0,1,1,0,-1,1,0,1]);return new T(e,m,{geometry:l(v)},{geometry:w.createVertex(e,j.STATIC_DRAW,t)})}};e([o({constructOnly:!0})],A.prototype,"context",void 0),e([o({constructOnly:!0})],A.prototype,"view",void 0),e([o({readOnly:!0})],A.prototype,"updating",null),e([o()],A.prototype,"_updatingTracking",void 0),A=e([a("esri.views.3d.environment.Precipitation")],A);const v=f().vec3f(g.POSITION),P=l(f().f32(g.INSTANCEFEATUREATTRIBUTE),1);export{A as Precipitation};
