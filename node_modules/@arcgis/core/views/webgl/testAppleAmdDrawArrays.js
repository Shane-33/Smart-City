/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
import has from"../../core/has.js";import{glsl as e}from"../3d/webgl-engine/core/shaderModules/interfaces.js";import{AppleAmdDriverHelper as r}from"./AppleAmdDriverHelper.js";import{BufferObject as t}from"./BufferObject.js";import{ContextType as o}from"./contextUtils.js";import{TextureWrapMode as i,TextureSamplingMode as n,Usage as s,BufferType as a,PrimitiveType as p,DataType as c,PixelFormat as m,PixelType as l}from"./enums.js";import{FramebufferObject as f}from"./FramebufferObject.js";import{TextureDescriptor as g}from"./TextureDescriptor.js";import{WebGLDriverTestModule as d}from"./WebGLDriverTestModule.js";class h extends d{constructor(e){super(),this._rctx=e,this._helperProgram=null,this._rctx.type===o.WEBGL2&&has("mac")&&has("chrome")&&(this._program=this._prepareProgram(),this._helperProgram=this._prepareHelperProgram())}dispose(){super.dispose(),this._helperProgram?.dispose(),this._helperProgram=null}_test(e){const r=this._rctx,o=r.getBoundFramebufferObject(),{x:d,y:h,width:u,height:_}=r.getViewport();r.resetState();const v=new g(1);v.wrapMode=i.CLAMP_TO_EDGE,v.samplingMode=n.NEAREST;const x=new f(r,v),E=t.createIndex(this._rctx,s.STATIC_DRAW,new Uint8Array([0]));r.bindFramebuffer(x),r.setViewport(0,0,1,1),r.useProgram(this._helperProgram),r.bindBuffer(E,a.ELEMENT_ARRAY_BUFFER),r.drawElements(p.POINTS,1,c.UNSIGNED_BYTE,0),r.useProgram(e),r.bindVAO(null),r.drawArrays(p.TRIANGLES,0,258);const P=new Uint8Array(4);return x.readPixels(0,0,1,1,m.RGBA,l.UNSIGNED_BYTE,P),r.setViewport(d,h,u,_),r.bindFramebuffer(o),x.dispose(),E.dispose(),255===P[0]}_prepareProgram(){const r=85,t=`#version 300 es\n    precision highp float;\n\n    out float triangleId;\n\n    const vec3 triangleVertices[3] = vec3[3](vec3(-0.5, -0.5, 0.0), vec3(0.5, -0.5, 0.0), vec3(0.0, 0.5, 0.0));\n\n    void main(void) {\n      triangleId = floor(float(gl_VertexID)/3.0);\n\n      vec3 position = triangleVertices[gl_VertexID % 3];\n      float offset = triangleId / ${e.float(r)};\n      position.z = 0.5 - offset;\n\n      gl_Position = vec4(position, 1.0);\n    }\n    `,o=`#version 300 es\n    precision highp float;\n\n    in float triangleId;\n\n    out vec4 fragColor;\n\n    void main(void) {\n      fragColor = triangleId == ${e.float(r)} ? vec4(0.0, 1.0, 0.0, 1.0) : vec4(1.0, 0.0, 0.0, 1.0);\n    }\n    `;return this._rctx.programCache.acquire(t,o,new Map([]))}_prepareHelperProgram(){const e=r.getShaderSources();return this._rctx.programCache.acquire(e.vertex,e.fragment,new Map([]))}}export{h as DrawArraysRequiresIndicesTypeReset};
