/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
import{blendingAlpha as e}from"../3d/webgl-engine/lib/OrderIndependentTransparency.js";import{BufferObject as t}from"./BufferObject.js";import{ContextType as r}from"./contextUtils.js";import{TextureWrapMode as o,PixelType as i,SizedPixelFormat as a,TextureSamplingMode as n,Usage as s,DataType as p,PrimitiveType as l}from"./enums.js";import{FramebufferObject as c}from"./FramebufferObject.js";import{makePipelineState as m}from"./renderState.js";import{TextureDescriptor as f}from"./TextureDescriptor.js";import{VertexArrayObject as u}from"./VertexArrayObject.js";import{VertexElementDescriptor as b}from"./VertexElementDescriptor.js";import{WebGLDriverTestModule as d}from"./WebGLDriverTestModule.js";class g extends d{constructor(e){if(super(),this._rctx=e,!e.gl)return;if(e.type===r.WEBGL1)return void(this._result=!(!e.capabilities.textureFloat?.textureFloat||!e.capabilities.colorBufferFloat?.textureFloat));if(!(e.capabilities.textureFloat?.textureFloat&&e.capabilities.colorBufferFloat?.textureFloat&&e.capabilities.colorBufferFloat?.floatBlend))return;const t="\n    precision highp float;\n    attribute vec2 a_pos;\n\n    void main() {\n      gl_Position = vec4(a_pos * 2.0 - 1.0, 0.0, 1.0);\n    }\n    ",o="\n     precision highp float;\n\n     void main() {\n      gl_FragColor = vec4(0.5, 0.5, 0.5, 0.5);\n     }\n    ";this._program=e.programCache.acquire(t,o,new Map([["a_pos",0]]))}_test(r){const d=this._rctx,g=new f(1);g.wrapMode=o.CLAMP_TO_EDGE,g.dataType=i.FLOAT,g.internalFormat=a.RGBA32F,g.samplingMode=n.NEAREST;const _=new c(d,g),x=t.createVertex(d,s.STATIC_DRAW,new Uint16Array([0,0,1,0,0,1,1,1])),F=new u(d,new Map([["a_pos",0]]),{geometry:[new b("a_pos",2,p.UNSIGNED_SHORT,0,4)]},{geometry:x});d.useProgram(r);const w=d.getBoundFramebufferObject(),{x:j,y:T,width:A,height:h}=d.getViewport();d.bindFramebuffer(_),d.setViewport(0,0,1,1),d.bindVAO(F),d.drawArrays(l.TRIANGLE_STRIP,0,4);const y=m({blending:e});d.setPipelineState(y),d.drawArrays(l.TRIANGLE_STRIP,0,4);const E=d.gl.getError();return d.setViewport(j,T,A,h),d.bindFramebuffer(w),F.dispose(),_.dispose(),1282!==E||(console.warn("Device claims support for WebGL extension EXT_float_blend but does not support it. Using fall back."),!1)}}export{g as FloatBufferBlend};
