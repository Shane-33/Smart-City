/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
import{isArrayLike as e}from"../../core/arrayUtils.js";import t from"../../core/Logger.js";import{isUint16Array as r,isUint32Array as i}from"../../core/typedArrayUtil.js";import{checkWebGLError as s}from"./checkWebGLError.js";import{ContextType as n}from"./contextUtils.js";import{BufferType as o,Usage as a,ResourceType as f,DataType as u}from"./enums.js";const _=t.getLogger("esri.views.webgl.BufferObject");class h{static createIndex(e,t,r){return new h(e,o.ELEMENT_ARRAY_BUFFER,t,r)}static createVertex(e,t,r){return new h(e,o.ARRAY_BUFFER,t,r)}static createUniform(e,t,r){if(e.type!==n.WEBGL2)throw new Error("Uniform buffers are supported in WebGL2 only!");return new h(e,o.UNIFORM_BUFFER,t,r)}static createPixelPack(e,t=a.STREAM_READ,r){if(e.type!==n.WEBGL2)throw new Error("Pixel pack buffers are supported in WebGL2 only!");const i=new h(e,o.PIXEL_PACK_BUFFER,t);return r&&i.setSize(r),i}static createPixelUnpack(e,t=a.STREAM_DRAW,r){if(e.type!==n.WEBGL2)throw new Error("Pixel unpack buffers are supported in WebGL2 only!");return new h(e,o.PIXEL_UNPACK_BUFFER,t,r)}constructor(e,t,r,i){this._context=e,this.bufferType=t,this.usage=r,this._glName=null,this._size=-1,this._indexType=void 0,e.instanceCounter.increment(f.BufferObject,this),this._glName=this._context.gl.createBuffer(),s(this._context.gl),i&&this.setData(i)}get glName(){return this._glName}get size(){return this._size}get indexType(){return this._indexType}get byteLength(){return this.bufferType===o.ELEMENT_ARRAY_BUFFER?this._indexType===u.UNSIGNED_INT?4*this._size:2*this._size:this._size}get _isVAOAware(){return this.bufferType===o.ELEMENT_ARRAY_BUFFER||this.bufferType===o.ARRAY_BUFFER}dispose(){if(this._context?.gl){if(this._glName){this._context.gl.deleteBuffer(this._glName),this._glName=null}this._context.instanceCounter.decrement(f.BufferObject,this),this._context=null}else this._glName&&_.warn("Leaked WebGL buffer object")}setSize(e,t=null){if(e<=0&&_.error("Buffer size needs to be positive!"),this.bufferType===o.ELEMENT_ARRAY_BUFFER&&null!=t)switch(this._indexType=t,t){case u.UNSIGNED_SHORT:e*=2;break;case u.UNSIGNED_INT:e*=4}this._setBufferData(e)}setData(e){if(!e)return;let t=e.byteLength;this.bufferType===o.ELEMENT_ARRAY_BUFFER&&(r(e)&&(t/=2,this._indexType=u.UNSIGNED_SHORT),i(e)&&(t/=4,this._indexType=u.UNSIGNED_INT)),this._setBufferData(t,e)}_setBufferData(e,t=null){this._size=e;const r=this._context.getBoundVAO();this._isVAOAware&&this._context.bindVAO(null),this._context.bindBuffer(this);const i=this._context.gl;null!=t?i.bufferData(this.bufferType,t,this.usage):i.bufferData(this.bufferType,e,this.usage),s(i),this._isVAOAware&&this._context.bindVAO(r)}setSubData(e,t,r,i){if(!e)return;(t<0||t*e.BYTES_PER_ELEMENT>=this.byteLength)&&_.error("offset is out of range!"),r>=i&&_.error("end must be bigger than start!"),(t+(i-r))*e.BYTES_PER_ELEMENT>this.byteLength&&_.error("An attempt to write beyond the end of the buffer!");const o=this._context.getBoundVAO();this._isVAOAware&&this._context.bindVAO(null),this._context.bindBuffer(this);const a=this._context.gl;if(this._context.type===n.WEBGL2)a.bufferSubData(this.bufferType,t*e.BYTES_PER_ELEMENT,e,r,i-r);else{const s=0===r&&i===e.length?e:e.subarray(r,i);a.bufferSubData(this.bufferType,t*e.BYTES_PER_ELEMENT,s)}s(a),this._isVAOAware&&this._context.bindVAO(o)}getSubData(e,t=0,r,i){if(this._context.type!==n.WEBGL2)return void _.error("Get buffer subdata is supported in WebGL2 only!");if(r<0||i<0)return void _.error("Problem getting subdata: offset and length were less than zero!");const s=E(e)?e.BYTES_PER_ELEMENT:1;if(s*((r??0)+(i??0))>e.byteLength)return void _.error("Problem getting subdata: offset and length exceeded destination size!");t+s*(i??0)>this.byteLength&&_.warn("Potential problem getting subdata: requested data exceeds buffer size!");const a=this._context.gl;this._context.bindBuffer(this,o.COPY_READ_BUFFER),a.getBufferSubData(o.COPY_READ_BUFFER,t,e,r,i),this._context.unbindBuffer(o.COPY_READ_BUFFER)}async getSubDataAsync(e,t=0,r,i){this._context.type===n.WEBGL2?(await this._context.clientWaitAsync(),this.getSubData(e,t,r,i)):_.error("Get buffer subdata is supported in WebGL2 only!")}}function E(t){return e(t)}export{h as BufferObject};
