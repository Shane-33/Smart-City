/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
import{unpackFloatRGBA as e}from"../../core/floatRGBA.js";import has from"../../core/has.js";import{disposeMaybe as n}from"../../core/maybe.js";import{f as o}from"../../chunks/vec3f64.js";import{BufferObject as t}from"./BufferObject.js";import{encodeDoubleArray as r}from"./doublePrecisionUtils.js";import{TextureWrapMode as i,TextureSamplingMode as s,Usage as c,DataType as a,PrimitiveType as u,PixelFormat as f,PixelType as l}from"./enums.js";import{FramebufferObject as p}from"./FramebufferObject.js";import{TextureDescriptor as v}from"./TextureDescriptor.js";import{VertexArrayObject as m}from"./VertexArrayObject.js";import{VertexElementDescriptor as h}from"./VertexElementDescriptor.js";import{WebGLDriverTestModule as _}from"./WebGLDriverTestModule.js";class d extends _{constructor(e){super(),this._rctx=e,this._program=A(this._rctx,!1),this._obfuscated=A(this._rctx,!0)}dispose(){super.dispose(),this._obfuscated=n(this._obfuscated)}_test(e){if(has("force-double-precision-obfuscation"))return!0;if(null==this._obfuscated)return!1;const n=this._runProgram(e),o=this._runProgram(this._obfuscated);return 0!==n&&(0===o||n/o>5)}_runProgram(n){const _=this._rctx;_.resetState();const d=new v(1);d.wrapMode=i.CLAMP_TO_EDGE,d.samplingMode=s.NEAREST;const A=new p(_,d),b=t.createVertex(_,c.STATIC_DRAW,new Uint16Array([0,0,1,0,0,1,1,1])),g=new m(_,new Map([["position",0]]),{geometry:[new h("position",2,a.UNSIGNED_SHORT,0,4)]},{geometry:b}),B=o(5633261.287538229,2626832.878767164,1434988.0495278358),F=o(5633271.46742708,2626873.6381334523,1434963.231608387),w=new Float32Array(6);r(B,w,3);const E=new Float32Array(6);r(F,E,3),_.useProgram(n),n.setUniform3f("u_highA",w[0],w[2],w[4]),n.setUniform3f("u_lowA",w[1],w[3],w[5]),n.setUniform3f("u_highB",E[0],E[2],E[4]),n.setUniform3f("u_lowB",E[1],E[3],E[5]),_.bindFramebuffer(A),_.setViewport(0,0,1,1),_.bindVAO(g),_.drawArrays(u.TRIANGLE_STRIP,0,4);const O=new Uint8Array(4);A.readPixels(0,0,1,1,f.RGBA,l.UNSIGNED_BYTE,O),g.dispose(),A.dispose();const I=(B[2]-F[2])/25,U=e(O);return Math.abs(I-U)}}function A(e,n){const o=`\n\n  precision highp float;\n\n  attribute vec2 position;\n\n  uniform vec3 u_highA;\n  uniform vec3 u_lowA;\n  uniform vec3 u_highB;\n  uniform vec3 u_lowB;\n\n  varying vec4 v_color;\n\n  ${n?"#define DOUBLE_PRECISION_REQUIRES_OBFUSCATION":""}\n\n  #ifdef DOUBLE_PRECISION_REQUIRES_OBFUSCATION\n\n  vec3 dpPlusFrc(vec3 a, vec3 b) {\n    return mix(a, a + b, vec3(notEqual(b, vec3(0))));\n  }\n\n  vec3 dpMinusFrc(vec3 a, vec3 b) {\n    return mix(vec3(0), a - b, vec3(notEqual(a, b)));\n  }\n\n  vec3 dpAdd(vec3 hiA, vec3 loA, vec3 hiB, vec3 loB) {\n    vec3 t1 = dpPlusFrc(hiA, hiB);\n    vec3 e = dpMinusFrc(t1, hiA);\n    vec3 t2 = dpMinusFrc(hiB, e) + dpMinusFrc(hiA, dpMinusFrc(t1, e)) + loA + loB;\n    return t1 + t2;\n  }\n\n  #else\n\n  vec3 dpAdd(vec3 hiA, vec3 loA, vec3 hiB, vec3 loB) {\n    vec3 t1 = hiA + hiB;\n    vec3 e = t1 - hiA;\n    vec3 t2 = ((hiB - e) + (hiA - (t1 - e))) + loA + loB;\n    return t1 + t2;\n  }\n\n  #endif\n\n  const float MAX_RGBA_FLOAT =\n    255.0 / 256.0 +\n    255.0 / 256.0 / 256.0 +\n    255.0 / 256.0 / 256.0 / 256.0 +\n    255.0 / 256.0 / 256.0 / 256.0 / 256.0;\n\n  const vec4 FIXED_POINT_FACTORS = vec4(1.0, 256.0, 256.0 * 256.0, 256.0 * 256.0 * 256.0);\n\n  vec4 float2rgba(const float value) {\n    // Make sure value is in the domain we can represent\n    float valueInValidDomain = clamp(value, 0.0, MAX_RGBA_FLOAT);\n\n    // Decompose value in 32bit fixed point parts represented as\n    // uint8 rgba components. Decomposition uses the fractional part after multiplying\n    // by a power of 256 (this removes the bits that are represented in the previous\n    // component) and then converts the fractional part to 8bits.\n    vec4 fixedPointU8 = floor(fract(valueInValidDomain * FIXED_POINT_FACTORS) * 256.0);\n\n    // Convert uint8 values (from 0 to 255) to floating point representation for\n    // the shader\n    const float toU8AsFloat = 1.0 / 255.0;\n\n    return fixedPointU8 * toU8AsFloat;\n  }\n\n  void main() {\n    vec3 val = dpAdd(u_highA, u_lowA, -u_highB, -u_lowB);\n\n    v_color = float2rgba(val.z / 25.0);\n\n    gl_Position = vec4(position * 2.0 - 1.0, 0.0, 1.0);\n  }\n  `,t="\n  precision highp float;\n\n  varying vec4 v_color;\n\n  void main() {\n    gl_FragColor = v_color;\n  }\n  ";return e.programCache.acquire(o,t,new Map([["position",0]]))}export{d as DoublePrecisionRequiresObfuscation};
