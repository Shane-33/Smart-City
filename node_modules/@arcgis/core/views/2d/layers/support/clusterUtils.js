/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
import e from"../../../../core/Error.js";import has from"../../../../core/has.js";import r from"../../../../core/Logger.js";import{createMD5Hash as s}from"../../../../core/MD5.js";import i from"../../../../layers/support/AggregateField.js";import n from"../../../../layers/support/ExpressionInfo.js";import a from"../../../../renderers/support/AuthoringInfo.js";import t from"../../../../renderers/visualVariables/SizeVariable.js";import l from"../../../../renderers/visualVariables/support/SizeStop.js";import{LevelDependentSizeVariable as u}from"../../engine/LevelDependentSizeVariable.js";const o=r.getLogger("esri.views.2d.layers.support.clusterUtils");has.add("esri-cluster-arcade-enabled",!0);const p=has("esri-cluster-arcade-enabled"),c=(e,r,s,i,n)=>{const t=r.clone();if(!b(t))return t;if(t.authoringInfo||(t.authoringInfo=new a),t.authoringInfo.isAutoGenerated=!0,"visualVariables"in t){const r=(t.visualVariables||[]).filter((e=>"$view.scale"!==e.valueExpression)),a=d(r);r.forEach((r=>{"rotation"===r.type?r.field?r.field=E(e,r.field,"avg_angle","number"):r.valueExpression&&(r.field=x(e,r.valueExpression,"avg_angle","number"),r.valueExpression=null):r.normalizationField?(r.field=E(e,r.field,"avg_norm","number",r.normalizationField),r.normalizationField=null):r.field?r.field=E(e,r.field,"avg","number"):r.valueExpression&&(r.field=x(e,r.valueExpression,"avg","number"),r.valueExpression=null)})),null==a&&!m(r)&&n&&(r.push(v(s,i)),t.dynamicClusterSize=!0),t.visualVariables=r}switch(t.type){case"simple":break;case"pie-chart":for(const r of t.attributes)r.field?r.field=E(e,r.field,"sum","number"):r.valueExpression&&(r.field=x(e,r.valueExpression,"sum","number"),r.valueExpression=null);break;case"unique-value":t.field?t.field=E(e,t.field,"mode","string"):t.valueExpression&&(t.field=x(e,t.valueExpression,"mode","string"),t.valueExpression=null);break;case"class-breaks":t.normalizationField?(t.field=E(e,t.field,"avg_norm","number",t.normalizationField),t.normalizationField=null):t.field?t.field=E(e,t.field,"avg","number"):t.valueExpression&&(t.field=x(e,t.valueExpression,"avg","number"),t.valueExpression=null)}return t},d=e=>{for(const r of e)if("size"===r.type)return r;return null};function f(e,r,s){const i=e.clone();let n=!1;if("visualVariables"in i){const e=(i.visualVariables||[]).filter((e=>"$view.scale"!==e.valueExpression));null==d(e)&&(i.visualVariables||(i.visualVariables=[]),i.visualVariables.push(v(r,s)),i.dynamicClusterSize=!0,n=!0)}return{renderer:i,didInject:n}}const m=e=>{for(const r of e)if("cluster_count"===r.field)return!0;return!1},v=(e,r)=>{const s=[new l({value:0,size:0}),new l({value:1})];if(null==r)return new t({field:"cluster_count",stops:[...s,new l({value:2,size:0})]});const i=Object.keys(r).reduce(((i,n)=>({...i,[n]:[...s,new l({value:Math.max(2,r[n].minValue),size:e.clusterMinSize}),new l({value:Math.max(3,r[n].maxValue),size:e.clusterMaxSize})]})),{});return new u({field:"cluster_count",levels:i})},b=r=>{const s=s=>o.error(new e("Unsupported-renderer",s,{renderer:r}));if(!r)return!1;switch(r.type){case"unique-value":if(r.field2||r.field3)return s("FeatureReductionCluster does not support multi-field UniqueValueRenderers"),!1;break;case"class-breaks":if(r.normalizationField){const e=r.normalizationType;if("field"!==e)return s(`FeatureReductionCluster does not support a normalizationType of ${e}`),!1}break;case"simple":case"pie-chart":break;default:return s(`FeatureReductionCluster does not support renderers of type ${r.type}`),!1}if(!p){if("valueExpression"in r&&r.valueExpression)return s("FeatureReductionCluster does not currently support renderer.valueExpression. Support will be added in a future release"),!1;if(("visualVariables"in r&&r.visualVariables||[]).some((e=>!(!("valueExpression"in e)||!e.valueExpression))))return s("FeatureReductionCluster does not currently support visualVariables with a valueExpression. Support will be added in a future release"),!1}return!0};function g(e,r,i){switch(e){case"sum":return`cluster_sum_${r}`;case"avg":case"avg_angle":return`cluster_avg_${r}`;case"mode":return`cluster_type_${r}`;case"avg_norm":{const e=i,n="field",a=r.toLowerCase()+",norm:"+n+","+e.toLowerCase();return"cluster_avg_"+s(a)}}}function x(e,r,a,t){const l=s(r),u="mode"===a?`cluster_type_${l}`:"sum"===a?`cluster_sum_${l}`:`cluster_avg_${l}`;return e.some((e=>e.name===u))||e.push(new i({name:u,isAutoGenerated:!0,onStatisticExpression:new n({expression:r,returnType:t}),statisticType:a})),u}function E(e,r,s,a,t){if("cluster_count"===r||e.some((e=>e.name===r)))return r;const l=g(s,r,t);return e.some((e=>e.name===l))||("avg_norm"===s?e.push(new i({name:l,isAutoGenerated:!0,onStatisticExpression:new n({expression:`$feature.${r} / $feature.${t}`,returnType:a}),statisticType:"avg"})):e.push(new i({name:l,isAutoGenerated:!0,onStatisticField:r,statisticType:s}))),l}export{v as createClusterCountSizeVariable,c as createClusterRenderer,d as findSizeVV,m as hasClusterCountVV,f as injectDynamicLevelDependentSizeVisualVariable,b as isClusterCompatibleRenderer};
