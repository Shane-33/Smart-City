/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
import has from"../../../../../core/has.js";import{throwIfAborted as e,isAbortError as t}from"../../../../../core/promiseUtils.js";import{BaseFeatureSource as r}from"./BaseFeatureSource.js";const s=has("esri-mobile"),i={maxDrillLevel:s?1:4,maxRecordCountFactor:s?1:3};class a extends r{constructor(e){super(e)}async _fetchDataTile(r){const s=this._serviceInfo.capabilities.query.supportsMaxRecordCountFactor,a=this._subscriptions.get(r.key.id),o=a.signal,n=r.getQuantizationParameters();let c=0;const d=async(u,l)=>{const m=this._queryInfo,p=this.createTileQuery(u,{maxRecordCountFactor:s?i.maxRecordCountFactor:void 0,returnExceededLimitFeatures:!1,quantizationParameters:n});c++;try{const t=await this.enqueueQuery({tile:r,query:p,signal:o,depth:l});if(c--,e(o),!t)return;if(m!==this._queryInfo)return void d(u,l);if(t.exceededTransferLimit&&l<i.maxDrillLevel){for(const e of u.createChildTiles())d(e,l+1);return}const s={id:r.id,addOrUpdate:t,end:0===c,type:"append"};a.add({query:p,message:s}),this._onMessage(s)}catch(f){if(!t(f)){const e={id:r.id,addOrUpdate:null,end:!0,type:"append"};a.add({query:p,message:e}),this._onMessage(e)}}};d(r,0)}}export{a as DrillDownFeatureSource};
