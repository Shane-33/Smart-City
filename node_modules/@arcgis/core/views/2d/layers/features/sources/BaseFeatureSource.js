/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
import e from"../../../../../request.js";import t from"../../../../../core/Error.js";import has from"../../../../../core/has.js";import r from"../../../../../core/Logger.js";import{throwIfAborted as s,isAbortError as i}from"../../../../../core/promiseUtils.js";import{createSourceAdapter as a}from"../controllers/support/sourceAdapters.js";import{DataTileSource as o}from"./DataTileSource.js";import{QueueProcessor as n}from"../../../../support/QueueProcessor.js";const u=4;class c extends o{constructor(e){super(e),this.type="feature",this.mode="on-demand",this._adapter=a(e.serviceInfo),this._queue=new n({concurrency:8,process:async e=>{if(s(e),null!=e.tile){const t=e.tile.key.id,{signal:r}=e,s=has("esri-tiles-debug")?{tile:t.replaceAll("/","."),depth:e.depth}:void 0,i=await this._adapter.executeQuery(e.query,{signal:r,query:{...s,...this._schema?.customParameters}});return i.level=e.tile.key.level,i}return this._adapter.executeQuery(e.query,{...e,query:this._schema?.customParameters})}}),this._patchQueue=new n({concurrency:8,process:async e=>{if(s(e),null!=e.tile){const t=e.tile.key.id,{signal:r}=e,s=has("esri-tiles-debug")?{tile:t.replaceAll("/","."),depth:e.depth}:void 0,i=await this._adapter.executeQuery(e.query,{signal:r,query:{...s,...this._schema?.customParameters}});return i.level=e.tile.key.level,i}return this._adapter.executeQuery(e.query,{...e,query:this._schema?.customParameters})}})}destroy(){super.destroy(),this._adapter.destroy(),this._queue.destroy(),this._patchQueue.destroy()}enqueueQuery(e,t){return this.updatingHandles.addPromise(this._queue.push(e,t))}enqueuePatchQuery(e,t){return this.updatingHandles.addPromise(this._patchQueue.push(e,t))}get maxRecordCountFactor(){const{query:e}=this._serviceInfo.capabilities;return e.supportsMaxRecordCountFactor?u:null}get maxPageSize(){const{query:e}=this._serviceInfo.capabilities;return(e.maxRecordCount??8e3)*(this.maxRecordCountFactor??1)}get pageSize(){return Math.min(8e3,this.maxPageSize)}enableEvent(e,t){}subscribe(e,s){const a=super.subscribe(e,s);return this._fetchDataTile(e).catch((s=>{i(s)||r.getLogger("esri.views.2d.layers.features.sources.BaseFeatureSource").error(new t("mapview-query-error","Encountered error when fetching tile",{tile:e,error:s}))})),a}unsubscribe(e){super.unsubscribe(e)}readers(e){return this._subscriptions.get(e).readers()}async query(e,t={}){const r=t.query??{};return this._adapter.executeQuery(e,{...t,query:{...r,...this._schema?.customParameters}})}async queryLastEditDate(){const t=this._serviceInfo.source,r={...t.query,f:"json"};return(await e(t.path,{query:r,responseType:"json"})).data.editingInfo.lastEditDate}createTileQuery(e,t={}){const r=this._serviceInfo.geometryType,s=this.createQuery(t);s.quantizationParameters=t.quantizationParameters??e.getQuantizationParameters(),s.resultType="tile",s.geometry=e.extent,this._serviceInfo.capabilities.query.supportsQuantization?"esriGeometryPolyline"===r&&(s.maxAllowableOffset=e.resolution*has("feature-polyline-generalization-factor")):"esriGeometryPolyline"!==r&&"esriGeometryPolygon"!==r||(s.maxAllowableOffset=e.resolution,"esriGeometryPolyline"===r&&(s.maxAllowableOffset*=has("feature-polyline-generalization-factor")));const i=this._serviceInfo.capabilities.query;return s.defaultSpatialReferenceEnabled=i.supportsDefaultSpatialReference,s.compactGeometryEnabled=i.supportsCompactGeometry,s}async _executePatchQuery(e,t,r,s){const i=t.clone();i.outFields=[this._serviceInfo.objectIdField,...r],i.returnCentroid=!1,i.returnGeometry=!1;const a=null!=i.start?i.start/8e3:0,o=s.signal;return await this.enqueuePatchQuery({tile:e,query:i,signal:o,depth:a})}async _resend(e,t){const{query:r,message:i}=e,a=null!=r.outFields?r.outFields:[],o=this._queryInfo.outFields,n=o.filter((e=>!a.includes(e)));if(null!=i.addOrUpdate)if(n.length)try{const e=this._subscriptions.get(i.id).tile,a=await this._executePatchQuery(e,r,n,t);s(t),r.outFields=o,i.addOrUpdate.joinAttributes(a),this._onMessage({...i,end:i.end,type:"append"})}catch(u){}else this._onMessage({...i,type:"append"});else this._onMessage({...i,type:"append"})}async _resendSubscription(e){if(has("esri-2d-update-debug")&&console.debug(e.tile.id,"Resend Subscription"),e.empty)return this._onMessage({id:e.tile.id,addOrUpdate:null,end:!1,type:"append"});const t=e.signal;for(const r of e.requests.done)await this._resend(r,{signal:t});return null!=e.edits?this._onMessage(e.edits):void 0}async resend(){const e=Array.from(this._subscriptions.values());await Promise.all(e.map((e=>this._resendSubscription(e))))}}export{c as BaseFeatureSource};
