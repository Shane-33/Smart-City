/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
import{_ as e}from"../../../../../chunks/tslib.es6.js";import"../../../../../core/has.js";import"../../../../../core/Logger.js";import"../../../../../core/accessorSupport/ensureType.js";import"../../../../../core/arrayUtils.js";import"../../../../../core/Error.js";import{subclass as t}from"../../../../../core/accessorSupport/decorators/subclass.js";import{diff as s}from"../../../../../core/accessorSupport/diffUtils.js";import{calculateHeatmapIntensityInfoReaders as r}from"../../../../../renderers/support/heatmapUtils.js";import{tileSize as i}from"../../../engine/webgl/definitions.js";import o from"./BaseProcessor.js";import{getPow2NeighborKey as a}from"../support/tileUtils.js";class n{constructor(e,t){this.offset=e,this.extent=t}}function d(e){const t=e.key,s=new Map,r=256,o=i,d=e.tileInfoView.tileInfo.isWrappable;return s.set(a(t,-1,-1,d).id,new n([-o,-o],[o-r,o-r,o,o])),s.set(a(t,0,-1,d).id,new n([0,-o],[0,o-r,o,o])),s.set(a(t,1,-1,d).id,new n([o,-o],[0,o-r,r,o])),s.set(a(t,-1,0,d).id,new n([-o,0],[o-r,0,o,o])),s.set(a(t,1,0,d).id,new n([o,0],[0,0,r,o])),s.set(a(t,-1,1,d).id,new n([-o,o],[o-r,0,o,r])),s.set(a(t,0,1,d).id,new n([0,o],[0,0,o,r])),s.set(a(t,1,1,d).id,new n([o,o],[0,0,r,r])),s}let l=class extends o{constructor(){super(...arguments),this.type="heatmap",this._tileKeyToFeatureSets=new Map}initialize(){this.addHandles([this.tileStore.on("update",this.onTileUpdate.bind(this))])}async update(e,t){const r=t.schema.processors[0];if("heatmap"!==r.type)return;s(this._schema,r)&&(e.mesh=!0,this._schema=r)}onTileUpdate(e){for(const t of e.removed)this._tileKeyToFeatureSets.delete(t.key.id)}onTileClear(e){const t={clear:!0};return this._tileKeyToFeatureSets.delete(e.key.id),this.remoteClient.invoke("tileRenderer.onTileData",{tileKey:e.id,data:t})}async onTileMessage(e,t,s){this._tileKeyToFeatureSets.has(e.key.id)||this._tileKeyToFeatureSets.set(e.key.id,new Map);const i=this._tileKeyToFeatureSets.get(e.key.id);if(i&&null!=t.addOrUpdate&&t.addOrUpdate.hasFeatures&&i.set(t.addOrUpdate.instance,t),t.end){const t=[],i=d(e);this._tileKeyToFeatureSets.forEach(((s,r)=>{if(r===e.key.id)s.forEach((({addOrUpdate:e})=>{e&&t.push(e)}));else if(i.has(r)){const e=i.get(r),[o,a]=e.offset;s.forEach((({addOrUpdate:e})=>{if(e){const s=e.transform(o,a,1,1);t.push(s)}}))}}));const o=r(t,this._schema.mesh,512,512),a={tileKey:e.key.id,intensityInfo:o},n=[o.matrix];return this.remoteClient.invoke("tileRenderer.onTileData",a,{...s,transferList:n})}}onTileError(e,t,s){return this.remoteClient.invoke("tileRenderer.onTileError",{tileKey:e.id,error:t},s)}};l=e([t("esri.views.2d.layers.features.processors.HeatmapProcessor")],l);const p=l;export{p as default};
