/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
import"../../../../../geometry.js";import e from"../../../../../core/Evented.js";import has from"../../../../../core/has.js";import{diff as t,hasDiff as s}from"../../../../../core/accessorSupport/diffUtils.js";import{GeohashTree as r}from"../../../../../geohash/GeohashTree.js";import{setGeohashBuf as i,setGeohashXY as o}from"../../../../../geohash/geohashUtils.js";import{create as a}from"../../../../../geometry/support/aaBoundingBox.js";import{earth as h}from"../../../../../geometry/support/Ellipsoid.js";import{getInfo as l}from"../../../../../geometry/support/spatialReferenceUtils.js";import{getBoundsOptimizedGeometry as n,quantizeX as u,quantizeY as d,convertFromPolygon as g}from"../../../../../layers/graphics/featureConversionUtils.js";import{OptimizedFeatureWithGeometry as c,OptimizedFeature as f}from"../../../../../layers/graphics/OptimizedFeature.js";import p from"../../../../../layers/graphics/OptimizedGeometry.js";import{checkProjectionSupport as _,project as m}from"../../../../../layers/graphics/data/projectionSupport.js";import y from"../../../../../layers/support/FieldsIndex.js";import{tileSize as I}from"../../../engine/webgl/definitions.js";import{displayIdTexelMask as b}from"../../../engine/webgl/DisplayId.js";import{featureAdapter as v}from"../FeatureStore2D.js";import{Store2D as R}from"../Store2D.js";import{FeatureSetReaderJSON as x}from"./FeatureSetReaderJSON.js";import M from"../../../../../geometry/SpatialReference.js";import j from"../../../../../geometry/Polygon.js";import F from"../../../../../geometry/Extent.js";const C=12,L=64,w=1,B=a();class S extends c{constructor(e,t,s,r,i){super(new p([],[t,s]),r,null,e),this.geohashBoundsInfo=i}get count(){return this.attributes.cluster_count}static create(e,t,s,r,i,o,a,h){const l=new S(t,s,r,o,a);return l.displayId=e.createDisplayId(!0),l.referenceId=h,l.tileLevel=i,l}update(e,t,s,r,i,o){return this.geometry.coords[0]=e,this.geometry.coords[1]=t,this.tileLevel=s,this.attributes=r,this.geohashBoundsInfo=i,this.referenceId=null,this.referenceId=o,this}toJSON(){return{attributes:{...this.attributes,aggregateId:this.objectId,referenceId:1===this.attributes.cluster_count?this.referenceId:null},geometry:{x:this.geometry.coords[0],y:this.geometry.coords[1]}}}}function T(e){return 57.29577951308232*e}class V extends R{constructor(t,s,r,i){super(t,r),this.type="cluster",this.events=new e,this.objectIdField="aggregateId",this.featureAdapter=v,this._geohashLevel=0,this._tileLevel=0,this._aggregateValueRanges={},this._aggregateValueRangesChanged=!1,this._geohashBuf=[],this._clusters=new Map,this._tiles=new Map,this._serviceInfo=i,this.geometryInfo=t.geometryInfo,this._spatialReference=s,this._projectionSupportCheck=_(s,M.WGS84),this._bitsets.geohash=r.getBitset(r.createBitset()),this._bitsets.inserted=r.getBitset(r.createBitset())}destroy(){this._tree.destroy()}get featureSpatialReference(){return this._spatialReference}get fields(){return this._fields}async updateSchema(e,i){const o=this._schema;try{await super.updateSchema(e,i),await this._projectionSupportCheck}catch(h){}this._fields=[...this._schema.params.fields,{name:"referenceId",alias:"referenceId",type:"esriFieldTypeInteger"}];!!this._fields.some((e=>"cluster_count"===e.name))||this._fields.push({name:"cluster_count",alias:"cluster_count",type:"esriFieldTypeInteger"}),this._fieldsIndex=new y(this._fields);const a=t(o,i);i&&(null!=a||e.source||e.storage.filters)?((s(a,"params.fields")||!this._tree||e.source)&&(this._tree&&this._tree.destroy(),this._tree=new r(this._statisticFields,this._serviceInfo),this._rebuildTree(),has("esri-2d-update-debug")&&console.debug("Aggregate mesh needs update due to tree changing")),has("esri-2d-update-debug")&&console.debug("Applying Update - ClusterStore:",a),e.targets[i.name]=!0,e.mesh=!1,this._aggregateValueRanges={}):o&&(e.mesh=!0)}clear(){this._rebuildTree()}sweepFeatures(e,t){this._bitsets.inserted.forEachSet((s=>{if(!e.has(s)){const e=t.lookupByDisplayIdUnsafe(s);this._remove(e)}}))}sweepAggregates(e,t,s){this._clusters.forEach(((r,i)=>{r&&r.tileLevel!==s&&(e.releaseDisplayId(r.displayId),t.unsetAttributeData(r.displayId),this._clusters.delete(i))}))}onTileData(e,t,s,r,i,o=!0){if(!this._schema||null==t.addOrUpdate)return t;this.events.emit("changed");const a=this._getTransforms(e,this._spatialReference);{const e=t.addOrUpdate.getCursor();for(;e.next();)this._update(e,r)}if(t.status.mesh||!o)return t;const h=new Array,l=this._schema.params.clusterRadius;this._getClustersForTile(h,e,l,s,a),t.addOrUpdate=x.fromOptimizedFeatures(h,{fields:this.fields,fieldsIndex:this._fieldsIndex,geometryType:"esriGeometryPoint",objectIdField:this.objectIdField}),t.addOrUpdate.attachStorage(s),t.clear=!0,t.end=!0;{const r=t.addOrUpdate.getCursor();for(;r.next();){const t=r.getDisplayId();this._bitsets.computed.unset(t),this.setComputedAttributes(s,r,t,e.scale,i)}}return this._aggregateValueRangesChanged&&t.end&&(this.events.emit("valueRangesChanged",{valueRanges:this._aggregateValueRanges}),this._aggregateValueRangesChanged=!1),t}onTileUpdate({added:e,removed:t}){if(e.length){const t=e[0].level;this._tileLevel=t,this._setGeohashLevel(t)}if(!this._schema)return;const s=this._schema.params.clusterRadius;t.forEach((e=>{this._tiles.delete(e.key.id),this._markTileClustersForDeletion(e,s)}))}getAggregate(e){for(const t of this._clusters.values())if((t?.displayId&b)==(e&b))return t.toJSON();return null}getAggregates(){const e=[];for(const t of this._clusters.values())t?.tileLevel===this._tileLevel&&e.push(t.toJSON());return e}getDisplayId(e){const t=this._clusters.get(e);return t?t.displayId:null}getFeatureDisplayIdsForAggregate(e){const t=this._clusters.get(e);return t?this._tree.getRegionDisplayIds(t.geohashBoundsInfo):[]}getDisplayIdForReferenceId(e){for(const t of this._clusters.values())if(t?.referenceId===e)return t.displayId;return null}getAggregateValueRanges(){return this._aggregateValueRanges}forEach(e){this._clusters.forEach((t=>{if(!t)return;const s=t.toJSON(),r=x.fromFeatures([s],{objectIdField:this.objectIdField,globalIdField:null,geometryType:this.geometryInfo.geometryType,fields:this.fields,fieldsIndex:this._fieldsIndex}).getCursor();r.next(),e(r)}))}forEachInBounds(e,t){}forEachBounds(e,t){const{hasM:s,hasZ:r}=this.geometryInfo;for(const i of e){const e=n(B,i.readGeometry(),r,s);null!=e&&t(e)}}size(){let e=0;return this.forEach((t=>e++)),e}_rebuildTree(){this._bitsets.computed.clear(),this._bitsets.inserted.clear(),this._tree&&this._tree.clear()}_remove(e){const t=e.getDisplayId(),s=e.getXHydrated(),r=e.getYHydrated(),i=this._geohashBuf[2*t],o=this._geohashBuf[2*t+1];this._bitsets.inserted.has(t)&&(this._bitsets.inserted.unset(t),this._tree.removeCursor(e,s,r,i,o,this._geohashLevel))}_update(e,t){const s=e.getDisplayId(),r=this._bitsets.inserted,i=t.isVisible(s);if(i===r.has(s))return;if(!i)return void this._remove(e);const o=e.getXHydrated(),a=e.getYHydrated();if(!this._setGeohash(s,o,a))return;const h=this._geohashBuf[2*s],l=this._geohashBuf[2*s+1];this._tree.insertCursor(e,s,o,a,h,l,this._geohashLevel),r.set(s)}_setGeohash(e,t,s){if(this._bitsets.geohash.has(e))return!0;const r=this._geohashBuf;if(this._spatialReference.isWebMercator){const o=T(t/h.radius),a=o-360*Math.floor((o+180)/360),l=T(Math.PI/2-2*Math.atan(Math.exp(-s/h.radius)));i(r,e,l,a,C)}else{const o=m({x:t,y:s},this._spatialReference,M.WGS84);if(!o)return!1;i(r,e,o.y,o.x,C)}return this._bitsets.geohash.set(e),!0}_getClustersForTile(e,t,s,r,i,o=!0){const a=this._schema.params.clusterPixelBuffer,h=2*s,l=Math.ceil(2**t.key.level*I/h)+1,n=Math.ceil(a/h)+0,g=Math.ceil(I/h),{row:c,col:p}=t.key,_=p*I,m=c*I,y=Math.floor(_/h)-n,b=Math.floor(m/h)-n,v=y+g+2*n,R=b+g+2*n,x=t.tileInfoView.getLODInfoAt(t.key.level);for(let I=y;I<=v;I++)for(let s=b;s<=R;s++){let a=I;x.wrap&&(a=I<0?I+l:I%l);const h=x.wrap&&I<0,n=x.wrap&&I%l!==I,g=this._lookupCluster(r,x,t.key.level,a,s,t);if(null!=g){let t=null;if(i&&(t=h?i.left:n?i.right:i.tile),o&&null==t)continue;if(!g.count)continue;if(null!=t&&o){const s=g.geometry.clone();let r=g.attributes;s.coords[0]=u(t,s.coords[0]),s.coords[1]=d(t,s.coords[1]),1===g.count&&null!=g.referenceId&&(r={...g.attributes,referenceId:g.referenceId});const i=new f(s,r);i.displayId=g.displayId,e.push(i)}}}}_getGeohashLevel(e){return Math.min(Math.ceil(e/2+2),C)}_setGeohashLevel(e){const t=this._getGeohashLevel(e),s=(Math.floor(t/w)+1)*w-1;if(this._geohashLevel!==s)return this._geohashLevel=s,this._rebuildTree(),void this._bitsets.geohash.clear()}_getTransforms(e,t){const s={originPosition:"upperLeft",scale:[e.resolution,e.resolution],translate:[e.bounds[0],e.bounds[3]]},r=l(t);if(!r)return{tile:s,left:null,right:null};const[i,o]=r.valid;return{tile:s,left:{...s,translate:[o,e.bounds[3]]},right:{...s,translate:[i-o+e.bounds[0],e.bounds[3]]}}}_getClusterId(e,t,s){return(15&e)<<28|(16383&t)<<14|16383&s}_markForDeletion(e,t,s){const r=this._getClusterId(e,t,s);this._clusters.delete(r)}_getClusterBounds(e,t,s){const r=this._schema.params.clusterRadius,i=2*r;let o=s%2?t*i:t*i-r;const a=s*i;let h=o+i;const l=a-i,n=2**e.level*I;e.wrap&&o<0&&(o=0),e.wrap&&h>n&&(h=n);const u=o/I,d=a/I,g=h/I,c=l/I;return[e.getXForColumn(u),e.getYForRow(d),e.getXForColumn(g),e.getYForRow(c)]}_getGeohash(e,t,s){const r={geohashX:0,geohashY:0};return o(r,t,e,s),r}_getGeohashBounds(e,t){const s=this._getGeohashLevel(e.key.level);if(this._spatialReference.isWebMercator){const[e,r,i,a]=t,l={x:e,y:r},n={x:i,y:a};let u=0,d=0,g=0,c=0;{const e=T(l.x/h.radius);u=e-360*Math.floor((e+180)/360),d=T(Math.PI/2-2*Math.atan(Math.exp(-l.y/h.radius)))}{const e=T(n.x/h.radius);g=e-360*Math.floor((e+180)/360),c=T(Math.PI/2-2*Math.atan(Math.exp(-n.y/h.radius)))}const f={geohashX:0,geohashY:0},p={geohashX:0,geohashY:0};o(f,d,u,s),o(p,c,g,s);return{bounds:[e,r,i,a],geohashBounds:{xLL:f.geohashX,yLL:f.geohashY,xTR:p.geohashX,yTR:p.geohashY},level:s}}const r=j.fromExtent(F.fromBounds(t,this._spatialReference)),i=m(r,this._spatialReference,M.WGS84,{densificationStep:e.resolution*L});if(!i)return null;const a=g(new p,i,!1,!1),l=a.coords.filter(((e,t)=>!(t%2))),n=a.coords.filter(((e,t)=>t%2)),u=Math.min(...l),d=Math.min(...n),c=Math.max(...l),f=Math.max(...n),_=this._getGeohash(u,d,s),y=this._getGeohash(c,f,s);return{bounds:t,geohashBounds:{xLL:_.geohashX,yLL:_.geohashY,xTR:y.geohashX,yTR:y.geohashY},level:s}}_lookupCluster(e,t,s,r,i,o){const a=this._getClusterId(s,r,i),h=this._clusters.get(a),l=this._getClusterBounds(t,r,i),n=this._getGeohashBounds(o,l);if(null==n)return null;const u=this._tree.getRegionStatistics(n),{count:d,xTotal:g,yTotal:c,referenceId:f}=u,p=d?g/d:0,_=d?c/d:0;if(0===d)return this._clusters.set(a,null),null;const m={cluster_count:d,...u.attributes},y=null!=h?h.update(p,_,s,m,n,f):S.create(e,a,p,_,s,m,n,f);if(0===d){const[e,t,s,r]=l;y.geometry.coords[0]=(e+s)/2,y.geometry.coords[1]=(t+r)/2}return this._clusters.set(a,y),this._updateAggregateValueRangeForCluster(y,y.tileLevel),y}_updateAggregateValueRangeForCluster(e,t){const s=this._aggregateValueRanges[t]||{minValue:1/0,maxValue:0},r=s.minValue,i=s.maxValue;s.minValue=Math.min(r,e.count),s.maxValue=Math.max(i,e.count),this._aggregateValueRanges[t]=s,r===s.minValue&&i===s.maxValue||(this._aggregateValueRangesChanged=!0)}_markTileClustersForDeletion(e,t){const s=2*t,r=Math.ceil(I/s),{row:i,col:o}=e.key,a=o*I,h=i*I,l=Math.floor(a/s),n=Math.floor(h/s);for(let u=l;u<l+r;u++)for(let t=n;t<n+r;t++)this._markForDeletion(e.key.level,u,t)}}export{S as ClusterInfo,V as ClusterStore};
