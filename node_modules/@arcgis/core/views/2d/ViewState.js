/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
import{_ as t}from"../../chunks/tslib.es6.js";import"../../geometry.js";import s from"../../Viewpoint.js";import{JSONSupport as e}from"../../core/JSONSupport.js";import{property as i}from"../../core/accessorSupport/decorators/property.js";import"../../core/accessorSupport/ensureType.js";import"../../core/arrayUtils.js";import"../../core/has.js";import{subclass as o}from"../../core/accessorSupport/decorators/subclass.js";import{t as r}from"../../chunks/common.js";import{a as n,r as a,t as p,i as h}from"../../chunks/mat2d.js";import{c}from"../../chunks/mat2df32.js";import{c as m}from"../../chunks/mat2df64.js";import{s as l,g as f,h as u,r as v,m as w}from"../../chunks/mat3.js";import{c as d}from"../../chunks/mat3f32.js";import{j,t as y}from"../../chunks/vec2.js";import{f as R}from"../../chunks/vec2f32.js";import{a as x}from"../../chunks/vec2f64.js";import{isVec2 as _}from"../../core/libs/gl-matrix-2/types/vec2.js";import{getClosestDenormalizedXToReference as z}from"../../geometry/support/normalizeUtils.js";import{copy as g,getMatrix as S,getResolution as k,getExtent as M,getTransform as N,getTransformNoRotation as T,getWorldScreenWidth as D}from"./viewpointUtils.js";import V from"../../geometry/Extent.js";import b from"../../geometry/Point.js";var U;const G=[0,0];let O=U=class extends e{constructor(t){super(t),this._viewpoint2D={center:x(),rotation:0,scale:0,spatialReference:void 0},this.center=[0,0],this.extent=new V,this.id=0,this.inverseTransform=m(),this.resolution=0,this.rotation=0,this.scale=0,this.transform=m(),this.transformNoRotation=m(),this.displayMat3=d(),this.displayViewMat3=d(),this.viewMat3=d(),this.viewMat2d=c(),this.worldScreenWidth=0,this.size=[0,0]}set pixelRatio(t){this._set("pixelRatio",t),this._update()}set size(t){this._set("size",t),this._update()}set viewpoint(t){if(t){const s=this._viewpoint2D,e=t.targetGeometry;s.center[0]=e.x,s.center[1]=e.y,s.rotation=t.rotation,s.scale=t.scale,s.spatialReference=e.spatialReference}this._update()}copy(t){const s=this.size,e=this.viewpoint;return e&&s?(this.viewpoint=g(e,t.viewpoint),this._set("size",j(s,t.size))):(this.viewpoint=t.viewpoint.clone(),this._set("size",[t.size[0],t.size[1]])),this._set("pixelRatio",t.pixelRatio),this}clone(){return new U({size:this.size,viewpoint:this.viewpoint.clone(),pixelRatio:this.pixelRatio})}toMap(t,s,e){return _(s)?y(t,s,this.inverseTransform):(G[0]=s,G[1]=e,y(t,G,this.inverseTransform))}toScreen(t,s,e){return _(s)?y(t,s,this.transform):(G[0]=s,G[1]=e,y(t,G,this.transform))}toScreenNoRotation(t,s,e){return _(s)?y(t,s,this.transformNoRotation):(G[0]=s,G[1]=e,y(t,G,this.transformNoRotation))}toScreenClosest(t,s,e){_(s)?(G[0]=s[0],G[1]=s[1]):(G[0]=s,G[1]=e);const[i]=G,{center:o,extent:r,spatialReference:n,transform:a}=this;return(i<r.xmin||i>r.xmax)&&(G[0]=z(i,o[0],n)),y(t,G,a)}getScreenTransform(t,s){const{center:e}=this._viewpoint2D,i=this._get("pixelRatio")||1,o=this._get("size");return S(t,e,o,s,0,i),t}_update(){const{center:t,spatialReference:e,scale:i,rotation:o}=this._viewpoint2D,c=this._get("pixelRatio")||1,m=this._get("size"),d=new s({targetGeometry:new b(t[0],t[1],e),scale:i,rotation:o});if(this._set("viewpoint",d),!m||!e||!i)return;this.resolution=k(d),this.rotation=o,this.scale=i,this.spatialReference=e,j(this.center,t);const y=0!==m[0]?2/m[0]:0,x=0!==m[1]?-2/m[1]:0;l(this.displayMat3,y,0,0,0,x,0,-1,1,1);const _=f(this.viewMat3),z=R(m[0]/2,m[1]/2),g=R(-m[0]/2,-m[1]/2),S=r(o);u(_,_,z),v(_,_,S),u(_,_,g),w(this.displayViewMat3,this.displayMat3,_);const V=n(this.viewMat2d,z);return a(V,V,S),p(V,V,g),M(this.extent,d,m),N(this.transform,d,m,c),h(this.inverseTransform,this.transform),T(this.transformNoRotation,d,m,c),this.worldScreenWidth=D(this.spatialReference,this.resolution),this._set("id",this.id+1),this}};t([i({readOnly:!0})],O.prototype,"id",void 0),t([i({value:1,json:{write:!0}})],O.prototype,"pixelRatio",null),t([i({json:{write:!0}})],O.prototype,"size",null),t([i()],O.prototype,"spatialReference",void 0),t([i({type:s,json:{write:!0}})],O.prototype,"viewpoint",null),O=U=t([o("esri.views.2d.ViewState")],O);const W=O;export{W as default};
