/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
import{minPriority as e}from"../../../../core/MemCache.js";import{throwIfAborted as t}from"../../../../core/promiseUtils.js";import{f as o}from"../../../../chunks/mat3f32.js";import{create as i}from"../../../../geometry/support/aaBoundingRect.js";import{TileHandler as s}from"./TileHandler.js";import{VectorTile as r}from"./VectorTile.js";import{declutterSingleTile as n}from"./decluttering/jobsUtil.js";import l from"../../tiling/TileInfoViewPOT.js";import a from"../../tiling/TileKey.js";class g extends s{constructor(e,t,o,i){super(e,t,o),this._memCache=i,this._ongoingTileRequests=new Map,this._ongoingRequestToController=new Map,this._tileInfoView=new l(e.tileInfo,e.fullExtent)}destroy(){super.destroy(),this._ongoingRequestToController.forEach((e=>e.abort())),this._ongoingRequestToController.clear(),this._ongoingTileRequests.clear()}async getVectorTile(s,l,g,h){const u=new a(s,l,g,0);let m=this._memCache.get(u.id);if(null!=m)return m.retain(),m;const c=await this._getVectorTileData(u);if(t(h),!this._layer)return null;if(m=this._memCache.get(u.id),null!=m)return m.retain(),m;const T=this._layer.tileInfo.getTileBounds(i(),u),_=this._tileInfoView.getTileResolution(s);return m=new r(u,_,T[0],T[3],512,512,this._styleRepository,this._memCache),c?(m.setData(c),m.retain(),this._memCache.put(u.id,m,m.memoryUsed,e)):m.setData(null),m.neededForCoverage=!0,m.transforms.tileUnitsToPixels=o(1/8,0,0,0,1/8,0,0,0,1),n(m),m}_getVectorTileData(e){const t=e.id;if(this._ongoingTileRequests.has(t))return this._ongoingTileRequests.get(t);const o=new AbortController,i={signal:o.signal},s=this._getParsedVectorTileData(e,i).then((e=>(this._ongoingTileRequests.delete(t),this._ongoingRequestToController.delete(t),e))).catch((()=>(this._ongoingTileRequests.delete(t),this._ongoingRequestToController.delete(t),null)));return this._ongoingTileRequests.set(t,s),this._ongoingRequestToController.set(t,o),s}_getParsedVectorTileData(e,t){return this.fetchTileData(e,t).then((o=>this.parseTileData({key:e,data:o},t)))}}export{g as default};
