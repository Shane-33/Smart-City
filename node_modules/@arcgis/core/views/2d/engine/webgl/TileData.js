/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
import{ReallocGrowthFactor as e}from"../../../../core/arrayUtils.js";import{WGLSymbologyType as t}from"./enums.js";import r from"./MemoryRequirements.js";import s from"./TileBufferData.js";import i from"./TileDisplayData.js";import{allocateTypedArrayBuffer as o,copyMeshData as a,forEachGeometryType as n}from"./Utils.js";import f from"./WGLDisplayRecord.js";import{DisplayRecordReader as l}from"./cpuMapped/DisplayRecordReader.js";import{VertexBuffers as u}from"./mesh/VertexBuffer.js";import{VertexVectors as c}from"./mesh/VertexVector.js";import m from"./util/Writer.js";const d=new r,p=new r,D=5;function h(e,t){const r={};for(const s in e){const i={data:o(t,e[s]),stride:e[s]};r[s]=i}return r}function x(e){return[e.fill||{},e.line||{},e.icon||{},e.text||{},e.label||{}]}function y(e){const t=[[],[],[],[],[]],r=e;for(const s of r)for(const e of s.displayRecords)t[e.geometryType].push(e);return t}class B{constructor(){this.tileDisplayData=null,this.tileBufferData=null}reshuffle(){if(d.reset(),!this.tileDisplayData)return;const t=y(this.tileDisplayData.displayObjects);for(const e of t)for(const t of e)t&&d.needMore(t.geometryType,t.meshData?t.meshData.vertexCount:t.vertexCount,t.meshData?t.meshData.indexData.length:t.indexCount);const r=t.length,i=new s;for(let s=0;s<r;++s){i.geometries[s].indexBuffer=new Uint32Array(Math.round(e*d.indicesFor(s)));const t=[],r=this.tileBufferData?.geometries[s].vertexBuffer;if(!r)continue;for(const e in r)t.push(r[e].stride);const a=B._computeVertexAlignment(t),n=Math.round(e*d.verticesFor(s)),f=B._align(n,a);for(const e in r){const t=r[e].stride;i.geometries[s].vertexBuffer[e]={stride:t,data:o(f,t)}}}p.reset(),this.tileDisplayData.displayList?.clear();for(let e=0;e<r;++e){const r=t[e];for(const t of r){if(t.meshData)t.writeMeshDataToBuffers(p.verticesFor(e),i.geometries[e].vertexBuffer,p.indicesFor(e),i.geometries[e].indexBuffer),t.meshData=null;else{const r=this.tileBufferData?.geometries[e];if(r){const s=r.vertexBuffer,o=r.indexBuffer,n=i.geometries[e].vertexBuffer,f=i.geometries[e].indexBuffer,l=p.verticesFor(e),u=p.indicesFor(e);a(l,u,n,f,t,s,o),t.vertexFrom=l,t.indexFrom=u}}p.needMore(e,t.vertexCount,t.indexCount)}}const{displayList:n,displayObjects:f}=this.tileDisplayData;if(n)for(const e of f)n.addToList(e.displayRecords);this.tileBufferData=i}getStrides(){const e=[],t=this.tileBufferData?.geometries;if(!t)return e;for(let r=0;r<t.length;++r){const s=t[r];e[r]={};for(const t in s.vertexBuffer)e[r][t]=s.vertexBuffer[t].stride}return e}clone(){const e=new B;return e.tileBufferData=this.tileBufferData?.clone()??null,e.tileDisplayData=this.tileDisplayData?.clone()??null,e}_guessSize(){const e=this.tileDisplayData?.displayObjects??[],t=Math.min(e.length,4),r=12,s=40;let i=0;for(let o=0;o<t;o++)i=Math.max(i,e[o].displayRecords.length);return 2*(e.length*r+e.length*i*s)}serialize(){const e=this.tileBufferData.serialize(),t=this.tileBufferData.getBuffers(),r=this.tileDisplayData.serialize(new m(Int32Array,this._guessSize())).buffer();return t.push(r),{result:{displayData:r,bufferData:e},transferList:t}}static fromVertexData(e,r){const s={},i=new Map;for(const t of r)i.set(t.id,t);return n((r=>{const o=e.data[r];if(null!=o){const e=l.from(o.records).getCursor();for(;e.next();){const t=e.id,s=e.materialKey,o=e.indexFrom,a=e.indexCount,n=e.vertexFrom,l=e.vertexCount,u=i.get(t),c=new f(t,r,s);c.indexFrom=o,c.indexCount=a,c.vertexFrom=n,c.vertexCount=l,u.displayRecords.push(c)}s[r]=u.fromVertexData(o,r)}else s[r]=new c(r,0,t.DEFAULT).intoBuffers()})),B.fromMeshData({displayObjects:r,vertexBuffersMap:s})}static fromMeshData(e){const t=new B,r=new i,o=new s;r.displayObjects=e.displayObjects;for(const s in e.vertexBuffersMap){const t=s,r=e.vertexBuffersMap[t];o.geometries[t].indexBuffer=r.indexBuffer,o.geometries[t].vertexBuffer=r.namedBuffers}return t.tileDisplayData=r,t.tileBufferData=o,t}static bind(e,t){const r=new B;return r.tileDisplayData=e,r.tileBufferData=t,r}static create(e,t){const r=new B;r.tileDisplayData=new i,r.tileDisplayData.displayObjects=e;const o=[0,0,0,0,0],a=[0,0,0,0,0],n=[[],[],[],[],[]];for(const s of e)for(const e of s.displayRecords)n[e.geometryType].push(e),o[e.geometryType]+=e.meshData.vertexCount,a[e.geometryType]+=e.meshData.indexData.length;const l=new s,u=x(t);for(let s=0;s<D;s++){const e=new Uint32Array(a[s]),t=h(u[s],o[s]);f.writeAllMeshDataToBuffers(n[s],t,e),l.geometries[s]={indexBuffer:e,vertexBuffer:t}}return r.tileBufferData=l,r}static _align(e,t){const r=e%t;return 0===r?e:e+(t-r)}static _computeVertexAlignment(e){let t=!1,r=!1;for(const s of e)s%4==2?t=!0:s%4!=0&&(r=!0);return r?4:t?2:1}}export{B as TileData};
