/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
import{GeometryCursor as e}from"../../../../../../geometry/GeometryCursor.js";import{thinLineHalfWidthThreshold as t}from"../../definitions.js";import{WGLGeometryType as i}from"../../enums.js";import{i1616to32 as r,i8888to32 as s}from"../../number.js";import{LineTessellation as o}from"../../TurboLine.js";import{LineMaterialKey as n,FillMaterialKey as l,hasOutlineFillSymbology as a,hasSimpleSymbology as h}from"../../materialKey/MaterialKey.js";import{clipLinesMarshall as m}from"./templateUtils.js";const d=8,x=16,f=65535,p=r=>class extends r{constructor(...e){super(...e),this.tessellationProperties={},this._tessellationOptions={halfWidth:0,pixelCoordRatio:1,offset:0},this.geometryType=i.LINE}writeGeometry(e,t,i,r){this._writeGeometry(e,t,i,r)}_initializeTessellator(e){const i=n.load(this._materialKey),r=l.load(this._materialKey),s=this._tessellationOptions,h=i.vvSizeFieldStops||i.vvSizeMinMaxValue||i.vvSizeScaleStops||i.vvSizeUnitValue,m=this.tessellationProperties._halfWidth<t&&!e&&!h;this.tessellationProperties.minMaxZoom=this._minMaxZoom,s.wrapDistance=f,s.textured=this._isDashed||this._hasPattern,s.offset=this.tessellationProperties.offset,s.halfWidth=this.tessellationProperties._halfWidth;const d=m?0:1,x=a(r)?v:_;this._lineTessellator=new o(x(this.tessellationProperties,d,d),u(this.tessellationProperties),m)}_write(e,t,i,r){const s="esriGeometryPoint"===t.geometryType;e.recordStart(t.getDisplayId(),this._materialKey,this.geometryType,s),this._writeGeometry(e,t,r,s),e.recordEnd()}_writeGeometry(t,i,r,s){const o=r||e.fromFeatureSetReaderCIM(i);if(!o)return;const n=this._getLines(o,s);null!=n&&this._writeVertices(t,i,n)}_getLines(e,t){return m(e,t?256:16)}_writeVertices(e,t,i){const r=t.getDisplayId(),s=e.vertexCount(),o=this.tessellationProperties,h=this._tessellationOptions;o.out=e,o.id=r,o.indexCount=0,o.vertexCount=0,o.offset=s,h.capType=this._capType,h.joinType=this._joinType;const m=l.load(this._materialKey);this.tessellationProperties.key=a(m)?m:n.load(this._materialKey);for(const{line:n,start:l}of i)h.initialDistance=l%f,this._lineTessellator.tessellate(n,h)}},_=(e,t,i)=>(o,n,l,a,h,m,f,p,_,v,u)=>{const W=r(u,Math.ceil(x*e._halfWidth)),c=s(Math.round(x*f),Math.round(x*p),Math.round(x*_),Math.round(x*v)),y=s(x*h,x*m,0,e._bitset),M=e.out;return M.vertexBounds(o,n,t,i),M.vertexWrite(r(d*o,d*n)),M.vertexWrite(e.id),M.vertexWrite(e._fillColor),M.vertexWrite(c),M.vertexWrite(W),M.vertexWrite(e._tl),M.vertexWrite(e._br),M.vertexWrite(y),M.vertexWrite(r(Math.ceil(x*e._halfReferenceWidth),0)),M.vertexWrite(e.minMaxZoom),M.vertexEnd(),e.offset+e.vertexCount++},v=(e,t,i)=>(o,n,l,a,m,f,p,_,v,u,W)=>{const c=r(x*e._halfWidth,x*e._halfReferenceWidth),y=s(x*p+128,x*_+128,x*v+128,x*u+128),M=e.out,C=e._bitset<<24|e.id;M.vertexBounds(o,n,t,i),M.vertexWrite(r(d*o,d*n)),M.vertexWrite(C),M.vertexWrite(e._fillColor);const P=h(e.key);return P||(M.vertexWrite(0),M.vertexWrite(0)),M.vertexWrite(0),M.vertexWrite(c),M.vertexWrite(y),P||M.vertexWrite(e.minMaxZoom),M.vertexEnd(),e.offset+e.vertexCount++},u=e=>(t,i,r)=>{const s=e.out;s.indexWrite(t),s.indexWrite(i),s.indexWrite(r),e.indexCount+=3};export{p as default};
