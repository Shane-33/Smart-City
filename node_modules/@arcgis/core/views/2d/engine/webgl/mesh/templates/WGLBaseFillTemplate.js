/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
import{WGLGeometryType as e,WGLSymbologyType as t}from"../../enums.js";import{i1616to32 as r}from"../../number.js";import{getStrides as i}from"../../Utils.js";import{FillMaterialKey as s,hasOutlineFillSymbology as o,hasSimpleSymbology as l}from"../../materialKey/MaterialKey.js";import{triangulate as n,triangulateLibtess as m,clipMarshall as a}from"./templateUtils.js";import h from"./WGLLineTemplate.js";const y=100,p=1,x=x=>class extends x{constructor(...t){super(...t),this.forceLibtess=!1,this._bitset=0,this._lineTemplate=null,this.geometryType=e.FILL}_maybeAddLineTemplate(e){this._lineTemplate=h.fromFillOutline(e)}_write(e,t,r,i){const l="esriGeometryPoint"===t.geometryType,n=s.load(this._materialKey);e.recordStart(t.getDisplayId(),this._materialKey,this.geometryType,l),this._writeGeometry(e,t,n,i,l),o(n)&&null!=this._lineTemplate&&this._lineTemplate.writeGeometry(e,t,i,l),e.recordEnd()}_writeGeometry(e,t,r,i,s){const o=this._getGeometry(t,i,s);if(null==o)return;const l=[];if(!(o.maxLength>y)&&!this.forceLibtess&&n(l,o))return void(l.length&&this._writeVertices(e,t,o.coords,o.lengths,r,l));const a=m(o);this._writeVertices(e,t,a,[a.length/2],r)}_writeVertex(e,i,s,o,n,m){const a=r(p*o,p*n);if(e.vertexBounds(o,n,0,0),e.vertexWrite(a),e.vertexWrite(i),s.symbologyType===t.DOT_DENSITY)e.vertexWriteF32(1/Math.abs(m.readGeometryArea()));else{e.vertexWrite(this.fillColor);const t=l(s);t||(e.vertexWrite(this.tl),e.vertexWrite(this.br)),e.vertexWrite(this.aux21),e.vertexWrite(this.aux22),e.vertexWrite(this.aux3),t||e.vertexWrite(this._minMaxZoom)}}_writeVertices(e,t,r,s,o,l){const n=t.getDisplayId(),m=this._bitset<<24|n,a=s.reduce(((e,t)=>e+t)),h=i(o.geometryType,o.symbologyType).geometry/4,y=e.vertexCount();e.vertexEnsureSize(h*a);let p=0;if(l)for(const i of l){const s=r[2*i],l=r[2*i+1];this._writeVertex(e,m,o,s,l,t),p++}else for(let i=0;i<r.length;i+=2){const s=Math.round(r[i]),l=Math.round(r[i+1]);this._writeVertex(e,m,o,s,l,t),p++}e.indexEnsureSize(p);for(let i=0;i<p;i++)e.indexWrite(i+y)}_getGeometry(e,t,r){const i=t?.asOptimized()||e.readGeometryForDisplay();if(!i)return null;return a(i,r?256:8)}};export{x as default};
