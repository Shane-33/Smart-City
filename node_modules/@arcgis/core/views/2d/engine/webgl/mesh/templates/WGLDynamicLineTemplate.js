/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
import{pt2px as t}from"../../../../../../core/screenUtils.js";import{isFeatureValueFn as e}from"../../../../../../symbols/cim/utils.js";import{premultiplyAlphaRGBA as i}from"../../color.js";import{bitsetGenericLockColor as s,bitsetLineScaleDash as r,bitsetGenericConsiderAlphaOnly as o,spritePadding as a,minMaxZoomPrecisionFactor as l}from"../../definitions.js";import{i1616to32 as h}from"../../number.js";import{LineMaterialKey as n}from"../../materialKey/MaterialKey.js";import{getLimitCosine as c,getMinMaxZoom as m}from"./util.js";import p from"./WGLBaseLineTemplate.js";import _ from"./WGLDynamicMeshTemplate.js";import{ok as f}from"../../util/Result.js";class d extends(p(_)){constructor(a,n,m){super(a),this._minMaxZoom=h(Math.round(n*l),Math.round(m*l)),this._cimLineLayer=a;let p=0;e(a.width)||(p=.5*t(a.width));const _=(i,s,r)=>e(a.width)?.5*t(a.width(i,s,r)):p;this._dynamicPropertyMap.set("_halfWidth",_),e(a.cap)?this._dynamicPropertyMap.set("_capType",a.cap):this._capType=a.cap,e(a.join)?this._dynamicPropertyMap.set("_joinType",a.join):this._joinType=a.join;const f=a.color;if(e(f)){const t=(t,e,s)=>i(f(t,e,s));this._dynamicPropertyMap.set("_fillColor",t)}else this._fillColor=f&&i(f)||0;const d=a.miterLimit;if(e(d)){const t=(t,e,i)=>c(d(t,e,i));this._dynamicPropertyMap.set("_miterLimitCosine",t)}else this._miterLimitCosine=c(d);if(null!=a.effects){const t=a.effects;e(t)?this._dynamicPropertyMap.set("_effects",t):this._effects=t}this._scaleFactor=a.scaleFactor||1,this._isDashed=null!=a.dashTemplate;const y=a.colorLocked?s:0,P=a.scaleDash?r:0,u=a.sampleAlphaOnly?o:0;this.tessellationProperties._bitset=y|P|u,this._materialKey=a.materialKey,this._initializeTessellator(!0)}static fromCIMLine(t,e){const[i,s]=m(t.scaleInfo,e);return new d(t,i,s)}bindFeature(t,e,i){const s=t.readLegacyFeature();this._dynamicPropertyMap.forEach(((t,r)=>{this[r]=t(s,e,i)})),this._halfWidth*=this._scaleFactor;const r=this._materialCache,o=(0,this._cimLineLayer.materialHash)(s,e,i),l=r.get(o);let c=null;if(l&&f(l.spriteMosaicItem)&&(c=l.spriteMosaicItem),c){this._hasPattern=!0;const{rect:t,width:e,height:i}=c,s=t.x+a,r=t.y+a,o=s+e,l=r+i;this.tessellationProperties._tl=h(s,r),this.tessellationProperties._br=h(o,l)}else this._hasPattern=!1,this.tessellationProperties._tl=0,this.tessellationProperties._br=0;this.tessellationProperties._fillColor=this._fillColor,this.tessellationProperties._halfWidth=this._halfWidth,this.tessellationProperties.offset=0,this.tessellationProperties._halfReferenceWidth=this.tessellationProperties._halfWidth;const m=n.load(this._materialKey);c&&(m.sdf=c.sdf,m.pattern=!0,m.textureBinding=c.textureBinding),this._materialKey=m.data}}export{d as default};
