/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
import{pt2px as t}from"../../../../../../core/screenUtils.js";import{b as e,c as i,t as r,r as s}from"../../../../../../chunks/mat2d.js";import{c as o}from"../../../../../../chunks/mat2df32.js";import{s as h,t as n}from"../../../../../../chunks/vec2.js";import{f as a,c as x}from"../../../../../../chunks/vec2f32.js";import{GeometryCursor as f}from"../../../../../../geometry/GeometryCursor.js";import{CIMMarkerPlacementHelper as m}from"../../../../../../symbols/cim/placements/CIMMarkerPlacementHelper.js";import{spritePadding as _,tileSize as l,sdfTextureSize as c}from"../../definitions.js";import{WGLGeometryType as d,WGLSymbologyType as v}from"../../enums.js";import{i1616to32 as W}from"../../number.js";import{MarkerMaterialKey as p}from"../../materialKey/MaterialKey.js";const g=3.14159265359/180,u=8,y=y=>class extends y{constructor(...t){super(...t),this.angle=0,this.xOffset=0,this.yOffset=0,this.width=0,this.height=0,this.boundsType="square",this._anchorX=0,this._anchorY=0,this._computedWidth=0,this._computedHeight=0,this._allowBorrowing=!0,this._vertexBoundsScaleX=1,this._vertexBoundsScaleY=1,this.geometryType=d.MARKER}_write(t,e,i,r){const s=e.getDisplayId();t.recordStart(s,this._materialKey,this.geometryType,!0),this._writeGeometry(t,e,s,i,r),t.recordEnd()}_writeGeometry(t,e,i,r,s){if(null!=this._markerPlacement)return this._writePlacedMarkers(t,e,r,s);if(this._allowBorrowing=!0,!s&&"esriGeometryPoint"===e.geometryType){const r=e.getX(),s=e.getY();if(!t.hasAggregates&&t.hasPixelBufferEnabled&&(r<0||r>=513||s<0||s>=513))return;return this._writeVertices(t,i,this._getPos(r,s),r,s)}const o=s?s.asOptimized():"esriGeometryPolygon"===e.geometryType?e.readCentroid():e.readGeometryForDisplay();if(null!=o){if(o.isPoint){const[e,r]=o.coords;if(!t.hasAggregates&&t.hasPixelBufferEnabled&&(e<0||e>=512||r<0||r>=512))return;return this._writeVertices(t,i,this._getPos(e,r),e,r)}o.forEachVertex(((e,r)=>{const s=2*l;e<-s||e>=s||r<-s||r>=s||this._writeVertices(t,i,this._getPos(e,r),e,r)}))}}_writePlacedMarkers(e,i,r,s){const h=s||f.fromFeatureSetReaderCIM(i);if(!h)return;const n=-1,a=m.getPlacement(h,n,this._markerPlacement,t(1),e.tileKey,r.geometryEngine);if(!a)return;this._allowBorrowing="esriGeometryPolygon"!==i.geometryType;const _=i.getDisplayId(),l=x(),c=o(),d=-128,v=640;let W=a.next();for(;null!=W;){const t=W.tx,i=-W.ty;t>=d&&t<=v&&i>=d&&i<=v&&(this._applyTransformation(c,l,-W.getAngle()/g),this._writeVertices(e,_,this._getPos(t,i),t,i)),W=a.next()}}_writeVertices(t,e,i,r,s){const o=p.load(this._materialKey);return o.symbologyType===v.HEATMAP?this._writeHeatmapVertices(t,e,i):this._writeMarkerVertices(t,e,o,i,r,s)}_writeMarkerVertices(t,e,i,r,s,o){const h=i.vvRotation,n=t.vertexCount();let a=this._computedWidth*this._vertexBoundsScaleX,x=this._computedHeight*this._vertexBoundsScaleY;if(this.angle){const t=Math.max(a,x);a=t,x=t}if(h){const t=Math.max(this.xOffset,this.yOffset);a+=t,x+=t}this._allowBorrowing&&t.vertexBounds(s+this.xOffset,o-this.yOffset,a,x),t.vertexWrite(r),t.vertexWrite(this._offsetUpperLeft),t.vertexWrite(this._texUpperLeft),t.vertexWrite(this._bitestAndDistRatio),t.vertexWrite(e),t.vertexWrite(this._fillColor),t.vertexWrite(this._outlineColor),t.vertexWrite(this._sizeOutlineWidth),t.vertexWrite(this._minMaxZoom),t.vertexEnd(),t.vertexWrite(r),t.vertexWrite(this._offsetUpperRight),t.vertexWrite(this._texUpperRight),t.vertexWrite(this._bitestAndDistRatio),t.vertexWrite(e),t.vertexWrite(this._fillColor),t.vertexWrite(this._outlineColor),t.vertexWrite(this._sizeOutlineWidth),t.vertexWrite(this._minMaxZoom),t.vertexEnd(),t.vertexWrite(r),t.vertexWrite(this._offsetBottomLeft),t.vertexWrite(this._texBottomLeft),t.vertexWrite(this._bitestAndDistRatio),t.vertexWrite(e),t.vertexWrite(this._fillColor),t.vertexWrite(this._outlineColor),t.vertexWrite(this._sizeOutlineWidth),t.vertexWrite(this._minMaxZoom),t.vertexEnd(),t.vertexWrite(r),t.vertexWrite(this._offsetBottomRight),t.vertexWrite(this._texBottomRight),t.vertexWrite(this._bitestAndDistRatio),t.vertexWrite(e),t.vertexWrite(this._fillColor),t.vertexWrite(this._outlineColor),t.vertexWrite(this._sizeOutlineWidth),t.vertexWrite(this._minMaxZoom),t.vertexEnd(),this._writeIndices(t,n)}_writeHeatmapVertices(t,e,i){const r=t.vertexCount();t.vertexWrite(i),t.vertexWrite(this._offsetUpperLeft),t.vertexWrite(e),t.vertexEnd(),t.vertexWrite(i),t.vertexWrite(this._offsetUpperRight),t.vertexWrite(e),t.vertexEnd(),t.vertexWrite(i),t.vertexWrite(this._offsetBottomLeft),t.vertexWrite(e),t.vertexEnd(),t.vertexWrite(i),t.vertexWrite(this._offsetBottomRight),t.vertexWrite(e),t.vertexEnd(),this._writeIndices(t,r)}_writeIndices(t,e){t.indexWrite(e+0),t.indexWrite(e+1),t.indexWrite(e+2),t.indexWrite(e+1),t.indexWrite(e+3),t.indexWrite(e+2)}_applyTransformation(t,o,x=0){x?e(t,g*x):i(t),r(t,t,a(this.xOffset,-this.yOffset)),this.angle&&s(t,t,g*this.angle);const f=this._computedWidth,m=this._computedHeight,_=-(.5+this._anchorX)*f,l=-(.5-this._anchorY)*m;h(o,_,l),n(o,o,t),this._offsetUpperLeft=W(16*o[0],16*o[1]),h(o,_+f,l),n(o,o,t),this._offsetUpperRight=W(16*o[0],16*o[1]),h(o,_,l+m),n(o,o,t),this._offsetBottomLeft=W(16*o[0],16*o[1]),h(o,_+f,l+m),n(o,o,t),this._offsetBottomRight=W(16*o[0],16*o[1])}_computeSize(t,e,i,r,s,o,h,n){const a=t*i,x=e*i;if(!!o.sdf&&!h){const i=n&&t>e?a:t,s=e,o=r+2*1;t=Math.min(i+o,a),e=Math.min(s+o,x)}else t=a,e=x;const f=c/Math.max(a,x),m=.5*(a-t)*f,l=.5*(x-e)*f,d=o.rect.x+_+m,v=o.rect.y+_+l,p=d+o.width-2*m,g=v+o.height-2*l,u=Math.floor(d),y=Math.floor(v),w=Math.ceil(p),M=Math.ceil(g);t*=(w-u)/(p-d),e*=(M-y)/(g-v),this._texUpperLeft=W(u,y),this._texUpperRight=W(w,y),this._texBottomLeft=W(u,M),this._texBottomRight=W(w,M),this._anchorX*=a/t,this._anchorY*=x/e,t*=s,e*=s,this._computedWidth=t,this._computedHeight=e}_getPos(t,e){return W(Math.round(u*t),Math.round(u*e))}};export{y as default};
