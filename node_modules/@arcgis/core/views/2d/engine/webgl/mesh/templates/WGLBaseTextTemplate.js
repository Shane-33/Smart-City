/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
import{pt2px as e}from"../../../../../../core/screenUtils.js";import{GeometryCursor as t}from"../../../../../../geometry/GeometryCursor.js";import{CIMMarkerPlacementHelper as r}from"../../../../../../symbols/cim/placements/CIMMarkerPlacementHelper.js";import{magicLabelLineHeight as i}from"../../definitions.js";import{WGLGeometryType as o}from"../../enums.js";import{i8888to32 as s,i1616to32 as n}from"../../number.js";import{MaterialKeyBase as h}from"../../materialKey/MaterialKey.js";import{shapeGlyphs as d}from"./shapingUtils.js";const a=8,x=n(4,4),_=n(16,4),c=n(4,2),l=n(4,6),u=[c,c,l,l],g=[c,l,c,l],m=[l,l,x,x],f=[x,x,l,l],y=[l,x,l,x],p=[x,l,x,l],w=x=>class extends x{constructor(...e){super(...e),this._isCIM=!1,this._vertexBoundsScale=1,this.geometryType=o.TEXT,this._aux=s(0,0,this._referenceSize,this._bitset)}bindTextInfo(e,t){this._shapingInfo=e?.length?d(e,t,{scale:this._scale,angle:this._angle,xOffset:this._xOffset,yOffset:this._yOffset,hAlign:this._xAlignD,vAlign:this._yAlignD,maxLineWidth:Math.max(32,Math.min(this._lineWidth,512)),lineHeight:i*Math.max(.25,Math.min(this._lineHeight,4)),decoration:this._decoration,isCIM:this._isCIM,hasBackground:!!this._backgroundColor,borderLineSize:this._borderLineSize}):null}_write(e,t,r,i){const o=t.getDisplayId();this._writeGeometry(e,t,o,r,i)}_writeGeometry(e,t,r,i,o){const s=this._shapingInfo;if(null==s)return;if(this._textPlacement)return this._writePlacedText(e,r,s,i,t,o);const n=o?o.asOptimized():"esriGeometryPolygon"===t.geometryType?t.readCentroid():t.readGeometryForDisplay();if(null!=n){if(n.isPoint){const[t,i]=n.coords;if(!e.hasAggregates&&e.hasPixelBufferEnabled&&(t<0||t>=512||i<0||i>=512))return;return this._writeGlyphs(e,r,{x:t,y:i},s)}n.forEachVertex(((t,i)=>this._writeGlyphs(e,r,{x:t,y:i},s)))}}_writePlacedText(i,o,s,n,h,d){const a=this._textPlacement,x=d||t.fromFeatureSetReaderCIM(h);if(!x)return;const _=-1,c=r.getPlacement(x,_,a,e(1),i.tileKey,n.geometryEngine);if(!c)return;const l=s.bounds,u=Math.sqrt(l.height*l.height+l.width*l.width);let g,m,f;for(;g=c.next();)if(m=g.tx,f=-g.ty,m+u>=0&&m-u<512&&f+u>=0&&f-u<512){const e=-g.getAngle();s.setRotation(e),this._writeGlyphs(i,o,{x:m,y:f},s),s.setRotation(-e)}}_writeGlyphs(e,t,r,i){const o=h.load(this._materialKey),s=n(Math.round(a*r.x),Math.round(a*r.y)),d=this._vertexBoundsScale,{bounds:x,background:_,glyphs:c}=i;c.length>0&&(this._borderLineColor||this._backgroundColor)&&(o.textureBinding=c[0].textureBinding,e.recordStart(t,o.data,this.geometryType,!0),this._writeBackgroundGeometry(e,t,r,x,_),e.recordEnd());const l=2*Math.max(x.width,x.height);for(const n of i.glyphs)o.textureBinding=n.textureBinding,e.recordStart(t,o.data,this.geometryType,!0),e.vertexBounds(r.x+x.x+this._xOffset,r.y+x.y-this._yOffset,l*d,l*d),this._writeVertices(e,t,s,n),e.recordEnd()}_writeGlyph(e,t,r,i,o){const s=h.load(this._materialKey),d=n(Math.round(a*r),Math.round(a*i));s.textureBinding=o.textureBinding,e.recordStart(t,s.data,this.geometryType,!0);const x=o.bounds,_=this._vertexBoundsScale;e.vertexBounds(r+x.x*_,i+x.y*_,x.width*_,x.height*_),this._writeVertices(e,t,d,o),e.recordEnd()}_writeVertices(e,t,r,i){const o=e.vertexCount();this._writeVertexCommon(e,t,r,i),e.vertexWrite(i.offsets.upperLeft),e.vertexWrite(i.texcoords.upperLeft),e.vertexEnd(),this._writeVertexCommon(e,t,r,i),e.vertexWrite(i.offsets.upperRight),e.vertexWrite(i.texcoords.upperRight),e.vertexEnd(),this._writeVertexCommon(e,t,r,i),e.vertexWrite(i.offsets.lowerLeft),e.vertexWrite(i.texcoords.lowerLeft),e.vertexEnd(),this._writeVertexCommon(e,t,r,i),e.vertexWrite(i.offsets.lowerRight),e.vertexWrite(i.texcoords.lowerRight),e.vertexEnd(),e.indexWrite(o+0),e.indexWrite(o+1),e.indexWrite(o+2),e.indexWrite(o+1),e.indexWrite(o+3),e.indexWrite(o+2)}_writeVertexCommon(e,t,r,i){const o=this._color,n=this._haloColor,h=s(0,0,this._referenceSize,this._bitset),d=s(0,0,this._size,this._haloSize);e.vertexWrite(r),e.vertexWrite(t),e.vertexWrite(o),e.vertexWrite(n),e.vertexWrite(d),e.vertexWrite(h),e.vertexWrite(this._minMaxZoom)}_writeBackgroundVertex(e,t,r,i,o,n){const h=s(0,1,this._referenceSize,this._bitset),d=s(0,0,this._size,this._haloSize),a=s(0,0,0,0);e.vertexWrite(r),e.vertexWrite(t),e.vertexWrite(i),e.vertexWrite(a),e.vertexWrite(d),e.vertexWrite(h),e.vertexWrite(this._minMaxZoom),e.vertexWrite(o),e.vertexWrite(n),e.vertexEnd()}_writeBackgroundQuad(e,t,r,i,o,s){const n=e.vertexCount();this._writeBackgroundVertex(e,t,r,i,o.upperLeft,s[0]),this._writeBackgroundVertex(e,t,r,i,o.upperRight,s[1]),this._writeBackgroundVertex(e,t,r,i,o.lowerLeft,s[2]),this._writeBackgroundVertex(e,t,r,i,o.lowerRight,s[3]),e.indexWrite(n+0),e.indexWrite(n+1),e.indexWrite(n+2),e.indexWrite(n+1),e.indexWrite(n+3),e.indexWrite(n+2)}_writeBackgroundGeometry(e,t,r,i,o){const s=n(Math.round(a*r.x),Math.round(a*r.y)),{x:h,y:d,width:x,height:c}=i,l=2*Math.max(x,c);if(e.vertexBounds(r.x+h+this._xOffset,r.y+d-this._yOffset,l*this._vertexBoundsScale,l*this._vertexBoundsScale),this._backgroundColor){const r=[_,_,_,_];this._writeBackgroundQuad(e,t,s,this._backgroundColor,o.main,r)}if(this._borderLineColor||this._backgroundColor){const r=!!this._borderLineColor&&!!this._borderLineSize&&this._borderLineSize>0,[i,n,h,d,a]=r?[u,u,g,g,this._borderLineColor]:[m,f,y,p,this._backgroundColor];this._writeBackgroundQuad(e,t,s,a,o.top,i),this._writeBackgroundQuad(e,t,s,a,o.bot,n),this._writeBackgroundQuad(e,t,s,a,o.left,h),this._writeBackgroundQuad(e,t,s,a,o.right,d)}}};export{w as default};
