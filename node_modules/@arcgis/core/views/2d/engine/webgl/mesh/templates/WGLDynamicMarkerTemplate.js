/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
import t from"../../../../../../core/Error.js";import e from"../../../../../../core/Logger.js";import{pt2px as s}from"../../../../../../core/screenUtils.js";import{c as i}from"../../../../../../chunks/mat2df32.js";import{c as r}from"../../../../../../chunks/vec2f32.js";import{Alignment as o}from"../../../../../../symbols/cim/enums.js";import{isFeatureValueFn as a}from"../../../../../../symbols/cim/utils.js";import{premultiplyAlphaRGBA as n}from"../../color.js";import{bitsetMarkerAlignmentMap as c,bitsetMarkerAlignmentScreen as h,bitsetGenericLockColor as m,bitsetMarkerScaleSymbolsProportionally as l,minMaxZoomPrecisionFactor as f}from"../../definitions.js";import{i1616to32 as _,i8888to32 as y}from"../../number.js";import{MarkerMaterialKey as p}from"../../materialKey/MaterialKey.js";import{getMinMaxZoom as M}from"./util.js";import d from"./WGLBaseMarkerTemplate.js";import u from"./WGLDynamicMeshTemplate.js";import{ok as g}from"../../util/Result.js";const k=r(),P=i();class L extends(d(u)){constructor(t,e,i){super(t),this._cimMarkerLayer=t,this._minMaxZoom=_(Math.round(e*f),Math.round(i*f));const r=t.color;if(a(r)){const t=(t,e,s)=>n(r(t,e,s));this._dynamicPropertyMap.set("_fillColor",t)}else this._fillColor=n(r);const y=t.outlineColor;if(a(y)){const t=(t,e,s)=>n(y(t,e,s));this._dynamicPropertyMap.set("_outlineColor",t)}else this._outlineColor=n(y);const p=t.size;if(a(p)){const t=(t,e,i)=>s(p(t,e,i));this._dynamicPropertyMap.set("_size",t)}else this._size=s(p)||0;const M=t.scaleX;a(M)?this._dynamicPropertyMap.set("_scaleX",M):this._scaleX=M;const d=t.offsetX;if(a(d)){const t=(t,e,i)=>s(d(t,e,i));this._dynamicPropertyMap.set("xOffset",t)}else this.xOffset=s(d)||0;const u=t.offsetY;if(a(u)){const t=(t,e,i)=>s(u(t,e,i));this._dynamicPropertyMap.set("yOffset",t)}else this.yOffset=s(u)||0;const g=t.outlineWidth;if(a(g)){const t=(t,e,i)=>s(g(t,e,i));this._dynamicPropertyMap.set("_outlineWidth",t)}else this._outlineWidth=s(g)||0;const k=t.rotation;if(a(k)?this._dynamicPropertyMap.set("_angle",k):this._angle=k||0,null!=t.effects){const e=t.effects;a(e)?this._dynamicPropertyMap.set("_effects",e):this._effects=e}if(null!=t.markerPlacement){const e=t.markerPlacement;a(e)?this._dynamicPropertyMap.set("_markerPlacement",e):this._markerPlacement=e}this._scaleFactor=t.scaleFactor??1,this._bitSet=(t.alignment===o.MAP?c:h)|(t.colorLocked?m:0)|(t.scaleSymbolsProportionally?l:0),this._materialKey=t.materialKey}static fromCIMMarker(t,e){const[s,i]=M(t.scaleInfo,e);return new L(t,s,i)}bindFeature(i,r,o){const a=i.readLegacyFeature(),n=i.getObjectId();this._dynamicPropertyMap.forEach(((t,e)=>{this[e]=t(a,r,o)}));const c=this._cimMarkerLayer.materialHash,h="function"==typeof c?c(a,r,o,n):c,m=this._materialCache.get(h);if(!m||!g(m.spriteMosaicItem)||!m.spriteMosaicItem)return void e.getLogger("esri.views.2d.engine.webgl.WGLDynamicMarkerTemplate").error(new t("mapview-cim","Encountered an error when binding feature"));const l=m.spriteMosaicItem,f=this._cimMarkerLayer.sizeRatio,M=l.width/l.height*this._scaleX,d=p.load(this._materialKey);d.sdf=l.sdf,d.pattern=!0,d.textureBinding=l.textureBinding,this._materialKey=d.data;const u=this._cimMarkerLayer.rotateClockwise?this._angle:-this._angle,L=this._size,j=L*M,b=this.xOffset,z=this.yOffset;this.xOffset*=this._scaleFactor,this.yOffset*=this._scaleFactor;const x=this._cimMarkerLayer.scaleSymbolsProportionally&&this._cimMarkerLayer.frameHeight?this._size/s(this._cimMarkerLayer.frameHeight):1,O=this._outlineWidth*x,w=s(this._cimMarkerLayer.referenceSize);let C=0,W=0;const F=this._cimMarkerLayer.anchorPoint;F&&(this._cimMarkerLayer.isAbsoluteAnchorPoint?this._size&&(C=s(F.x)/(this._size*M),W=s(F.y)/this._size):(C=F.x,W=F.y)),this._anchorX=C,this._anchorY=W,this._sizeOutlineWidth=y(Math.round(Math.min(Math.sqrt(128*j),255)),Math.round(Math.min(Math.sqrt(128*L),255)),Math.round(Math.min(Math.sqrt(128*O),255)),Math.round(Math.min(Math.sqrt(128*w),255))),this.angle=u;const S=Math.round(64*f);this._bitestAndDistRatio=_(this._bitSet,S),this._computeSize(j,L,f,O,this._scaleFactor,l,d.hasSizeVV(),!0),this._applyTransformation(P,k),this.xOffset=b,this.yOffset=z}}export{L as default};
