/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
import{c as e,f as t}from"../../../../../chunks/vec2f32.js";import{fadeDuration as i}from"../../vectorTiles/decluttering/config.js";import{RotationAlignment as a,SymbolPlacement as r,TranslateAnchor as n}from"../../vectorTiles/style/StyleDefinition.js";import{vtlTextureBindingUnitSprites as s,vtlTextureBindingUnitGlyphs as o}from"../definitions.js";import{WGLDrawPhase as l}from"../enums.js";import{degToByte as f}from"../GeometryUtils.js";import{u32to4Xu8 as c}from"../number.js";import u from"./WGLBrush.js";import{TextureSamplingMode as p,PrimitiveType as m,DataType as d,CompareFunction as g}from"../../../../webgl/enums.js";const y=1/65536;class _ extends u{constructor(){super(...arguments),this._iconProgramOptions={id:!1,sdf:!1},this._sdfProgramOptions={id:!1},this._spritesTextureSize=e()}dispose(){}drawMany(e,t){const{drawPhase:i,styleLayerUID:a}=e,r=e.styleLayer;let n;i===l.HITTEST&&(n=c(a+1)),this._drawIcons(e,r,t,n),this._drawText(e,r,t,n)}_drawIcons(e,t,o,c){const{context:u,displayLevel:p,drawPhase:m,painter:d,spriteMosaic:g,state:y,styleLayerUID:_,requestRender:h,allowDelayedRender:M}=e,P=t.iconMaterial,U=d.vectorTilesMaterialManager;let T,E=!1;for(const i of o)if(i.layerData.has(_)&&(T=i.layerData.get(_),T.iconPerPageElementsMap.size>0)){E=!0;break}if(!E)return;const S=t.getPaintValue("icon-translate",p),v=t.getPaintValue("icon-translate-anchor",p);let x=t.getLayoutValue("icon-rotation-alignment",p);x===a.AUTO&&(x=t.getLayoutValue("symbol-placement",p)===r.POINT?a.VIEWPORT:a.MAP);const D=x===a.MAP,I=t.getLayoutValue("icon-keep-upright",p)&&D,R=T.isIconSDF,V=m===l.HITTEST,w=this._iconProgramOptions;w.id=V,w.sdf=R;const A=U.getMaterialProgram(u,P,w);if(M&&null!=h&&!A.compiled)return void h();u.useProgram(A),A.setUniformMatrix3fv("u_displayViewMat3",x===a.MAP?y.displayViewMat3:y.displayMat3),A.setUniformMatrix3fv("u_displayMat3",v===n.VIEWPORT?y.displayMat3:y.displayViewMat3),A.setUniform2fv("u_iconTranslation",S),A.setUniform1f("u_depth",t.z),A.setUniform1f("u_mapRotation",f(y.rotation)),A.setUniform1f("u_keepUpright",I?1:0),A.setUniform1f("u_level",10*p),A.setUniform1i("u_texture",s),A.setUniform1f("u_fadeDuration",i/1e3),V&&A.setUniform4fv("u_id",c);let L=-1;for(const i of o){if(!i.layerData.has(_))continue;if(i.key.level!==L&&(L=i.key.level,P.setDataUniforms(A,p,t,L,g)),T=i.layerData.get(_),0===T.iconPerPageElementsMap.size)continue;T.prepareForRendering(u),T.updateOpacityInfo();const a=T.iconVAO;if(null!=a){u.bindVAO(a),A.setUniformMatrix3fv("u_dvsMat3",i.transforms.dvs),A.setUniform1f("u_time",(performance.now()-T.lastOpacityUpdate)/1e3);for(const[t,a]of T.iconPerPageElementsMap)this._renderIconRange(e,A,a,t,i)}}}_renderIconRange(e,t,i,a,r){const{context:n,spriteMosaic:o}=e;this._spritesTextureSize[0]=o.getWidth(a)/4,this._spritesTextureSize[1]=o.getHeight(a)/4,t.setUniform2fv("u_mosaicSize",this._spritesTextureSize),o.bind(n,p.LINEAR,a,s),this._setStencilState(e,r),n.drawElements(m.TRIANGLES,i[1],d.UNSIGNED_INT,Uint32Array.BYTES_PER_ELEMENT*i[0]),r.triangleCount+=i[1]/3}_drawText(e,s,c,u){const{context:p,displayLevel:m,drawPhase:d,glyphMosaic:g,painter:_,pixelRatio:h,spriteMosaic:M,state:P,styleLayerUID:U,requestRender:T,allowDelayedRender:E}=e,S=s.textMaterial,v=_.vectorTilesMaterialManager;let x,D=!1;for(const t of c)if(t.layerData.has(U)&&(x=t.layerData.get(U),x.glyphPerPageElementsMap.size>0)){D=!0;break}if(!D)return;const I=s.getPaintProperty("text-opacity");if(I&&!I.isDataDriven&&0===I.getValue(m))return;const R=s.getPaintProperty("text-color"),V=!R||R.isDataDriven||R.getValue(m)[3]>0,w=s.getPaintProperty("text-halo-width"),A=s.getPaintProperty("text-halo-color"),L=(!w||w.isDataDriven||w.getValue(m)>0)&&(!A||A.isDataDriven||A.getValue(m)[3]>0);if(!V&&!L)return;const O=24/8;let N=s.getLayoutValue("text-rotation-alignment",m);N===a.AUTO&&(N=s.getLayoutValue("symbol-placement",m)===r.POINT?a.VIEWPORT:a.MAP);const z=N===a.MAP,k=s.getLayoutValue("text-keep-upright",m)&&z,b=d===l.HITTEST,G=.8*O/h;this._glyphTextureSize||(this._glyphTextureSize=t(g.width/4,g.height/4));const W=s.getPaintValue("text-translate",m),j=s.getPaintValue("text-translate-anchor",m),F=this._sdfProgramOptions;F.id=b;const B=v.getMaterialProgram(p,S,F);if(E&&null!=T&&!B.compiled)return void T();p.useProgram(B),B.setUniformMatrix3fv("u_displayViewMat3",N===a.MAP?P.displayViewMat3:P.displayMat3),B.setUniformMatrix3fv("u_displayMat3",j===n.VIEWPORT?P.displayMat3:P.displayViewMat3),B.setUniform2fv("u_textTranslation",W),B.setUniform1f("u_depth",s.z+y),B.setUniform2fv("u_mosaicSize",this._glyphTextureSize),B.setUniform1f("u_mapRotation",f(P.rotation)),B.setUniform1f("u_keepUpright",k?1:0),B.setUniform1f("u_level",10*m),B.setUniform1i("u_texture",o),B.setUniform1f("u_antialiasingWidth",G),B.setUniform1f("u_fadeDuration",i/1e3),b&&B.setUniform4fv("u_id",u);let H=-1;for(const t of c){if(!t.layerData.has(U))continue;if(t.key.level!==H&&(H=t.key.level,S.setDataUniforms(B,m,s,H,M)),x=t.layerData.get(U),0===x.glyphPerPageElementsMap.size)continue;x.prepareForRendering(p),x.updateOpacityInfo();const i=x.textVAO;if(null==i)continue;p.bindVAO(i),B.setUniformMatrix3fv("u_dvsMat3",t.transforms.dvs),this._setStencilState(e,t);const a=(performance.now()-x.lastOpacityUpdate)/1e3;B.setUniform1f("u_time",a),x.glyphPerPageElementsMap.forEach(((e,i)=>{this._renderGlyphRange(p,e,i,g,B,L,V,t)}))}}_renderGlyphRange(e,t,i,a,r,n,s,l){a.bind(e,p.LINEAR,i,o),n&&(r.setUniform1f("u_halo",1),e.drawElements(m.TRIANGLES,t[1],d.UNSIGNED_INT,Uint32Array.BYTES_PER_ELEMENT*t[0]),l.triangleCount+=t[1]/3),s&&(r.setUniform1f("u_halo",0),e.drawElements(m.TRIANGLES,t[1],d.UNSIGNED_INT,Uint32Array.BYTES_PER_ELEMENT*t[0]),l.triangleCount+=t[1]/3)}_setStencilState(e,t){const{context:i,is3D:a,stencilSymbols:r}=e;if(i.setStencilTestEnabled(!0),r)return i.setStencilWriteMask(255),void i.setStencilFunction(g.ALWAYS,t.stencilRef,255);i.setStencilWriteMask(0),a?i.setStencilFunction(g.EQUAL,t.stencilRef,255):i.setStencilFunction(g.GREATER,255,255)}}export{_ as WGLBrushVTLSymbol};
