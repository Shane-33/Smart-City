/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
import{createScreenPoint as t}from"../../../../core/screenUtils.js";import{g as e,m as s,h as r,c as o,r as a}from"../../../../chunks/mat3.js";import{c as i}from"../../../../chunks/mat3f32.js";import{f as n}from"../../../../chunks/vec2f32.js";import{f as c}from"../../../../chunks/vec3f32.js";import{normalizeMapX as p}from"../../../../geometry/support/normalizeUtils.js";import{getInfo as l}from"../../../../geometry/support/spatialReferenceUtils.js";import{getWorldWidth as d}from"../../viewpointUtils.js";import{brushes as h}from"../brushes.js";import{WGLDrawPhase as m}from"./enums.js";import f from"./WGLContainer.js";class u extends f{constructor(){super(...arguments),this._localOrigin=t(0,0),this._viewStateId=-1,this._dvsMat3=i()}get dvsMat3(){return this._dvsMat3}beforeRender(t){this._updateMatrices(t),this._updateOverlays(t,this.children);for(const e of this.children)e.beforeRender(t)}prepareRenderPasses(t){const e=t.registerRenderPass({name:"overlay",brushes:[h.overlay],target:()=>this.children,drawPhase:m.MAP});return[...super.prepareRenderPasses(t),e]}_updateMatrices(t){const{state:i}=t,{id:l,size:d,pixelRatio:h,resolution:m,rotation:f,viewpoint:u,displayMat3:M}=i;if(this._viewStateId===l)return;const v=Math.PI/180*f,_=h*d[0],w=h*d[1],{x:g,y}=u.targetGeometry,j=p(g,i.spatialReference);this._localOrigin.x=j,this._localOrigin.y=y;const R=m*_,b=m*w,P=e(this._dvsMat3);s(P,P,M),r(P,P,n(_/2,w/2)),o(P,P,c(_/R,-w/b,1)),a(P,P,-v),this._viewStateId=l}_updateOverlays(t,e){const{state:s}=t,{rotation:r,spatialReference:o,worldScreenWidth:a,size:i,viewpoint:n}=s,c=this._localOrigin;let p=0;const h=l(o);if(h&&o.isWrappable){const t=i[0],l=i[1],m=180/Math.PI*r,f=Math.abs(Math.cos(m)),u=Math.abs(Math.sin(m)),M=Math.round(t*f+l*u),[v,_]=h.valid,w=d(o),{x:g,y}=n.targetGeometry,j=[g,y],R=[0,0];s.toScreen(R,j);const b=[0,0];let P;P=M>a?.5*a:.5*M;const x=Math.floor((g+.5*w)/w),O=v+x*w,C=_+x*w,I=[R[0]+P,0];s.toMap(b,I),b[0]>C&&(p=w),I[0]=R[0]-P,s.toMap(b,I),b[0]<O&&(p=-w);for(const s of e){const t=s.elementView.bounds;if(null==t)continue;const[e,,r]=t;e<v&&r>v?s.updateDrawCoords(c,w):r>_&&e<_?s.updateDrawCoords(c,-w):s.updateDrawCoords(c,p)}}else for(const l of e)l.updateDrawCoords(c,p)}}export{u as default};
