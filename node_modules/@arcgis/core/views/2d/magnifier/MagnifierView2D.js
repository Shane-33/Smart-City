/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
import e from"../../../request.js";import{createTask as r}from"../../../core/asyncUtils.js";import s from"../../../core/Handles.js";import{clamp as t}from"../../../core/mathUtils.js";import{destroyMaybe as i,abortMaybe as o,disposeMaybe as a}from"../../../core/maybe.js";import{watch as n,initial as l}from"../../../core/reactiveUtils.js";import{isSVG as h}from"../../../core/urlUtils.js";import{c as u}from"../../../chunks/mat3f32.js";import{DisplayObject as m}from"../engine/DisplayObject.js";import{Pos2us as c}from"../engine/webgl/DefaultVertexAttributeLayouts.js";import{WGLDrawPhase as d}from"../engine/webgl/enums.js";import{createMagnifierProgram as _,magnifierProgramTemplate as p}from"../engine/webgl/shaders/MagnifierPrograms.js";import{loadMagnifierResources as f}from"../../magnifier/resources.js";import{BufferObject as g}from"../../webgl/BufferObject.js";import{PrimitiveType as x,Usage as b,PixelFormat as T,TextureWrapMode as y,TextureSamplingMode as k}from"../../webgl/enums.js";import{Texture as R}from"../../webgl/Texture.js";import{TextureDescriptor as v}from"../../webgl/TextureDescriptor.js";import{VertexArrayObject as j}from"../../webgl/VertexArrayObject.js";class A extends m{constructor(){super(),this._handles=new s,this._resourcePixelRatio=1,this.visible=!1}destroy(){this._handles=i(this._handles),this._disposeRenderResources(),this._resourcesTask=o(this._resourcesTask)}get backgroundColor(){return this._backgroundColor}set backgroundColor(e){this._backgroundColor=e,this.requestRender()}get magnifier(){return this._magnifier}set magnifier(e){this._magnifier=e,this._handles.removeAll(),this._handles.add([n((()=>e.version),(()=>{this.visible=e.visible&&null!=e.position&&e.size>0,this.requestRender()}),l),n((()=>[e.maskUrl,e.overlayUrl]),(()=>this._reloadResources())),n((()=>e.size),(()=>{this._disposeRenderResources(),this.requestRender()}))])}_createTransforms(){return{dvs:u()}}doRender(e){const r=e.context;if(!this._resourcesTask)return void this._reloadResources();if(e.drawPhase!==d.MAP||!this._canRender())return;this._updateResources(e);const s=this._magnifier;if(null==s.position)return;const i=e.pixelRatio,o=s.size*i,a=1/s.factor,n=Math.ceil(a*o);this._readbackTexture.resize(n,n);const{size:l}=e.state,h=i*l[0],u=i*l[1],m=.5*n,c=.5*n,_=t(i*s.position.x,m,h-m-1),p=t(u-i*s.position.y,c,u-c-1);r.setBlendingEnabled(!0);const f=_-m,g=p-c,b=this._readbackTexture;r.bindTexture(b,0),r.gl.copyTexImage2D(b.descriptor.target,0,b.descriptor.pixelFormat,f,g,n,n,0);const T=this.backgroundColor,y=T?[T.a*T.r/255,T.a*T.g/255,T.a*T.b/255,T.a]:[1,1,1,1],k=(_+s.offset.x*i)/h*2-1,R=(p-s.offset.y*i)/u*2-1,v=o/h*2,j=o/u*2,A=this._program;r.bindVAO(this._vertexArrayObject),r.bindTexture(this._overlayTexture,6),r.bindTexture(this._maskTexture,7),r.useProgram(A),A.setUniform4fv("u_background",y),A.setUniform1i("u_readbackTexture",0),A.setUniform1i("u_overlayTexture",6),A.setUniform1i("u_maskTexture",7),A.setUniform4f("u_drawPos",k,R,v,j),A.setUniform1i("u_maskEnabled",s.maskEnabled?1:0),A.setUniform1i("u_overlayEnabled",s.overlayEnabled?1:0),r.setStencilTestEnabled(!1),r.setColorMask(!0,!0,!0,!0),r.drawArrays(x.TRIANGLE_STRIP,0,4),r.bindVAO()}_canRender(){return this.mask&&this.overlay&&null!=this._magnifier}_reloadResources(){this._resourcesTask&&this._resourcesTask.abort();const s=null!=this._magnifier?this._magnifier.maskUrl:null,t=null!=this._magnifier?this._magnifier.overlayUrl:null;this._resourcesTask=r((async r=>{const i=null==s||null==t?f(r):null,o=null!=s?e(s,{responseType:"image",signal:r}).then((e=>e.data)):i.then((e=>e.mask)),a=null!=t?e(t,{responseType:"image",signal:r}).then((e=>e.data)):i.then((e=>e.overlay)),[n,l]=await Promise.all([o,a]);this.mask=n,this.overlay=l,this._disposeRenderResources(),this.requestRender()}))}_disposeRenderResources(){this._readbackTexture=a(this._readbackTexture),this._overlayTexture=a(this._overlayTexture),this._maskTexture=a(this._maskTexture),this._vertexArrayObject=a(this._vertexArrayObject),this._program=a(this._program)}_updateResources(e){if(e.pixelRatio!==this._resourcePixelRatio&&this._disposeRenderResources(),this._readbackTexture)return;const r=e.context;this._resourcePixelRatio=e.pixelRatio;const s=Math.ceil(this._magnifier.size*e.pixelRatio);this._program=_(r);const t=new Uint16Array([0,1,0,0,1,1,1,0]),i=p.attributes;this._vertexArrayObject=new j(r,i,c,{geometry:g.createVertex(r,b.STATIC_DRAW,t)}),this.overlay.width=s,this.overlay.height=s;const o=new v;o.internalFormat=T.RGBA,o.wrapMode=y.CLAMP_TO_EDGE,o.samplingMode=k.NEAREST,o.flipped=!0,o.preMultiplyAlpha=!h(this.overlay.src)||!e.context.driverTest.svgPremultipliesAlpha.result,this._overlayTexture=new R(r,o,this.overlay),this.mask.width=s,this.mask.height=s,o.pixelFormat=o.internalFormat=T.ALPHA,this._maskTexture=new R(r,o,this.mask);const a=1/this._magnifier.factor;o.pixelFormat=o.internalFormat=T.RGBA,o.width=o.height=Math.ceil(a*s),o.samplingMode=k.LINEAR,o.flipped=!1,this._readbackTexture=new R(r,o)}}export{A as default};
