/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
import{c as e,g as t,v as s,w as i}from"../../../chunks/vec2.js";import{a as r}from"../../../chunks/vec2f64.js";import{s as o,q as n}from"../../../chunks/vec3.js";import{g as h,c as a}from"../../../chunks/vec3f64.js";import{absoluteHeightElevationInfo as c}from"../../../support/elevationInfoUtils.js";import{VerticalHalfPlaneConstraint as p}from"../sketch/constraints.js";import{fromAnyMapPoint as d,fromVec3 as g}from"../sketch/normalizedPoint.js";import{SnappingAlgorithm as f}from"./SnappingAlgorithm.js";import{squaredScreenDistance as l}from"./snappingUtils.js";import{RightAngleSnappingCandidate as m,OtherVertexType as x}from"./candidates/RightAngleSnappingCandidate.js";import{vectorToScreenPoint as v}from"../support/viewUtils.js";class E extends f{snapNewVertex(e,t){const s=t.editGeometryOperations.data.components[0],i=s.vertices.length,r=[];if(i<2)return r;const{view:o}=this,n=v(e,t.spatialReference,c,o),h=s.vertices[i-1];if(this.edgeExceedsShortLineThreshold(h.leftEdge,t)){const s=d(h.pos,o,t),i=d(h.leftEdge.leftVertex.pos,o,t);this._checkForSnappingCandidate(r,i,s,e,n,t)}const a=s.vertices[0];if(this.edgeExceedsShortLineThreshold(a.rightEdge,t)){const s=d(a.pos,o,t),i=d(a.rightEdge.rightVertex.pos,o,t);this._checkForSnappingCandidate(r,i,s,e,n,t)}return r}snapExistingVertex(e,t){const s=[],i=t.vertexHandle;if(i.component.vertices.length<3)return s;const{view:r}=this,o=v(e,t.spatialReference,c,r),n=i.leftEdge,h=i.rightEdge;if(n?.leftVertex.leftEdge){const i=n.leftVertex.leftEdge;if(this.edgeExceedsShortLineThreshold(i,t)){const n=d(i.rightVertex.pos,r,t),h=d(i.leftVertex.pos,r,t);this._checkForSnappingCandidate(s,h,n,e,o,t)}}if(h?.rightVertex.rightEdge){const i=h.rightVertex.rightEdge;if(this.edgeExceedsShortLineThreshold(i,t)){const n=d(i.leftVertex.pos,r,t),h=d(i.rightVertex.pos,r,t);this._checkForSnappingCandidate(s,h,n,e,o,t)}}return s}_checkForSnappingCandidate(r,d,f,E,j,k){const{spatialReference:S,pointer:w}=k;e(V,f,d);const C=o(u,V[1],-V[0],0),T=t(C,e(V,E,f))/s(C),F=g(i(h(E),f,C,T));if(l(j,v(F,S,c,this.view))<this.squaredProximityThreshold(w)){if(this.isVertical(F,f)||this.isVertical(f,d))return;const e=n(a(),f,C,Math.sign(T));r.push(new m({targetPoint:F,constraint:new p(f,g(e)),previousVertex:d,otherVertex:f,otherVertexType:x.CENTER,isDraped:"on-the-ground"===k.elevationInfo?.mode}))}}}const V=r(),u=a();export{E as RightAngleSnapper};
