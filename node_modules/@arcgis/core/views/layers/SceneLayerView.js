/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
import{_ as e}from"../../chunks/tslib.es6.js";import{isSome as t}from"../../core/arrayUtils.js";import r from"../../core/Logger.js";import{abortMaybe as o}from"../../core/maybe.js";import{unwrapUpdating as i,updating as n,isUpdating as l}from"../../core/maybeUpdating.js";import{throwIfAbortError as s,throwIfNotAbortError as a}from"../../core/promiseUtils.js";import{whenOnce as m}from"../../core/reactiveUtils.js";import{property as p}from"../../core/accessorSupport/decorators/property.js";import"../../core/accessorSupport/ensureType.js";import"../../core/has.js";import{subclass as c}from"../../core/accessorSupport/decorators/subclass.js";import{project as u,canProjectWithoutEngine as y,isLoaded as g,load as d}from"../../geometry/projection.js";import h from"./LayerView.js";const f="esri.views.layers.SceneLayerView",w=r.getLogger(f);let E=class extends h{constructor(){super(...arguments),this.layer=null,this.filter=null,this._geometryEngine=null,this._projectionEngineLoaded=!1,this._abortController=new AbortController}get availableFields(){return[]}get maximumNumberOfFeatures(){return 0}set maximumNumberOfFeatures(e){throw new Error("Not implemented")}get maximumNumberOfFeaturesExceeded(){return!1}get layerFilter(){return i(this._layerFilter)}get _layerFilter(){const e=this.layer?.filter;if(null==e||e.geometries.length<1)return null;const r=this._geometryEngine;if(null==r||!this._projectionEngineLoaded&&this._filterNeedsProjectionEngine)return n;const o=e.geometries.at(0).spatialReference,i=e.geometries.toArray().map((e=>{try{e=r.simplify(e)}catch(t){return w.warnOncePerTick("Failed to simplify scene filter mask polygon. Polygon will be ignored."),null}if(null==e)return null;if(e.spatialReference.equals(o))return e;try{return u(e,o)}catch(t){return w.warnOncePerTick("Failed to project scene filter mask polygon. Polygon will be ignored."),null}})).filter(t).sort(((e,t)=>e.extent.xmin-t.extent.xmin)),l=new Set,s=new Array,a=new Array;for(let t of i){const e=t.extent.xmin;if(s.length=0,l.forEach((o=>{if(e>=o.extent.xmax)return a.push(o),void l.delete(o);t.extent.ymin<=o.extent.ymax&&t.extent.ymax>=o.extent.ymin&&r.intersects(t,o)&&s.push(o)})),s.length>0){s.push(t);try{t=r.union(s)}catch(m){w.warnOncePerTick("Failed to unify filter mask polygons. Polygon will be ignored.");continue}s.pop(),s.forEach((e=>l.delete(e)))}l.add(t)}return l.forEach((e=>a.push(e))),a.length>0?{spatialRelationship:e.spatialRelationship,geometries:a}:null}get _filterNeedsProjectionEngine(){const e=this.layer.filter;if(null==e||e.geometries.length<=1)return!1;const t=e.geometries.at(0).spatialReference;return e.geometries.some((({spatialReference:e})=>!e.equals(t)&&!y(e,t)))}get layerFilterUpdating(){return l(this._layerFilter)}initialize(){const{signal:e}=this._abortController;m((()=>this.destroyed||!this._geometryEngine&&this.layer?.filter?.geometries?.length),e).then((async()=>{s(e),this._geometryEngine=await import("../../geometry/geometryEngine.js")})).catch(a),this._projectionEngineLoaded=g(),m((()=>this.destroyed||!this._projectionEngineLoaded&&this._filterNeedsProjectionEngine),e).then((async()=>{s(e),await d(),this._projectionEngineLoaded=!0})).catch(a)}destroy(){this._abortController=o(this._abortController)}highlight(e){throw new Error("Not implemented")}queryFeatures(e,t){throw new Error("Not implemented")}queryObjectIds(e,t){throw new Error("Not implemented")}queryFeatureCount(e,t){throw new Error("Not implemented")}createQuery(){throw new Error("Not implemented")}queryExtent(e,t){throw new Error("Not implemented")}};e([p()],E.prototype,"layer",void 0),e([p()],E.prototype,"availableFields",null),e([p()],E.prototype,"maximumNumberOfFeatures",null),e([p({readOnly:!0})],E.prototype,"maximumNumberOfFeaturesExceeded",null),e([p()],E.prototype,"filter",void 0),e([p({readOnly:!0})],E.prototype,"layerFilter",null),e([p({readOnly:!0})],E.prototype,"_layerFilter",null),e([p()],E.prototype,"_geometryEngine",void 0),e([p()],E.prototype,"_projectionEngineLoaded",void 0),e([p()],E.prototype,"_filterNeedsProjectionEngine",null),e([p()],E.prototype,"layerFilterUpdating",null),E=e([c(f)],E);const j=E;export{j as default};
