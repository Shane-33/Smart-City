/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
import{_ as e}from"../../chunks/tslib.es6.js";import r from"../../core/Accessor.js";import{createTask as o}from"../../core/asyncUtils.js";import s from"../../core/Error.js";import{on as t}from"../../core/events.js";import{throwIfAborted as i,createResolver as l}from"../../core/promiseUtils.js";import{property as a}from"../../core/accessorSupport/decorators/property.js";import"../../core/accessorSupport/ensureType.js";import"../../core/arrayUtils.js";import"../../core/has.js";import{subclass as n}from"../../core/accessorSupport/decorators/subclass.js";import p from"../../geometry/Point.js";import{uploadProgressWeights as c}from"../../layers/graphics/sources/support/uploadProgressWeights.js";import{getSupportedExtensions as u}from"../../layers/support/infoFor3D.js";import{makeProgressManager as d,estimatedTransferTime as m}from"../../support/progressUtils.js";let f=class extends r{constructor(){super({}),this.files=[],this.progress=0,this._uploadTask=null,this._layer=null}destroy(){this.cancel(),this.files=[],this._layer=null,this._uploadTask=null}get state(){const e=this._uploadTask;return e&&0!==this.files.length?e.finished?e.error?"error":"success":"pending":"default"}get result(){return this._uploadTask?.value??null}get error(){return this._uploadTask?.error??null}uploadTo(e){this.cancel(),this.files=[],this._layer=e,this._uploadTask=o((async r=>{const o=await y(e);i(r),this.progress=0,this.files=o;const t=d(c.upload,(e=>{this.progress=e}),"Upload.uploadTo");if(0===o.length)return null;const{default:l}=await import("../../geometry/Mesh.js");i(r);const a=await l.extractAndFilterFiles(o,e);i(r),a.length>0&&(this.files=a);const n=new p({x:0,y:0,z:0,spatialReference:e.spatialReference}),u=await l.createFromFiles(n,a,{layer:e,signal:r,onProgress:t.makeOnProgress("createFromFiles")});if(i(r),!u)throw new s("editor:upload","could not upload or convert model");const f=a.reduce(((e,r)=>e+r.size),0),h=t.simulate("loadMesh",m(f));try{await u.load()}finally{h.remove()}return u}))}retry(){this._layer&&this.uploadTo(this._layer)}cancel(){this._uploadTask?.abort()}};e([a()],f.prototype,"files",void 0),e([a()],f.prototype,"progress",void 0),e([a()],f.prototype,"state",null),e([a()],f.prototype,"result",null),e([a()],f.prototype,"error",null),e([a()],f.prototype,"_uploadTask",void 0),e([a()],f.prototype,"_layer",void 0),f=e([n("esri.widgets.Editor.Upload")],f);let h=null;async function y(e){const{resolve:r,promise:o}=l(),s=document.createElement("input");s.type="file",s.multiple=!1,s.accept=[...u(e.infoFor3D),".zip"].join(","),s.style.display="none",document.body.appendChild(s);const i=t(s,"change",(()=>r(s.files?Array.from(s.files):[])));return h?h(s):s.click(),o.finally((()=>{i.remove(),s.remove()}))}function g(e){h=r=>{Promise.resolve().then((()=>e)).then((e=>{if(!h)return;const o=new DataTransfer;e.forEach((e=>o.items.add(e))),r.files=o.files,r.dispatchEvent(new Event("change"))}))}}function j(){h=null}export{f as Upload,j as clearPromptForFilesStub,g as stubFilePickerToSelect};
