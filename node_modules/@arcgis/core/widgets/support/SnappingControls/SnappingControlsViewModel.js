/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
import{_ as e}from"../../../chunks/tslib.es6.js";import r from"../../../core/Accessor.js";import s from"../../../core/Error.js";import{watch as t,initial as i}from"../../../core/reactiveUtils.js";import{property as o}from"../../../core/accessorSupport/decorators/property.js";import"../../../core/accessorSupport/ensureType.js";import"../../../core/arrayUtils.js";import"../../../core/has.js";import{subclass as a}from"../../../core/accessorSupport/decorators/subclass.js";import n from"../../../views/interactive/snapping/FeatureSnappingLayerSource.js";import p from"../../../views/interactive/snapping/SnappingOptions.js";import{canDisplayLayer as l}from"../../LayerList/support/layerListUtils.js";import{SnappingLayerListViewModel as d}from"./SnappingLayerListViewModel.js";const c="esri.widgets.support.SnappingControls.SnappingControlsViewModel";let y=class extends r{constructor(e){super(e),this.layerListViewModel=new d,this.snappingOptions=new p,this.view=null}initialize(){this.addHandles([t((()=>({viewModel:this.layerListViewModel,view:this.view})),(({viewModel:e,view:r})=>{e.view=r}),i),t((()=>({viewModel:this.layerListViewModel,sources:this.snappingOptions?.featureSources})),(({viewModel:e,sources:r})=>{e.featureSnappingSources=r}),i)])}get allLayersEnabled(){return(this.layerListViewModel?.selectableItems??[]).every((e=>e.enabled))}get allLayersDisabled(){return(this.layerListViewModel?.selectableItems??[]).every((e=>!e.enabled))}get layersEnabledCount(){return this.layerListViewModel?.selectableItems?.filter((e=>e.enabled)).length??0}get state(){return this.snappingOptions?"ready":"disabled"}toggleSnappingForLayers(e,r){e?.forEach((e=>r?this.enableSnappingForLayer(e):this.disableSnappingForLayer(e)))}toggleSnappingForAllLayers(e){this.layerListViewModel.selectableItems.forEach((({layer:{id:r}})=>{e?this.enableSnappingForLayer(r):this.disableSnappingForLayer(r)}))}enableSnappingForLayer(e){(this._findSnappingSourceForLayer(e)??this._makeSnappingSourceForLayer(e)).enabled=!0}disableSnappingForLayer(e){const r=this._findSnappingSourceForLayer(e);r&&(r.enabled=!1)}updateEnabledFeatureSources(e){for(const r of this.snappingOptions.featureSources)l(r.layer)&&(r.enabled=e.includes(r.layer.id))}_findSnappingSourceForLayer(e){return this.snappingOptions.featureSources.find((r=>r.layer.id===e))}_makeSnappingSourceForLayer(e){const r=this.layerListViewModel.operationalItemsFlat.find((r=>r.layer.id===e))?.layer;if(!r)throw new s("snapping-controls:layer-not-found",`cannot enable snapping for layer with id ${e} because no such layer was found in the view`);const t=new n({layer:r});return this.snappingOptions.featureSources.add(t),t}};e([o()],y.prototype,"allLayersEnabled",null),e([o()],y.prototype,"allLayersDisabled",null),e([o({constructOnly:!0})],y.prototype,"layerListViewModel",void 0),e([o()],y.prototype,"layersEnabledCount",null),e([o({type:p,nonNullable:!0})],y.prototype,"snappingOptions",void 0),e([o()],y.prototype,"state",null),e([o()],y.prototype,"view",void 0),y=e([a(c)],y);const u=y;export{u as default};
