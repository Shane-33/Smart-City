/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
import e from"../../core/Error.js";import t from"../../core/Logger.js";import{throwIfNotAbortError as r}from"../../core/promiseUtils.js";import{zoomToFeature as n,zoomToClusteredFeatures as o,browseClusteredFeatures as i,removeSelectedFeature as a}from"./actions.js";const c="esri.widgets.Popup.PopupViewModel",s=t.getLogger(c),u=t=>{const{event:c,view:s,viewModel:u}=t,{action:l}=c;if(!l)return Promise.reject(new e("trigger-action:missing-arguments","Event has no action"));const{disabled:d,id:g}=l;if(!g)return Promise.reject(new e("trigger-action:invalid-action","action.id is missing"));if(d)return Promise.reject(new e("trigger-action:invalid-action","Action is disabled"));if(g===n.id)return w(u).catch(r);if(g===o.id)return f(u);if(g===i.id)return u.browseClusterEnabled=!u.browseClusterEnabled,u.featureMenuOpen=u.browseClusterEnabled,Promise.resolve();if(g===a.id){u.visible=!1;const{selectedFeature:t}=u;if(!t)return Promise.reject(new e(`trigger-action:${a.id}`,"selectedFeature is required",{selectedFeature:t}));const{sourceLayer:r}=t;return r?r.remove(t):s?.graphics.remove(t),Promise.resolve()}return Promise.resolve()};function l(e){const{selectedFeature:t,location:r,view:n}=e;return n?t??r??null:null}function d(e){return!!e&&e.isAggregate&&"cluster"===e.sourceLayer?.featureReduction?.type}async function g(e,t){if("3d"!==t?.type||!e||"esri.Graphic"!==e.declaredClass)return!0;const r=t.getViewForGraphic(e);if(r&&"whenGraphicBounds"in r){let t=null;try{t=await r.whenGraphicBounds(e,{useViewElevation:!0})}catch(n){}return!t||!t.boundingBox||t.boundingBox[0]===t.boundingBox[3]&&t.boundingBox[1]===t.boundingBox[4]&&t.boundingBox[2]===t.boundingBox[5]}return!0}async function w(t){const{location:r,selectedFeature:o,view:i,zoomFactor:a}=t,c=l(t);if(!i||!c){const t=new e("zoom-to:invalid-target-or-view","Cannot zoom to location without a target and view.",{target:c,view:i});throw s.error(t),t}const u=i.scale/a,d=t.selectedFeature?.geometry,w=d??r,f=null!=w&&"point"===w.type&&await g(o,i);n.active=!0,n.disabled=!0;try{await t.zoomTo({target:{target:c,scale:f?u:void 0}})}catch(m){const t=new e("zoom-to:invalid-graphic","Could not zoom to the location of the graphic.",{graphic:o});s.error(t)}finally{n.active=!1,n.disabled=!1,t.zoomToLocation=null,f&&(t.location=w)}}async function f(t){const{selectedFeature:r,view:n}=t;if("2d"!==n?.type){const t=new e("zoomToCluster:invalid-view","View must be 2d MapView.",{view:n});throw s.error(t),t}if(!r||!d(r)){const t=new e("zoomToCluster:invalid-selectedFeature","Selected feature must represent an aggregate/cluster graphic.",{selectedFeature:r});throw s.error(t),t}const[i,a]=await p(n,r);o.active=!0,o.disabled=!0;const{extent:c}=await i.queryExtent(a);await t.zoomTo({target:c}),o.active=!1,o.disabled=!1}async function m(e){const{view:t,selectedFeature:r}=e;if(!t||!r)return;const[n,o]=await p(t,r),{extent:i}=await n.queryExtent(o);e.selectedClusterBoundaryFeature.geometry=i,t.graphics.add(e.selectedClusterBoundaryFeature)}async function v(e){const{selectedFeature:t,view:r}=e;if(!r||!t)return;const[n,o]=await p(r,t);i.active=!0,i.disabled=!0;const{features:a}=await n.queryFeatures(o);i.active=!1,i.disabled=!1,i.value=!0,e?.open({features:[t].concat(a),featureMenuOpen:!0})}async function p(e,t){const r=await e.whenLayerView(t.sourceLayer),n=r.createQuery(),o=t.getObjectId();return n.aggregateIds=null!=o?[o]:[],[r,n]}function y(e){i.value=!1;const t=e.features.filter((e=>d(e)));t.length&&(e.features=t)}function h(e){if(null==e)return null;switch(e.type){case"point":return e;case"extent":return e.center;case"polygon":return e.centroid;case"multipoint":case"polyline":return e.extent?.center;default:return null}}export{v as browseAggregateFeatures,m as displayClusterExtent,h as getPointFromGeometry,l as getSelectedTarget,d as isClusterFeature,y as removeClusteredFeaturesForBrowsing,u as triggerAction,f as zoomToClusterExtent,w as zoomToLocation};
