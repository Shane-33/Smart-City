/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
import{_ as e}from"../../chunks/tslib.es6.js";import t from"../../core/Collection.js";import r from"../../core/Error.js";import i from"../../core/Evented.js";import{isAbortError as s}from"../../core/promiseUtils.js";import{on as o,watch as l,syncAndInitial as n,when as a}from"../../core/reactiveUtils.js";import{property as u}from"../../core/accessorSupport/decorators/property.js";import"../../core/accessorSupport/ensureType.js";import"../../core/arrayUtils.js";import"../../core/has.js";import{subclass as c}from"../../core/accessorSupport/decorators/subclass.js";import{getLocale as d}from"../../intl/locale.js";import{fetchServiceDescription as h}from"../../rest/networkService.js";import p from"../../rest/support/RouteParameters.js";import m from"../../rest/support/Stop.js";import v from"../../rest/support/TravelMode.js";import{GoToMixin as g}from"../support/GoTo.js";function y(e){return"esri.Graphic"===e?.declaredClass}function f(e){return"esri.rest.support.Stop"===e?.declaredClass}var w;!function(e){e[e.Active=0]="Active",e[e.Complete=1]="Complete",e[e.Failed=2]="Failed",e[e.Idle=3]="Idle",e[e.Suspended=4]="Suspended"}(w||(w={}));let _=class extends(g(i.EventedAccessor)){constructor(e){super(e),this._highlight=null,this._loadPromise=null,this._loadController=null,this._routeController=null,this._serviceDescriptionStatus=w.Idle,this.apiKey=void 0,this.defaultTravelMode=null,this.departureTime="now",this.lastError=null,this.lastRoute=null,this.layer=null,this.maxStops=50,this.routeParameters=new p({directionsLengthUnits:"kilometers",findBestSequence:!1,returnZ:!0,startTime:null,startTimeIsUTC:!0,useTimeWindows:!1}),this.serviceDescription=null,this.view=null}initialize(){this.addHandles([o((()=>this.layer?.stops),"change",(()=>{this.clearResults()})),l((()=>this.layer),(e=>{if(null!=e){for(;e.stops.length<2;)e.stops.add(new m);this._set("defaultTravelMode",null),this.addHandles(a((()=>null!=this.serviceDescription?e.routeInfo?.analysisSettings?.travelMode:null),(e=>{this.defaultTravelMode=this._resolveDefaultTravelMode(e)}),{once:!0}))}}),n)])}get _directionsLanguage(){if(null==this.serviceDescription)return;const e=this.serviceDescription.directionsSupportedLanguages;if(!e)return;const t=(this.routeParameters.directionsLanguage??d()).slice(0,2);return e.find((e=>e.toLowerCase().slice(0,2)===t))}get impedanceAttribute(){const e=this.routeParameters.travelMode?.impedanceAttributeName??this.routeParameters.impedanceAttribute??this.serviceDescription?.impedance??null;return this.getCostAttribute(e)}get selectedTravelMode(){return null==this.serviceDescription?null:this.defaultTravelMode??this.serviceDescription.defaultTravelMode??this.serviceDescription.supportedTravelModes?.[0]??null}set selectedTravelMode(e){this._override("selectedTravelMode",e)}get state(){if(null!=this._routeController)return"routing";if(null!=this.lastError)return"error";switch(this._serviceDescriptionStatus){case w.Suspended:return"unauthenticated";case w.Idle:return"disabled";case w.Active:return"initializing";case w.Failed:return"error";default:return"ready"}}get timeAttribute(){const e=this.routeParameters.travelMode?.timeAttributeName??this.routeParameters.directionsTimeAttribute??this.serviceDescription?.directionsTimeAttribute??null;return this.getCostAttribute(e)}get travelModes(){const e=this.serviceDescription?.supportedTravelModes?.slice()??[];return null==this.defaultTravelMode||e.includes(this.defaultTravelMode)||e.unshift(this.defaultTravelMode),e}async load(){if(null!=this._loadPromise)return this._loadPromise;this._loadPromise=this._load(),await this._loadPromise,this._loadPromise=null}async highlight(e){if(this.clearHighlights(),!this.view||!this.layer)return;const t=await this.view.whenLayerView(this.layer);this._highlight=t.highlight(e)}clearHighlights(){null!=this._highlight&&(this._highlight.remove(),this._highlight=null)}centerAt(e){if(null==this.view)return;const t=f(e)||y(e)?e.geometry:e;null!=t&&this.callGoTo({target:t})}clearResults(){this._set("lastRoute",null),this.layer?.removeResult()}async getDirections(){const{apiKey:e,departureTime:t,layer:i,state:o}=this;if(null==i)throw new r("directions-view-model:missing-route-layer","A route layer must be associated with the view model.");if("unauthenticated"===o||"initializing"===o||"disabled"===o||this._serviceDescriptionStatus===w.Failed)throw new r("directions-view-model:not-loaded","Cannot get directions until view model loads.");this._set("lastError",null),null!=this._routeController&&(this._routeController.abort(),this._routeController=null);const l="now"===t,n="now"===t?new Date:t;if(n&&!l){const e=60*n.getTimezoneOffset()*1e3;n.setTime(n.getTime()-e)}const a=null!=this.view?this.view.spatialReference:null,u=this.routeParameters.clone();u.set({startTime:n,startTimeIsUTC:l,directionsLanguage:this._directionsLanguage,apiKey:e,outSpatialReference:a}),null!=this.selectedTravelMode&&(u.travelMode=this.selectedTravelMode);if(i.stops.filter((({geometry:e})=>null!=e)).length<2){const e=new r("directions-view-model:not-enough-stops","Not enough stops for routing");throw this._set("lastError",e),e}this._routeController=new AbortController;const{signal:c}=this._routeController;let d=null;try{d=await i.solve(u,{signal:c})}catch(h){if(!s(h)){const e=new r("directions-view-model:unable-to-route","Unable to route to these addresses",{error:h});throw this._set("lastError",e),this._set("lastRoute",null),e}}finally{this._routeController=null}for(const r of d.stops)null==r.geometry&&(r.name=null);return i.update(d),this._set("lastRoute",d),this.zoomToRoute(),d}getCostAttribute(e){return(this.serviceDescription?.networkDataset?.networkAttributes??[]).find((({name:t,usageType:r})=>t===e&&"cost"===r))??null}reset(){this.clearHighlights(),this.clearResults(),null!=this.layer&&(this.layer.removeAll(),this.layer.stops=new t([new m,new m]))}save(){if(!this.layer)throw new r("directions-view-model:missing-layer","save() requires a layer");return this.layer.save()}saveAs(e,t={}){if(!this.layer)throw new r("directions-view-model:missing-layer","saveAs() requires a layer");return this.layer.saveAs(e,t)}zoomToRoute(){const{view:e,layer:t}=this;if(null==e||null==t?.routeInfo)return;const{geometry:r}=t.routeInfo;if(null==r)return;const i=r.extent;if(!i)return;const s=i.width>i.height,o=i.clone().expand(s?2:1);this.callGoTo({target:o})}async _load(){if(null!=this.serviceDescription||null==this.layer)return;null!=this._loadController&&(this._loadController.abort(),this._loadController=null),this._loadController=new AbortController;const{signal:e}=this._loadController;try{this._serviceDescriptionStatus=w.Active;const t=await h(this.layer.url,this.apiKey,{signal:e});this._set("serviceDescription",t),this._serviceDescriptionStatus=w.Complete}catch(t){if(s(t))return void(this._serviceDescriptionStatus=w.Idle);if("identity-manager:user-aborted"===t.name)return void(this._serviceDescriptionStatus=w.Suspended);const e=new r("directions-view-model:service-metadata-unavailable","Cannot load route service metadata",{error:t});throw this._serviceDescriptionStatus=w.Failed,this._set("lastError",e),e}finally{this._loadController=null}}_resolveDefaultTravelMode(e){if(null==this.serviceDescription)return null;const{defaultTravelMode:t,supportedTravelModes:r}=this.serviceDescription,i=/^<(?<name>.*)>$/i.exec(e.name)?.groups?.name;if(i){const s=r?.find((({name:e})=>e.toLocaleLowerCase()===i.trim().toLocaleLowerCase())),o=s??t;return v.fromJSON({...o?.toJSON(),...e.toJSON()})}const s=r?.find((({name:t})=>t.toLocaleLowerCase()===e.name.toLocaleLowerCase()));return s??t}};e([u()],_.prototype,"_directionsLanguage",null),e([u()],_.prototype,"_routeController",void 0),e([u()],_.prototype,"_serviceDescriptionStatus",void 0),e([u()],_.prototype,"apiKey",void 0),e([u()],_.prototype,"defaultTravelMode",void 0),e([u()],_.prototype,"departureTime",void 0),e([u({readOnly:!0})],_.prototype,"impedanceAttribute",null),e([u()],_.prototype,"lastError",void 0),e([u({readOnly:!0})],_.prototype,"lastRoute",void 0),e([u()],_.prototype,"layer",void 0),e([u({type:Number,range:{min:2,max:50},nonNullable:!0})],_.prototype,"maxStops",void 0),e([u({type:p,nonNullable:!0})],_.prototype,"routeParameters",void 0),e([u()],_.prototype,"selectedTravelMode",null),e([u({readOnly:!0})],_.prototype,"serviceDescription",void 0),e([u({readOnly:!0})],_.prototype,"state",null),e([u({readOnly:!0})],_.prototype,"timeAttribute",null),e([u()],_.prototype,"travelModes",null),e([u()],_.prototype,"view",void 0),e([u()],_.prototype,"getDirections",null),e([u()],_.prototype,"zoomToRoute",null),_=e([c("esri.widgets.Directions.DirectionsViewModel")],_);const T=_;export{T as default};
