/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
import e from"../../Graphic.js";import t from"../../core/Logger.js";import{getOrCreateMapValue as r}from"../../core/MapUtils.js";import{f as o}from"../../chunks/vec3f64.js";import n from"../../geometry/Extent.js";import s from"../../geometry/Mesh.js";import i from"../../geometry/Point.js";import a from"../../geometry/SpatialReference.js";import u from"../../geometry/support/MeshGeoreferencedRelativeVertexSpace.js";import c from"../../geometry/support/MeshLocalVertexSpace.js";import f from"../../geometry/support/MeshTransform.js";import{ServiceAssetPart as m,ServiceAsset as p}from"../../geometry/support/meshUtils/External.js";import{getFormatIdMimeType as l}from"../../layers/support/infoFor3D.js";import g from"./FeatureSet.js";const h=()=>t.getLogger("esri.rest.support.meshFeatureSet");function y(t,r,o){const n=o.features;o.features=[],delete o.geometryType;const s=g.fromJSON(o);if(s.geometryType="mesh",!o.assetMaps)return s;const i=M(r,o.assetMaps),u=t.sourceSpatialReference??a.WGS84,c=o.globalIdFieldName,{outFields:f}=t,m=null!=f&&f.length>0?E(f.includes("*")?null:new Set(f)):()=>({});for(const a of n){const t=S(a,c,u,r,i);null!=t&&s.features.push(new e({geometry:t,attributes:m(a)}))}return s}function E(e){return({attributes:t})=>{if(!t)return{};if(!e)return t;for(const r in t)e.has(r)||delete t[r];return t}}function S(e,t,r,o,i){const a=e.attributes[t],f=i.get(a);if(null==f)return h().error("mesh-feature-set:asset-not-found","Service returned a feature which was not found in the asset map",e),null;if(!e.geometry)return h().error("mesh-feature-set:no-geometry","Service returned a feature without geometry",e),null;const{originPoint:m,originVector:p}=d(e,r,o),l=n.fromJSON(e.geometry);l.spatialReference=r;const g=j(e.attributes,o),y=f.projectVertices?new u({origin:p}):new c({origin:p}),E=T(f);return E?s.createWithExternalSource(m,E,{extent:l,transform:g,vertexSpace:y}):s.createIncomplete(m,{extent:l,transform:g,vertexSpace:y})}function d({attributes:e},t,{transformFieldRoles:r}){const n=e[r.originX],s=e[r.originY],a=e[r.originZ];return{originPoint:new i({x:n,y:s,z:a,spatialReference:t}),originVector:o(n,s,a)}}function j(e,{transformFieldRoles:t}){return new f({translation:[e[t.translationX],-e[t.translationZ],e[t.translationY]],rotationAxis:[e[t.rotationX],-e[t.rotationZ],e[t.rotationY]],rotationAngle:e[t.rotationDeg],scale:[e[t.scaleX],e[t.scaleZ],e[t.scaleY]]})}var w;function M(e,t){const o=new Map;for(const n of t){const t=n.parentGlobalId;if(null==t)continue;const s=n.assetName,i=n.assetType,a=n.assetHash,u=n.assetURL,c=n.conversionStatus,f=n.seqNo,m=l(i,e.supportedFormats);if(!m){h().error("mesh-feature-set:unknown-format",`Service returned an asset of type ${i}, but it does not list it as a supported type`);continue}const p=r(o,t,(()=>({projectVertices:P(n.flags).projectVertices,files:new Map})));r(p.files,s,(()=>({name:s,type:i,mimeType:m,status:D(c),parts:[]}))).parts[f]={hash:a,url:u}}return o}function T(e){const t=Array.from(e.files.values()),r=new Array;for(const o of t){if(o.status!==w.COMPLETED)return null;const e=new Array;for(const t of o.parts){if(!t)return null;e.push(new m(t.url,t.hash))}r.push(new p(o.name,o.mimeType,e))}return r}function D(e){switch(e){case"COMPLETED":case"SUBMITTED":return w.COMPLETED;case"INPROGRESS":return w.PENDING;default:return w.FAILED}}function P(e){return{projectVertices:e.includes("PROJECT_VERTICES")}}!function(e){e[e.FAILED=0]="FAILED",e[e.PENDING=1]="PENDING",e[e.COMPLETED=2]="COMPLETED"}(w||(w={}));export{M as assetMapFromAssetMapsJSON,S as extractMesh,y as meshFeatureSetFromJSON};
