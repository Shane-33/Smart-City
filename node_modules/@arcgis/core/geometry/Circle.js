/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
import{_ as e}from"../chunks/tslib.es6.js";import{convertUnit as r,isProjectedWKT as t,getMetersPerUnit as s,lengthToDegrees as i}from"../core/unitUtils.js";import{property as o}from"../core/accessorSupport/decorators/property.js";import"../core/accessorSupport/ensureType.js";import"../core/arrayUtils.js";import"../core/has.js";import{subclass as c}from"../core/accessorSupport/decorators/subclass.js";import{getReferenceEllipsoid as a}from"./ellipsoidUtils.js";import n from"./Point.js";import p from"./Polygon.js";import{directGeodeticSolver as l}from"./support/geodesicUtils.js";import{webMercatorToGeographic as u,geographicToWebMercator as h}from"./support/webMercatorUtils.js";import d from"./support/WKIDUnitConversion.js";var m;let f=m=class extends p{constructor(...e){super(...e),this.center=null,this.geodesic=!1,this.numberOfPoints=60,this.radius=1e3,this.radiusUnit="meters"}normalizeCtorArgs(e,r){let t;if(e?.center)t=e;else{if(e?.rings)return super.normalizeCtorArgs(e,r);t={center:e}}return{...super.normalizeCtorArgs(),...t,...r}}initialize(){const e=this.center,o=this.numberOfPoints;if(this.hasZ=e?.hasZ??!1,0!==this.rings.length||!e)return;const c=r(this.radius,this.radiusUnit,"meters"),n=e.spatialReference;let p,l="geographic";if(n.isWebMercator?l="webMercator":(null!=(n.wkid&&d[n.wkid])||(n.wkt2||n.wkt)&&t(n.wkt2||n.wkt))&&(l="projected"),this.geodesic){let r;switch(l){case"webMercator":r=u(e);break;case"projected":console.error("Creating a geodesic circle requires the center to be specified in web mercator or geographic coordinate system");break;case"geographic":r=e}p=this._createGeodesicCircle(r,c,o),"webMercator"===l&&(p=h(p))}else{let r;"webMercator"===l||"projected"===l?r=c/s(e.spatialReference):"geographic"===l&&(r=i(c,"meters",a(e.spatialReference).radius)),p=this._createPlanarCircle(e,r,o)}this.spatialReference=p.spatialReference,this.addRing(p.rings[0])}clone(){const{center:e,numberOfPoints:r,radius:t,radiusUnit:s,geodesic:i}=this;return new m({center:e?.clone(),numberOfPoints:r,radius:t,radiusUnit:s,geodesic:i})}_createGeodesicCircle(e,r,t){let s=0;const i=[];for(;s<360;){const o=[0,0],c=[e.x,e.y];l(o,c,s,r),this.hasZ&&o.push(e.z),i.push(o),s+=360/t}return i.push(i[0]),new p(i)}_createPlanarCircle(e,r,t){const s=[],i=2*Math.PI/t;for(let o=0;o<t;++o){const t=i*o,c=[e.x+Math.cos(-t)*r,e.y+Math.sin(-t)*r];this.hasZ&&c.push(e.z),s.push(c)}return s.push(s[0]),new p({spatialReference:e.spatialReference,rings:[s]})}};e([o({type:n})],f.prototype,"center",void 0),e([o()],f.prototype,"geodesic",void 0),e([o()],f.prototype,"numberOfPoints",void 0),e([o()],f.prototype,"radius",void 0),e([o()],f.prototype,"radiusUnit",void 0),f=m=e([c("esri.geometry.Circle")],f);const g=f;export{g as default};
