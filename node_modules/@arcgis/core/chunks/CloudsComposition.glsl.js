/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
import{p as e}from"./mat4.js";import{a as r}from"./mat4f64.js";import{EvaluateAmbientLighting as i}from"../views/3d/webgl-engine/core/shaderLibrary/shading/EvaluateAmbientLighting.glsl.js";import{Gamma as o}from"../views/3d/webgl-engine/core/shaderLibrary/shading/Gamma.glsl.js";import{MainLighting as s}from"../views/3d/webgl-engine/core/shaderLibrary/shading/MainLighting.glsl.js";import{PBRMode as a}from"../views/3d/webgl-engine/core/shaderLibrary/shading/PhysicallyBasedRenderingParameters.glsl.js";import{PiUtils as n}from"../views/3d/webgl-engine/core/shaderLibrary/shading/PiUtils.glsl.js";import{CloudsParallaxShading as d}from"../views/3d/webgl-engine/core/shaderLibrary/util/CloudsParallaxShading.glsl.js";import{ColorConversion as l}from"../views/3d/webgl-engine/core/shaderLibrary/util/ColorConversion.glsl.js";import{RgbaFloatEncoding as t}from"../views/3d/webgl-engine/core/shaderLibrary/util/RgbaFloatEncoding.glsl.js";import{Float3PassUniform as g}from"../views/3d/webgl-engine/core/shaderModules/Float3PassUniform.js";import{glsl as m}from"../views/3d/webgl-engine/core/shaderModules/interfaces.js";import{Matrix4PassUniform as c}from"../views/3d/webgl-engine/core/shaderModules/Matrix4PassUniform.js";import{ShaderBuilder as w}from"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js";import{VertexAttribute as v}from"../views/3d/webgl-engine/lib/VertexAttribute.js";function b(){const r=new w,{attributes:b,varyings:f,vertex:p,fragment:h}=r;return b.add(v.POSITION,"vec2"),f.add("worldRay","vec3"),p.uniforms.add(new c("inverseProjectionMatrix",((e,r)=>r.camera.inverseProjectionMatrix)),new c("inverseViewMatrix",((r,i)=>e(u,i.camera.viewMatrix)))),p.code.add(m`void main(void) {
vec3 posViewNear = (inverseProjectionMatrix * vec4(position, -1.0, 1.0)).xyz;
worldRay = (inverseViewMatrix * vec4(posViewNear, 0.0)).xyz;
gl_Position = vec4(position, 1.0, 1.0);
}`),h.include(l),h.include(t),r.include(i,{pbrMode:a.Disabled,lightingSphericalHarmonicsOrder:2}),r.include(n),r.include(o),r.include(s),r.include(d),h.uniforms.add(new g("cameraPosition",((e,r)=>r.camera.eye))),h.code.add(m`void main() {
vec4 cloudsColor = renderClouds(normalize(worldRay), cameraPosition);
fragColor = vec4((1.0 - totalFadeInOut) * cloudsColor.rgb, cloudsColor.a);
}`),r}const u=r(),f=Object.freeze(Object.defineProperty({__proto__:null,build:b},Symbol.toStringTag,{value:"Module"}));export{f as C,b};
