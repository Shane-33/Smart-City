/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
import{ScreenSpacePass as e}from"../views/3d/webgl-engine/core/shaderLibrary/ScreenSpacePass.glsl.js";import{NoParameters as r,glsl as i}from"../views/3d/webgl-engine/core/shaderModules/interfaces.js";import{ShaderBuilder as t}from"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js";import{Texture2DDrawUniform as o}from"../views/3d/webgl-engine/core/shaderModules/Texture2DDrawUniform.js";class l extends r{}function n(){const r=new t,{outputs:l,fragment:n}=r;return r.include(e),n.uniforms.add(new o("textureInput",(e=>e.input))),n.constants.add("outlineSize","int",Math.ceil(d/2)),l.add("fragGrid","vec2"),n.code.add(i`
    void main() {
      float red = 0.0;
      float green = 1.0;
      int cellSize = ${i.int(a)};
      vec2 texelSize = 1.0 / vec2(textureSize(textureInput, 0));
      vec2 offset = floor(gl_FragCoord.xy) * vec2(float(cellSize));

      for(int x = -outlineSize; x < cellSize + outlineSize; x += 2) {
        for(int y = -outlineSize; y < cellSize + outlineSize; y += 2) {
          vec2 coord = (offset + vec2(float(x), float(y))) * texelSize;
          vec4 value = texture(textureInput, coord);
          float mx = floor(max(value.g, value.b));

          red = max(red, ceil(value.r));
          green = min(green, mx);
          if(red == 1.0 && green == 0.0) {
            fragGrid = vec2(red, green);
            return;
          }
        }
      }
      fragGrid = vec2(red, green);
    }`),r}const a=32,d=9,s=.4,u=Object.freeze(Object.defineProperty({__proto__:null,HighlightDownsampleDrawParameters:l,blurSize:s,build:n,gridCellPixelSize:a,outlineSize:d},Symbol.toStringTag,{value:"Module"}));export{l as H,u as a,s as b,n as c,a as g,d as o};
