/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
import t from"../../core/Error.js";import{numericTypes as a}from"../../layers/support/fieldUtils.js";import{gaussianBlurRadiusPxToKernelDensityRadiusPt as r}from"../../renderers/support/heatmapUtils.js";import{verifyBasicFieldValidity as e,verifyFieldType as s}from"./support/utils.js";import{getFieldsList as i}from"../support/utils.js";import{LayerType as o,createLayerAdapter as l,getLayerTypeLabels as p}from"../support/adapters/support/layerUtils.js";const n=a;async function u(a){if(!a?.layer||!a.view)throw new t("heatmap-statistics:missing-parameters","'layer' and 'view' parameters are required");const u=[o.CSVLayer,o.FeatureLayer,o.OGCFeatureLayer,o.GeoJSONLayer,o.WFSLayer],{layer:m,...d}=a,f=l(m,u);if(!f)throw new t("heatmap-statistics:invalid-parameters","'layer' must be one of these types: "+p(u).join(", "));const c={layerAdapter:f,...d};c.radius=null==c.radius?null==c.blurRadius?18:r(c.blurRadius):c.radius;const y=null!=c.signal?{signal:c.signal}:null;await f.load(y);const h=c.field,w=h?f.getField(h):null,j=await i({field:h}),g=e(f,j,"heatmap-statistics:invalid-parameters");if(g)throw g;if(w){const t=s(f,w,"heatmap-statistics:invalid-parameters",n);if(t)throw t}return c}async function m(t){const{layerAdapter:a,...r}=await u(t);return a.heatmapStatistics(r)}export{m as default};
