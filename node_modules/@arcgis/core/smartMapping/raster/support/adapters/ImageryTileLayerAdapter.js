/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
import{_ as t}from"../../../../chunks/tslib.es6.js";import r from"../../../../core/Error.js";import{property as e}from"../../../../core/accessorSupport/decorators/property.js";import"../../../../core/accessorSupport/ensureType.js";import"../../../../core/arrayUtils.js";import"../../../../core/has.js";import{subclass as a}from"../../../../core/accessorSupport/decorators/subclass.js";import s from"../../../../geometry/Extent.js";import{estimateStatisticsHistograms as o}from"../../../../layers/support/rasterFunctions/stretchUtils.js";import i from"./RasterLayerAdapter.js";let n=class extends i{async generateRasterInfo(t){const{layer:r}=this,e=t?.rasterFunction;if("imagery-tile"===r.type&&e)try{return r.generateRasterInfo(e,{signal:t?.signal})}catch{return r.rasterInfo}return this.rasterInfo}async estimateStatisticsHistograms(t){const{layer:e}=this,a=e.multidimensionalDefinition?.[0]?.variableName??"",s=`${e.rasterFunction?.functionName??"default"}${a}`,i=this._statsCache.get(s);if(i)return i;const{raster:n}=e,{extent:m,width:l,height:c}=this._getSamplePixelBlockDescriptor(n.rasterInfo),{pixelBlock:h}=await e.fetchPixels(m,l,c,t);if(null==h)throw new r("raster-layer-adapter","Unable to estimate histograms");const p=o(h);return p&&this._statsCache.put(s,p),p}supportsMultidirectionalHillshade(){return!0}load(t){return this.addResolvingPromise(this.layer.load(t).then((()=>this.rasterInfo=this.layer.raster.rasterInfo))),Promise.resolve(this)}_getSamplePixelBlockDescriptor(t,r=1e3){const{pyramidScalingFactor:e,maximumPyramidLevel:a}=t.storageInfo;let{extent:o,width:i,height:n,pixelSize:m}=t,l=Math.ceil(Math.log(Math.max(i,n)/r)/Math.log(e))-1,c=0,h=0;if(l<=a){const t=e**l;i=Math.floor(i/t),n=Math.floor(n/t)}else l=0,i=Math.min(i,r),n=Math.min(n,r),c=Math.max(Math.floor(i/2-500),0),h=Math.max(Math.floor(n/2-500),0),o=new s({xmin:o.xmin+c*m.x,xmax:Math.min(o.xmax,o.xmin+c*m.x*r),ymin:o.ymin+h*m.y,ymax:Math.min(o.ymax,o.ymin+h*m.y*r)});return{extent:o,width:i,height:n,origin:{x:c,y:h}}}};t([e()],n.prototype,"layer",void 0),n=t([a("esri.smartMapping.support.adapters.ImageryTileLayerAdapter")],n);const m=n;export{m as default};
