/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
import{_ as t}from"../../../../chunks/tslib.es6.js";import"../../../../geometry.js";import{property as e}from"../../../../core/accessorSupport/decorators/property.js";import"../../../../core/accessorSupport/ensureType.js";import"../../../../core/arrayUtils.js";import"../../../../core/has.js";import{subclass as s}from"../../../../core/accessorSupport/decorators/subclass.js";import{estimateStatisticsFromHistograms as r}from"../../../../layers/support/rasterFunctions/stretchUtils.js";import o from"../../../../rest/support/ImageHistogramParameters.js";import a from"./RasterLayerAdapter.js";import i from"../../../../geometry/Point.js";let n=class extends a{generateRasterInfo(t){const e=t?.rasterFunction;try{return this.layer.generateRasterInfo(e,{signal:t?.signal})}catch{return Promise.resolve(this.layer.serviceRasterInfo)}}async estimateStatisticsHistograms(t){const{layer:e}=this,s=e.mosaicRule?.multidimensionalDefinition?.[0]?.variableName??"",a=`${t?.rasterFunction?.functionName??"default"}${s}`,n=this._statsCache.get(a);if(n)return n;let{width:c,height:p,pixelSize:m}=e.rasterInfo,l=1;for(;c>2e3||p>2e3;)c/=2,p/=2,l*=2;const u=t?.rasterFunction??e.rasterFunction,{fullExtent:h,mosaicRule:g}=e;m=new i(m.x*l,m.y*l,h.spatialReference);const f=new o({geometry:h,pixelSize:m,renderingRule:u,mosaicRule:g});let y;if(e.capabilities.operations.supportsComputeStatisticsHistograms)y=await e.computeStatisticsHistograms(f,t);else{const{histograms:s}=await e.computeHistograms(f,t);y={statistics:r(s),histograms:s}}return y&&this._statsCache.put(a,y),y}supportsMultidirectionalHillshade(){return this.layer.version>=10.81}load(t){return this.addResolvingPromise(this.layer.load(t).then((()=>{this.generateRasterInfo({rasterFunction:this.rasterFunction,signal:t?.signal}).then((t=>this.rasterInfo=t))}))),Promise.resolve(this)}};t([e()],n.prototype,"layer",void 0),n=t([s("esri.smartMapping.support.adapters.ImageryLayerAdapter")],n);const c=n;export{c as default};
