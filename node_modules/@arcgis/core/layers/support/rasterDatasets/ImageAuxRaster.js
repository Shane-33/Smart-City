/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
import{_ as t}from"../../../chunks/tslib.es6.js";import"../../../geometry.js";import e from"../../../core/Error.js";import has from"../../../core/has.js";import{eachAlways as s,createAbortError as r}from"../../../core/promiseUtils.js";import{property as a}from"../../../core/accessorSupport/decorators/property.js";import"../../../core/accessorSupport/ensureType.js";import"../../../core/arrayUtils.js";import{subclass as o}from"../../../core/accessorSupport/decorators/subclass.js";import i from"./BaseRaster.js";import n from"./InMemoryRaster.js";import{parsePAMInfo as l}from"./pamParser.js";import{getFormat as m}from"../rasterFormats/RasterCodec.js";import{estimateStatisticsFromHistograms as p}from"../rasterFunctions/stretchUtils.js";import c from"../rasterTransforms/PolynomialTransform.js";import f from"../../../geometry/SpatialReference.js";import u from"../../../geometry/Extent.js";let h=class extends i{async open(t){await this.init();const e=await this._fetchData(t);let{spatialReference:s,statistics:r,histograms:a,transform:o}=await this._fetchAuxiliaryData(t);const i=!s;i&&(s=new f({wkid:3857})),a?.length&&null==r&&(r=p(a));const{width:l,height:m}=e;let c=new u({xmin:-.5,ymin:.5-m,xmax:l-.5,ymax:.5,spatialReference:s});const h=o?o.forwardTransform(c):c;let d=!0;if(o){const t=o.forwardCoefficients;d=t&&0===t[1]&&0===t[2],d&&(o=null,c=h)}const w=new n({data:{extent:h,nativeExtent:c,transform:o,pixelBlock:e,statistics:r,histograms:a,keyProperties:{DateType:"Processed"},isPseudoSpatialReference:i}});await w.open(),w.data=null,this._set("rasterInfo",w.rasterInfo),this._inMemoryRaster=w}fetchRawTile(t,e,s,r={}){return this._inMemoryRaster.fetchRawTile(t,e,s,r)}async _fetchData(t){const{data:s}=await this.request(this.url,{responseType:"array-buffer",signal:t?.signal}),r=m(s).toUpperCase();if("JPG"!==r&&"PNG"!==r&&"GIF"!==r&&"BMP"!==r)throw new e("image-aux-raster:open","the data is not a supported format");this._set("datasetFormat",r);const a=r.toLowerCase(),o="gif"===a||"bmp"===a||!has("ios"),i=await this.decodePixelBlock(s,{format:a,useCanvas:o,hasNoZlibMask:!0});if(null==i)throw new e("image-aux-raster:open","the data cannot be decoded");return i}async _fetchAuxiliaryData(t){const e=t?.signal,a=this.ioConfig.skipExtensions??[],o=a.includes("aux.xml")?null:this.request(this.url+".aux.xml",{responseType:"xml",signal:e}),i=this.datasetFormat,n="JPG"===i?"jgw":"PNG"===i?"pgw":"BMP"===i?"bpw":null,m=n&&a.includes(n)?null:this.request(this.url.slice(0,this.url.lastIndexOf("."))+"."+n,{responseType:"text",signal:e}),p=await s([o,m]);if(e?.aborted)throw r();const f=l(p[0].value?.data);if(!f.transform){const t=p[1].value?p[1].value.data.split("\n").slice(0,6).map((t=>Number(t))):null;f.transform=6===t?.length?new c({forwardCoefficients:[t[4],t[5],t[0],-t[1],t[2],-t[3]]}):null}return f}};t([a({type:String,json:{write:!0}})],h.prototype,"datasetFormat",void 0),h=t([o("esri.layers.support.rasterDatasets.ImageAuxRaster")],h);const d=h;export{d as default};
