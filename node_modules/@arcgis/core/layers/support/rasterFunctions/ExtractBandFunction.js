/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
import{_ as t}from"../../../chunks/tslib.es6.js";import{property as e}from"../../../core/accessorSupport/decorators/property.js";import"../../../core/accessorSupport/ensureType.js";import"../../../core/arrayUtils.js";import"../../../core/has.js";import{subclass as n}from"../../../core/accessorSupport/decorators/subclass.js";import{getBandMatrix3 as s}from"./bandIndexUtils.js";import r from"./BaseRasterFunction.js";import a from"./ExtractBandFunctionArguments.js";import{MissingBandAction as o}from"./pixelUtils.js";let i=class extends r{constructor(){super(...arguments),this.functionName="ExtractBand",this.functionArguments=null,this.rasterArgumentNames=["raster"]}_bindSourceRasters(){const{functionArguments:t,sourceRasterInfos:e}=this,n=e[0],{method:s,bandNames:r,bandWavelengths:a,bandIds:i,missingBandAction:l}=t,u=r?.length&&("name"===s||"id"!==s&&!i?.length),c=a?.length&&("wavelength"===s||"id"!==s&&!i?.length),h=l===o.fail,d=u?this._matchBandNames(n,r):c?this._matchBandWavelengths(n,a,h):this._matchBandIds(n,i,h);if(null==d){return{success:!1,supportsGPU:!1,error:`extract-band-function: Invalid ${u?"band names":c?"band wavelengths":"band ids"} for the imagery data source`}}this.functionArguments.bandIds=d,this.functionArguments.method="id",this.outputPixelType=this._getOutputPixelType("f32");const m=n.clone();m.pixelType=this.outputPixelType,m.bandCount=d.length;const{statistics:p,histograms:g}=m;null!=p&&p.length&&(m.statistics=d.map((t=>p[t]||p[p.length-1]))),null!=g&&g.length&&(m.histograms=d.map((t=>g[t]||g[g.length-1])));let f=m.keyProperties?.BandProperties;f?.length&&(f=d.map((t=>t>=f.length?f[f.length-1]:f[t])),m.keyProperties={...m.keyProperties,BandProperties:f}),this.rasterInfo=m;return{success:!0,supportsGPU:m.bandCount<=3}}_processPixels(t){const e=t.pixelBlocks?.[0];if(null==e)return null;const n=e.pixels.length,s=this.functionArguments.bandIds.map((t=>t>=n?n-1:t));return e.extractBands(s)}_getWebGLParameters(){let t;if(this.isInputBandIdsSwizzled)t=this.swizzledBandSelection.length?this.swizzledBandSelection:[0,1,2];else{t=[...this.functionArguments.bandIds],0===t.length?t=[0,1,2]:t.length<3&&(t[1]=t[1]??t[0],t[2]=t[2]??t[1]);for(let e=0;e<3;e++)t[e]=Math.min(t[e],2)}return{bandIndexMat3:s(t)}}_getInputBandIds(t){const e=t.length;return this.functionArguments.bandIds.map((t=>t>=e?e-1:t)).map((e=>t[e]))}_matchBandNames(t,e){const n=t.bandInfos.map((({name:t})=>t.toLowerCase())),s=[];for(let r=0;r<e.length;r++){const t=e[r].toLowerCase();let a=n.indexOf(t);if(-1===a&&"nearinfrared"===t&&(a=n.findIndex((t=>t.startsWith("nearinfrared_1"))),-1===a&&(a=n.findIndex((t=>t.startsWith("nearinfrared"))))),-1===a)return null;s.push(a)}return s}_matchBandIds(t,e,n){const{bandCount:s}=t;return!e?.length||n&&e.some((t=>t<0||t>=s))?null:e}_matchBandWavelengths(t,e,n){const{bandInfos:s}=t,r=[];for(let i=0;i<s.length;i++){const{minWavelength:t,maxWavelength:e}=s[i];if(!t||!e)return null;r.push({minWavelength:t,maxWavelength:e})}const{wavelengthMatchTolerance:a}=this.functionArguments,o=[];for(let i=0;i<e.length;i++){const t=e[i];let s=!1,l=-1,u=Number.MAX_VALUE;for(let e=0;e<r.length;e++){const n=r[e],a=t>=n.minWavelength&&t<=n.maxWavelength,o=Math.abs(t-(n.minWavelength+n.maxWavelength)/2);a?o<u&&(s=!0,l=e,u=o):!s&&o<u&&(l=e,u=o)}if(!s&&a&&u<a&&(s=!0),!s&&n)return null;o.push(l)}return o}};t([e({json:{write:!0,name:"rasterFunction"}})],i.prototype,"functionName",void 0),t([e({type:a,json:{write:!0,name:"rasterFunctionArguments"}})],i.prototype,"functionArguments",void 0),t([e()],i.prototype,"rasterArgumentNames",void 0),i=t([n("esri.layers.support.rasterFunctions.ExtractBandFunction")],i);const l=i;export{l as default};
