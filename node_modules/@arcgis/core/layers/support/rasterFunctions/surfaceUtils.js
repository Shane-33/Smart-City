/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
import t from"../PixelBlock.js";import{isValidPixelBlock as e}from"./pixelUtils.js";const i=1,s=1/111e3;function n(t){let{altitude:e,azimuth:i}=t;const{hillshadeType:n,pixelSizePower:a=1,pixelSizeFactor:l=1,scalingType:o,isGCS:r,resolution:c}=t,h="multi-directional"===n?2*t.zFactor:t.zFactor,{x:u,y:f}=c;let d=h/(8*u),p=h/(8*f);if(r&&h>.001&&(d/=s,p/=s),"adjusted"===o)if(r){const t=u*s,e=f*s;d=(h+t**a*l)/(8*t),p=(h+e**a*l)/(8*e)}else d=(h+u**a*l)/(8*u),p=(h+f**a*l)/(8*f);let x=(90-e)*Math.PI/180,w=Math.cos(x),y=(360-i+90)*Math.PI/180,M=Math.sin(x)*Math.cos(y),m=Math.sin(x)*Math.sin(y);const A=[315,270,225,360,180,0],g=[60,60,60,60,60,90],k=new Float32Array([3,5,3,2,1,4]),z=k.reduce(((t,e)=>t+e)),F=k.map((t=>t/z)),P="multi-directional"===n?A.length:1,C=new Float32Array(6),Z=new Float32Array(6),v=new Float32Array(6);if("multi-directional"===n)for(let s=0;s<P;s++)e=g[s],i=A[s],x=(90-e)*Math.PI/180,w=Math.cos(x),y=(360-i+90)*Math.PI/180,M=Math.sin(x)*Math.cos(y),m=Math.sin(x)*Math.sin(y),C[s]=w,Z[s]=M,v[s]=m;else C.fill(w),Z.fill(M),v.fill(m);return{resolution:c,factor:[d,p],sinZcosA:M,sinZsinA:m,cosZ:w,sinZcosAs:Z,sinZsinAs:v,cosZs:C,weights:F,hillshadeType:["traditional","multi-directional"].indexOf(n)}}function a(t,e){const{width:s,height:n}=t,a=s*n,l=new Uint8Array(a),o=null!=t.mask;let r;if(o){r=new Uint8Array(t.mask);for(let t=0;t<r.length;t++)r[t]&&(l[t]=1,r[t]=1)}const c=t.pixels[0],h=new Float32Array(a),u=new Float32Array(a);let f,d=0;if(e){const{resolution:t}=e,i=t?(t.x+t.y)/2:1;d=200*e.zFactor/(i*i),f=new Float32Array(a)}const p=e?.curvatureType;let x,w,y,M,m,A,g,k;for(let z=i;z<n-i;z++){const t=z*s;for(let e=i;e<s-i;e++){const i=t+e;if(!r||0!==r[i]){if(r){if(r[i-s-1]+r[i-s]+r[i-s+1]+r[i-1]+r[i+1]+r[i+s-1]+r[i+s]+r[i+s+1]<7){l[i]=0;continue}x=r[i-s-1]?c[i-s-1]:c[i],w=r[i-s]?c[i-s]:c[i],y=r[i-s+1]?c[i-s+1]:c[i],M=r[i-1]?c[i-1]:c[i],m=r[i+1]?c[i+1]:c[i],A=r[i+s-1]?c[i+s-1]:c[i],g=r[i+s]?c[i+s]:c[i],k=r[i+s+1]?c[i+s+1]:c[i]}else x=c[i-s-1],w=c[i-s],y=c[i-s+1],M=c[i-1],m=c[i+1],A=c[i+s-1],g=c[i+s],k=c[i+s+1];if(h[i]=y+m+m+k-(x+M+M+A),u[i]=A+g+g+k-(x+w+w+y),null!=f){const t=c[i],e=.5*(M+m)-t,s=.5*(w+g)-t;if("standard"===p)f[i]=-d*(e+s);else{const t=(-x+y+A-k)/4,n=(-M+m)/2,a=(w-g)/2,l=n*n,o=a*a,r=l+o;r&&(f[i]="profile"===p?d*(e*l+s*o+t*n*a)/r:-d*(e*o+s*l-t*n*a)/r)}}}}}return{outMask:o?l:null,dzxs:h,dzys:u,curvatures:f}}function l(t,e,i){for(let s=0;s<i;s++)t[s*e]=t[s*e+1],t[(s+1)*e-1]=t[(s+1)*e-2];for(let s=1;s<e-1;s++)t[s]=t[s+e],t[s+(i-1)*e]=t[s+(i-2)*e]}function o(s,o){if(!e(s))return s;const{factor:r,sinZcosA:c,sinZsinA:h,cosZ:u,sinZcosAs:f,sinZsinAs:d,cosZs:p,weights:x}=n(o),[w,y]=r,M="traditional"===o.hillshadeType,{width:m,height:A}=s,g=new Uint8Array(m*A),{dzxs:k,dzys:z,outMask:F}=a(s);for(let t=i;t<A-i;t++){const e=t*m;for(let t=i;t<m-i;t++){const i=e+t;if(!F||F[i]){const t=k[i]*w,e=z[i]*y,s=Math.sqrt(1+t*t+e*e);let n=0;if(M){let i=255*(u+h*e-c*t)/s;i<0&&(i=0),n=i}else{const i=d.length;for(let a=0;a<i;a++){let i=255*(p[a]+d[a]*e-f[a]*t)/s;i<0&&(i=0),n+=i*x[a]}}g[i]=255&n}}}l(g,m,A);return new t({width:m,height:A,pixels:[g],mask:F,pixelType:"u8",validPixelCount:s.validPixelCount,statistics:[{minValue:0,maxValue:255}]})}function r(t,i,s,n){if(!e(t)||!e(i))return;const{min:a,max:l}=n,o=t.pixels[0],{pixels:r,mask:c}=i,h=r[0],u=255.00001/(l-a),f=new Uint8ClampedArray(h.length),d=new Uint8ClampedArray(h.length),p=new Uint8ClampedArray(h.length),x=s.length-1;for(let e=0;e<h.length;e++){if(c&&0===c[e])continue;const t=Math.floor((h[e]-a)*u),[i,n]=s[t<0?0:t>x?x:t],l=o[e],r=l*n,w=r*(1-Math.abs(i%2-1)),y=l-r;switch(Math.floor(i)){case 0:f[e]=r+y,d[e]=w+y,p[e]=y;break;case 1:f[e]=w+y,d[e]=r+y,p[e]=y;break;case 2:f[e]=y,d[e]=r+y,p[e]=w+y;break;case 3:f[e]=y,d[e]=w+y,p[e]=r+y;break;case 4:f[e]=w+y,d[e]=y,p[e]=r+y;break;case 5:case 6:f[e]=r+y,d[e]=y,p[e]=w+y}}t.pixels=[f,d,p],t.updateStatistics()}function c(n,o){if(!e(n))return n;const r=o.zFactor,c=o.pixelSizePower??1,h=o.pixelSizeFactor??1,u=o.slopeType,f=o.isGCS,{x:d,y:p}=o.resolution;let x=r/(8*d),w=r/(8*p);f&&Math.abs(r-1)<1e-4&&(x/=s,w/=s),"adjusted"===u&&(x=(r+d**c*h)/(8*d),w=(r+p**c*h)/(8*p));const{dzxs:y,dzys:M,outMask:m}=a(n),{width:A,height:g}=n,k=new Float32Array(A*g);for(let t=i;t<g-i;t++){const e=t*A;for(let t=i;t<A-i;t++){const i=e+t;if(!m||m[i]){const s=y[i]*x,n=M[i]*w,a=Math.sqrt(s*s+n*n);k[e+t]="percent-rise"===u?100*a:57.2957795*Math.atan(a)}}}l(k,A,g);const z=new t({width:A,height:g,pixels:[k],mask:m,pixelType:"f32",validPixelCount:n.validPixelCount});return z.updateStatistics(),z}function h(s,n={}){if(!e(s))return s;const{resolution:o}=n,r=o?1/o.x:1,c=o?1/o.y:1,{dzxs:h,dzys:u,outMask:f}=a(s),{width:d,height:p}=s,x=new Float32Array(d*p);for(let t=i;t<p-i;t++){const e=t*d;for(let t=i;t<d-i;t++){const i=e+t;if(!f||f[i]){const s=h[i]*r,n=u[i]*c;let a=-1;0===s&&0===n||(a=90-57.29578*Math.atan2(n,-s),a<0&&(a+=360),360===a?a=0:a>360&&(a%=360)),x[e+t]=a}}}l(x,d,p);return new t({width:d,height:p,pixels:[x],mask:f,pixelType:"f32",validPixelCount:s.validPixelCount,statistics:[{minValue:-1,maxValue:360}]})}function u(i,s){if(!e(i))return i;const{curvatures:n,outMask:o}=a(i,s),{width:r,height:c}=i;l(n,r,c);const h=new t({width:r,height:c,pixels:[n],mask:o,pixelType:"f32",validPixelCount:i.validPixelCount});return h.updateStatistics(),h}export{h as aspect,n as calculateHillshadeParams,u as curvature,s as gcsFactor,o as hillshade,c as slope,r as tintHillshade};
