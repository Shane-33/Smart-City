/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
import{_ as e}from"../../../chunks/tslib.es6.js";import r from"../../../core/Error.js";import{JSONSupport as o}from"../../../core/JSONSupport.js";import{property as t}from"../../../core/accessorSupport/decorators/property.js";import"../../../core/accessorSupport/ensureType.js";import"../../../core/arrayUtils.js";import"../../../core/has.js";import{subclass as s}from"../../../core/accessorSupport/decorators/subclass.js";import{fetchArcGISServiceJSON as i}from"../../../support/requestPresets.js";let n=class extends o{constructor(){super(...arguments),this.url=null}};e([t({type:Number,json:{write:!0}})],n.prototype,"lod",void 0),e([t({type:String,json:{write:!0}})],n.prototype,"rasterFunction",void 0),e([t({type:String,json:{write:!0}})],n.prototype,"url",void 0),n=e([s("esri.layers.orientedImagery.core.ElevationSourceDefinitions.ElevationSource")],n);let p=class extends o{};e([t({type:Number,json:{write:!0}})],p.prototype,"constantElevation",void 0),p=e([s("esri.layers.orientedImagery.cor.ElevationSourceDefinitions.ConstantElevation")],p);const a=e=>"constantElevation"in e;async function c(e){const o=await i(e),{tileInfo:t,cacheType:s}=o;return o.hasOwnProperty("bandCount")&&o.hasOwnProperty("pixelSizeX")?"LERC"!==t?.format?.toUpperCase()||s&&"elevation"!==s.toLowerCase()?{isSupported:!1,error:new r("elevation-source:unsupported-imagery-service","Only elevation 3d services are supported")}:{isSupported:!0}:{isSupported:!1,error:new r("elevation-source:invalid-service-url",`ElevationSource URL expects an elevation 3D image service but given ${e}`)}}export{p as ConstantElevation,n as ElevationSource,a as isConstantElevation,c as validateElevationSourceURL};
