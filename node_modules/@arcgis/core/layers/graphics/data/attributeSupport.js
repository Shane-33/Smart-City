/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
import e from"../../../core/Error.js";import{WhereClauseCache as i}from"../../../core/sql/WhereClauseCache.js";import{kebabDict as r}from"../../support/fieldType.js";const t=new i(50,500),s="unsupported-query",n=" as ",o=new Set(["esriFieldTypeOID","esriFieldTypeSmallInteger","esriFieldTypeBigInteger","esriFieldTypeInteger","esriFieldTypeSingle","esriFieldTypeDouble","esriFieldTypeLong"]),a=new Set(["esriFieldTypeDate","esriFieldTypeDateOnly","esriFieldTypeTimeOnly","esriFieldTypeTimestampOffset"]),l=new Set(["esriFieldTypeString","esriFieldTypeGUID","esriFieldTypeGlobalID",...o,...a]);function d(i,r,n={}){const o=c(r,i);if(!o){const n=t.getError(r,i);throw new e(s,"invalid SQL expression",{expression:r,error:n})}const a=n.expressionName||"expression";if(n.validateStandardized&&!o.isStandardized)throw new e(s,`${a} is not standard`,{expression:r});if(n.validateAggregate&&!o.isAggregate)throw new e(s,`${a} does not contain a valid aggregate function`,{expression:r});return o.fieldNames}function p(e,i,r,t){if(!r)return!0;const s="where clause";return g(e,i,d(e,r,{validateStandardized:!0,expressionName:s}),{expressionName:s,query:t}),!0}function f(i,r,t,n,o){if(!t)return!0;const a="having clause",l=d(i,t,{validateAggregate:!0,expressionName:a});g(i,r,l,{expressionName:a,query:o});const p=c(t,i),f=p?.getExpressions().every((e=>{const{aggregateType:r,field:t}=e,s=i.get(t)?.name;return n.some((e=>{const{onStatisticField:t,statisticType:n}=e,o=i.get(t)?.name;return o===s&&n.toLowerCase().trim()===r}))}));if(!f)throw new e(s,"expressions in having clause should also exist in outStatistics",{having:t});return!0}function c(e,i){return e?t.get(e,i):null}function u(e){return/\((.*?)\)/.test(e)?e:e.split(n)[0]}function y(e){return e.split(n)[1]}function g(i,r,t,n={}){const o=new Map;if(m(o,i,r,n.allowedFieldTypes??l,t),o.size){const i=n.expressionName??"expression";throw new e(s,`${i} contains invalid or missing fields`,{errors:Array.from(o.values()),query:n.query})}}function m(e,i,r,t,s){for(const o of s){if("*"===o)continue;if(i.get(o))T(e,i,r,t,o);else try{const s=d(i,u(o),{validateStandardized:!0});for(const n of s)T(e,i,r,t,n)}catch(n){e.set(o,{type:"expression-error",expression:o,error:n})}}}function T(e,i,t,s,n){if("*"===n)return;const o=i.get(n);o?t.has(o.name)?!1===s?.has(o.type)&&e.set(n,{type:"invalid-type",fieldName:o.name,fieldType:r.fromJSON(o.type),allowedFieldTypes:Array.from(s,(e=>r.fromJSON(e)))}):e.set(n,{type:"missing-field",fieldName:o.name}):e.set(n,{type:"invalid-field",fieldName:n})}export{a as allDateAndTimeFieldTypes,y as getAliasFromFieldName,u as getExpressionFromFieldName,c as getWhereClause,o as numericFieldTypes,g as validateFields,f as validateHaving,p as validateWhere};
