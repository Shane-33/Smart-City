/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
function t(t,n){return t?n?4:3:n?3:2}function n(n,I,o,u,N){if(!I?.lengths.length)return null;const l="upperLeft"===N?.originPosition?-1:1;n.lengths.length&&(n.lengths.length=0),n.coords.length&&(n.coords.length=0);const s=n.coords,c=[],f=o?[Number.POSITIVE_INFINITY,Number.NEGATIVE_INFINITY,Number.POSITIVE_INFINITY,Number.NEGATIVE_INFINITY,Number.POSITIVE_INFINITY,Number.NEGATIVE_INFINITY]:[Number.POSITIVE_INFINITY,Number.NEGATIVE_INFINITY,Number.POSITIVE_INFINITY,Number.NEGATIVE_INFINITY],{lengths:T,coords:i}=I,h=t(o,u);let g=0;for(const t of T){const n=e(f,i,g,t,o,u,l);n&&c.push(n),g+=t*h}if(c.sort(((t,n)=>{let e=l*t[2]-l*n[2];return 0===e&&o&&(e=t[4]-n[4]),e})),c.length){let t=6*c[0][2];s[0]=c[0][0]/t,s[1]=c[0][1]/t,o&&(t=6*c[0][4],s[2]=0!==t?c[0][3]/t:0),(s[0]<f[0]||s[0]>f[1]||s[1]<f[2]||s[1]>f[3]||o&&(s[2]<f[4]||s[2]>f[5]))&&(s.length=0)}if(!s.length){const t=I.lengths[0]?r(i,0,T[0],o,u):null;if(!t)return null;s[0]=t[0],s[1]=t[1],o&&t.length>2&&(s[2]=t[2])}return n}function e(n,e,r,I,o,u,N=1){const l=t(o,u);let s=r,c=r+l,f=0,T=0,i=0,h=0,g=0;for(let t=0,b=I-1;t<b;t++,s+=l,c+=l){const t=e[s],r=e[s+1],I=e[s+2],u=e[c],N=e[c+1],l=e[c+2];let E=t*N-u*r;h+=E,f+=(t+u)*E,T+=(r+N)*E,o&&(E=t*l-u*I,i+=(I+l)*E,g+=E),t<n[0]&&(n[0]=t),t>n[1]&&(n[1]=t),r<n[2]&&(n[2]=r),r>n[3]&&(n[3]=r),o&&(I<n[4]&&(n[4]=I),I>n[5]&&(n[5]=I))}if(h*N>0&&(h*=-1),g*N>0&&(g*=-1),!h)return null;const E=[f,T,.5*h];return o&&(E[3]=i,E[4]=.5*g),E}function r(n,e,r,l,s){const c=t(l,s);let f=e,T=e+c,i=0,h=0,g=0,E=0;for(let t=0,b=r-1;t<b;t++,f+=c,T+=c){const t=n[f],e=n[f+1],r=n[f+2],s=n[T],c=n[T+1],b=n[T+2],m=l?o(t,e,r,s,c,b):I(t,e,s,c);if(m)if(i+=m,l){const n=N(t,e,r,s,c,b);h+=m*n[0],g+=m*n[1],E+=m*n[2]}else{const n=u(t,e,s,c);h+=m*n[0],g+=m*n[1]}}return i>0?l?[h/i,g/i,E/i]:[h/i,g/i]:r>0?l?[n[e],n[e+1],n[e+2]]:[n[e],n[e+1]]:null}function I(t,n,e,r){const I=e-t,o=r-n;return Math.sqrt(I*I+o*o)}function o(t,n,e,r,I,o){const u=r-t,N=I-n,l=o-e;return Math.sqrt(u*u+N*N+l*l)}function u(t,n,e,r){return[t+.5*(e-t),n+.5*(r-n)]}function N(t,n,e,r,I,o){return[t+.5*(r-t),n+.5*(I-n),e+.5*(o-e)]}export{n as getCentroidOptimizedGeometry,r as lineCentroid};
